//
// Generated by Bluespec Compiler, version 2023.07 (build 0eb551d)
//
// On Tue Jul  2 10:55:56 EDT 2024
//
//
// Ports:
// Name                         I/O  size props
// RDY_putFromProc                O     1
// getToProc                      O   512 reg
// RDY_getToProc                  O     1 reg
// getToMem                       O   539 reg
// RDY_getToMem                   O     1 reg
// RDY_putFromMem                 O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// putFromProc_e                  I   539
// putFromMem_e                   I   512 reg
// EN_putFromProc                 I     1
// EN_putFromMem                  I     1
// EN_getToProc                   I     1
// EN_getToMem                    I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkCache(CLK,
	       RST_N,

	       putFromProc_e,
	       EN_putFromProc,
	       RDY_putFromProc,

	       EN_getToProc,
	       getToProc,
	       RDY_getToProc,

	       EN_getToMem,
	       getToMem,
	       RDY_getToMem,

	       putFromMem_e,
	       EN_putFromMem,
	       RDY_putFromMem);
  input  CLK;
  input  RST_N;

  // action method putFromProc
  input  [538 : 0] putFromProc_e;
  input  EN_putFromProc;
  output RDY_putFromProc;

  // actionvalue method getToProc
  input  EN_getToProc;
  output [511 : 0] getToProc;
  output RDY_getToProc;

  // actionvalue method getToMem
  input  EN_getToMem;
  output [538 : 0] getToMem;
  output RDY_getToMem;

  // action method putFromMem
  input  [511 : 0] putFromMem_e;
  input  EN_putFromMem;
  output RDY_putFromMem;

  // signals for module outputs
  wire [538 : 0] getToMem;
  wire [511 : 0] getToProc;
  wire RDY_getToMem, RDY_getToProc, RDY_putFromMem, RDY_putFromProc;

  // inlined wires
  wire [1 : 0] lines_serverAdapter_s1_1$wget,
	       lines_serverAdapter_writeWithResp$wget;
  wire lines_serverAdapter_cnt_1$whas,
       lines_serverAdapter_outData_enqw$whas,
       lines_serverAdapter_writeWithResp$whas;

  // register clear_idx
  reg [7 : 0] clear_idx;
  wire [7 : 0] clear_idx$D_IN;
  wire clear_idx$EN;

  // register curReq
  reg [538 : 0] curReq;
  wire [538 : 0] curReq$D_IN;
  wire curReq$EN;

  // register lines_serverAdapter_cnt
  reg [2 : 0] lines_serverAdapter_cnt;
  wire [2 : 0] lines_serverAdapter_cnt$D_IN;
  wire lines_serverAdapter_cnt$EN;

  // register lines_serverAdapter_s1
  reg [1 : 0] lines_serverAdapter_s1;
  wire [1 : 0] lines_serverAdapter_s1$D_IN;
  wire lines_serverAdapter_s1$EN;

  // register reqStatus
  reg [2 : 0] reqStatus;
  reg [2 : 0] reqStatus$D_IN;
  wire reqStatus$EN;

  // ports of submodule lines_memory
  reg [531 : 0] lines_memory$DI;
  reg [7 : 0] lines_memory$ADDR;
  wire [531 : 0] lines_memory$DO;
  wire lines_memory$EN, lines_memory$WE;

  // ports of submodule lines_serverAdapter_outData_beforeDeq
  wire lines_serverAdapter_outData_beforeDeq$D_IN,
       lines_serverAdapter_outData_beforeDeq$EN,
       lines_serverAdapter_outData_beforeDeq$Q_OUT;

  // ports of submodule lines_serverAdapter_outData_beforeEnq
  wire lines_serverAdapter_outData_beforeEnq$D_IN,
       lines_serverAdapter_outData_beforeEnq$EN,
       lines_serverAdapter_outData_beforeEnq$Q_OUT;

  // ports of submodule lines_serverAdapter_outData_ff
  wire [531 : 0] lines_serverAdapter_outData_ff$D_IN,
		 lines_serverAdapter_outData_ff$D_OUT;
  wire lines_serverAdapter_outData_ff$CLR,
       lines_serverAdapter_outData_ff$DEQ,
       lines_serverAdapter_outData_ff$EMPTY_N,
       lines_serverAdapter_outData_ff$ENQ,
       lines_serverAdapter_outData_ff$FULL_N;

  // ports of submodule memReqQ
  wire [538 : 0] memReqQ$D_IN, memReqQ$D_OUT;
  wire memReqQ$CLR, memReqQ$DEQ, memReqQ$EMPTY_N, memReqQ$ENQ, memReqQ$FULL_N;

  // ports of submodule memRespQ
  wire [511 : 0] memRespQ$D_IN, memRespQ$D_OUT;
  wire memRespQ$CLR,
       memRespQ$DEQ,
       memRespQ$EMPTY_N,
       memRespQ$ENQ,
       memRespQ$FULL_N;

  // ports of submodule respQ
  wire [511 : 0] respQ$D_IN, respQ$D_OUT;
  wire respQ$CLR, respQ$DEQ, respQ$EMPTY_N, respQ$ENQ, respQ$FULL_N;

  // rule scheduling signals
  wire WILL_FIRE_RL_checkMiss,
       WILL_FIRE_RL_clear_bram,
       WILL_FIRE_RL_sendFillReq,
       WILL_FIRE_RL_waitFillResp;

  // inputs to muxes for submodule ports
  wire [538 : 0] MUX_memReqQ$enq_1__VAL_1, MUX_memReqQ$enq_1__VAL_2;
  wire [531 : 0] MUX_lines_memory$put_3__VAL_1, MUX_lines_memory$put_3__VAL_4;
  wire [511 : 0] MUX_respQ$enq_1__VAL_2;
  wire [2 : 0] MUX_reqStatus$write_1__VAL_2;
  wire MUX_lines_memory$put_2__SEL_1,
       MUX_memReqQ$enq_1__SEL_1,
       MUX_reqStatus$write_1__SEL_1,
       MUX_respQ$enq_1__SEL_1;

  // remaining internal signals
  wire [511 : 0] din_datain_data__h3135, x__h2664;
  wire [17 : 0] IF_lines_serverAdapter_outData_ff_i_notEmpty_T_ETC___d70;
  wire [2 : 0] lines_serverAdapter_cnt_5_PLUS_IF_lines_server_ETC___d21;
  wire [1 : 0] IF_lines_serverAdapter_outData_ff_i_notEmpty_T_ETC___d64;
  wire IF_NOT_IF_lines_serverAdapter_outData_ff_i_not_ETC___d82,
       IF_lines_serverAdapter_outData_ff_i_notEmpty_T_ETC___d73,
       lines_serverAdapter_cnt_5_SLT_3___d50;

  // action method putFromProc
  assign RDY_putFromProc =
	     reqStatus == 3'd1 && lines_serverAdapter_cnt_5_SLT_3___d50 ;

  // actionvalue method getToProc
  assign getToProc = respQ$D_OUT ;
  assign RDY_getToProc = respQ$EMPTY_N ;

  // actionvalue method getToMem
  assign getToMem = memReqQ$D_OUT ;
  assign RDY_getToMem = memReqQ$EMPTY_N ;

  // action method putFromMem
  assign RDY_putFromMem = memRespQ$FULL_N ;

  // submodule lines_memory
  BRAM1Load #(.FILENAME("zero512.vmh"),
	      .PIPELINED(1'd0),
	      .ADDR_WIDTH(32'd8),
	      .DATA_WIDTH(32'd532),
	      .MEMSIZE(9'd256),
	      .BINARY(1'd1)) lines_memory(.CLK(CLK),
					  .ADDR(lines_memory$ADDR),
					  .DI(lines_memory$DI),
					  .WE(lines_memory$WE),
					  .EN(lines_memory$EN),
					  .DO(lines_memory$DO));

  // submodule lines_serverAdapter_outData_beforeDeq
  RevertReg #(.width(32'd1),
	      .init(1'd1)) lines_serverAdapter_outData_beforeDeq(.CLK(CLK),
								 .D_IN(lines_serverAdapter_outData_beforeDeq$D_IN),
								 .EN(lines_serverAdapter_outData_beforeDeq$EN),
								 .Q_OUT(lines_serverAdapter_outData_beforeDeq$Q_OUT));

  // submodule lines_serverAdapter_outData_beforeEnq
  RevertReg #(.width(32'd1),
	      .init(1'd1)) lines_serverAdapter_outData_beforeEnq(.CLK(CLK),
								 .D_IN(lines_serverAdapter_outData_beforeEnq$D_IN),
								 .EN(lines_serverAdapter_outData_beforeEnq$EN),
								 .Q_OUT(lines_serverAdapter_outData_beforeEnq$Q_OUT));

  // submodule lines_serverAdapter_outData_ff
  SizedFIFO #(.p1width(32'd532),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(1'd0)) lines_serverAdapter_outData_ff(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(lines_serverAdapter_outData_ff$D_IN),
							     .ENQ(lines_serverAdapter_outData_ff$ENQ),
							     .DEQ(lines_serverAdapter_outData_ff$DEQ),
							     .CLR(lines_serverAdapter_outData_ff$CLR),
							     .D_OUT(lines_serverAdapter_outData_ff$D_OUT),
							     .FULL_N(lines_serverAdapter_outData_ff$FULL_N),
							     .EMPTY_N(lines_serverAdapter_outData_ff$EMPTY_N));

  // submodule memReqQ
  FIFO2 #(.width(32'd539), .guarded(1'd1)) memReqQ(.RST(RST_N),
						   .CLK(CLK),
						   .D_IN(memReqQ$D_IN),
						   .ENQ(memReqQ$ENQ),
						   .DEQ(memReqQ$DEQ),
						   .CLR(memReqQ$CLR),
						   .D_OUT(memReqQ$D_OUT),
						   .FULL_N(memReqQ$FULL_N),
						   .EMPTY_N(memReqQ$EMPTY_N));

  // submodule memRespQ
  FIFO2 #(.width(32'd512), .guarded(1'd1)) memRespQ(.RST(RST_N),
						    .CLK(CLK),
						    .D_IN(memRespQ$D_IN),
						    .ENQ(memRespQ$ENQ),
						    .DEQ(memRespQ$DEQ),
						    .CLR(memRespQ$CLR),
						    .D_OUT(memRespQ$D_OUT),
						    .FULL_N(memRespQ$FULL_N),
						    .EMPTY_N(memRespQ$EMPTY_N));

  // submodule respQ
  FIFO2 #(.width(32'd512), .guarded(1'd1)) respQ(.RST(RST_N),
						 .CLK(CLK),
						 .D_IN(respQ$D_IN),
						 .ENQ(respQ$ENQ),
						 .DEQ(respQ$DEQ),
						 .CLR(respQ$CLR),
						 .D_OUT(respQ$D_OUT),
						 .FULL_N(respQ$FULL_N),
						 .EMPTY_N(respQ$EMPTY_N));

  // rule RL_clear_bram
  assign WILL_FIRE_RL_clear_bram =
	     lines_serverAdapter_cnt_5_SLT_3___d50 && reqStatus == 3'd0 ;

  // rule RL_sendFillReq
  assign WILL_FIRE_RL_sendFillReq = memReqQ$FULL_N && reqStatus == 3'd3 ;

  // rule RL_waitFillResp
  assign WILL_FIRE_RL_waitFillResp =
	     lines_serverAdapter_cnt_5_SLT_3___d50 && memRespQ$EMPTY_N &&
	     (curReq[538] || respQ$FULL_N) &&
	     reqStatus == 3'd4 ;

  // rule RL_checkMiss
  assign WILL_FIRE_RL_checkMiss =
	     lines_serverAdapter_outData_beforeDeq$Q_OUT &&
	     (lines_serverAdapter_outData_ff$EMPTY_N ||
	      lines_serverAdapter_outData_enqw$whas) &&
	     IF_NOT_IF_lines_serverAdapter_outData_ff_i_not_ETC___d82 &&
	     reqStatus == 3'd2 ;

  // inputs to muxes for submodule ports
  assign MUX_lines_memory$put_2__SEL_1 =
	     WILL_FIRE_RL_checkMiss &&
	     IF_lines_serverAdapter_outData_ff_i_notEmpty_T_ETC___d64 !=
	     2'd0 &&
	     IF_lines_serverAdapter_outData_ff_i_notEmpty_T_ETC___d73 &&
	     curReq[538] ;
  assign MUX_memReqQ$enq_1__SEL_1 =
	     WILL_FIRE_RL_checkMiss &&
	     !IF_lines_serverAdapter_outData_ff_i_notEmpty_T_ETC___d73 &&
	     IF_lines_serverAdapter_outData_ff_i_notEmpty_T_ETC___d64 ==
	     2'd2 ;
  assign MUX_reqStatus$write_1__SEL_1 =
	     WILL_FIRE_RL_clear_bram && clear_idx == 8'd255 ;
  assign MUX_respQ$enq_1__SEL_1 = WILL_FIRE_RL_waitFillResp && !curReq[538] ;
  assign MUX_lines_memory$put_3__VAL_1 =
	     { 2'd2,
	       IF_lines_serverAdapter_outData_ff_i_notEmpty_T_ETC___d70,
	       curReq[511:0] } ;
  assign MUX_lines_memory$put_3__VAL_4 =
	     { curReq[538] ? 2'd2 : 2'd1,
	       curReq[537:520],
	       din_datain_data__h3135 } ;
  assign MUX_memReqQ$enq_1__VAL_1 =
	     { 1'b1,
	       IF_lines_serverAdapter_outData_ff_i_notEmpty_T_ETC___d70,
	       curReq[519:512],
	       x__h2664 } ;
  assign MUX_memReqQ$enq_1__VAL_2 = { 1'b0, curReq[537:0] } ;
  assign MUX_reqStatus$write_1__VAL_2 =
	     (IF_lines_serverAdapter_outData_ff_i_notEmpty_T_ETC___d64 !=
	      2'd0 &&
	      IF_lines_serverAdapter_outData_ff_i_notEmpty_T_ETC___d73) ?
	       3'd1 :
	       3'd3 ;
  assign MUX_respQ$enq_1__VAL_2 =
	     lines_serverAdapter_outData_ff$EMPTY_N ?
	       lines_serverAdapter_outData_ff$D_OUT[511:0] :
	       lines_memory$DO[511:0] ;

  // inlined wires
  assign lines_serverAdapter_outData_enqw$whas =
	     (!lines_serverAdapter_s1[0] ||
	      lines_serverAdapter_outData_ff$FULL_N) &&
	     lines_serverAdapter_s1[1] &&
	     lines_serverAdapter_s1[0] ;
  assign lines_serverAdapter_cnt_1$whas =
	     (MUX_lines_memory$put_2__SEL_1 || EN_putFromProc ||
	      WILL_FIRE_RL_waitFillResp ||
	      WILL_FIRE_RL_clear_bram) &&
	     (!lines_serverAdapter_writeWithResp$wget[1] ||
	      lines_serverAdapter_writeWithResp$wget[0]) ;
  assign lines_serverAdapter_writeWithResp$wget =
	     EN_putFromProc ? 2'd0 : 2'd2 ;
  assign lines_serverAdapter_writeWithResp$whas =
	     MUX_lines_memory$put_2__SEL_1 || EN_putFromProc ||
	     WILL_FIRE_RL_waitFillResp ||
	     WILL_FIRE_RL_clear_bram ;
  assign lines_serverAdapter_s1_1$wget =
	     { 1'd1,
	       !lines_serverAdapter_writeWithResp$wget[1] ||
	       lines_serverAdapter_writeWithResp$wget[0] } ;

  // register clear_idx
  assign clear_idx$D_IN = clear_idx + 8'd1 ;
  assign clear_idx$EN = WILL_FIRE_RL_clear_bram && clear_idx != 8'd255 ;

  // register curReq
  assign curReq$D_IN = putFromProc_e ;
  assign curReq$EN = EN_putFromProc ;

  // register lines_serverAdapter_cnt
  assign lines_serverAdapter_cnt$D_IN =
	     lines_serverAdapter_cnt_5_PLUS_IF_lines_server_ETC___d21 ;
  assign lines_serverAdapter_cnt$EN =
	     lines_serverAdapter_cnt_1$whas || WILL_FIRE_RL_checkMiss ;

  // register lines_serverAdapter_s1
  assign lines_serverAdapter_s1$D_IN =
	     lines_serverAdapter_writeWithResp$whas ?
	       lines_serverAdapter_s1_1$wget :
	       2'd0 ;
  assign lines_serverAdapter_s1$EN = 1'd1 ;

  // register reqStatus
  always@(WILL_FIRE_RL_checkMiss or
	  MUX_reqStatus$write_1__VAL_2 or
	  MUX_reqStatus$write_1__SEL_1 or
	  WILL_FIRE_RL_waitFillResp or
	  EN_putFromProc or WILL_FIRE_RL_sendFillReq)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_checkMiss: reqStatus$D_IN = MUX_reqStatus$write_1__VAL_2;
      MUX_reqStatus$write_1__SEL_1 || WILL_FIRE_RL_waitFillResp:
	  reqStatus$D_IN = 3'd1;
      EN_putFromProc: reqStatus$D_IN = 3'd2;
      WILL_FIRE_RL_sendFillReq: reqStatus$D_IN = 3'd4;
      default: reqStatus$D_IN = 3'b010 /* unspecified value */ ;
    endcase
  end
  assign reqStatus$EN =
	     WILL_FIRE_RL_clear_bram && clear_idx == 8'd255 ||
	     WILL_FIRE_RL_checkMiss ||
	     WILL_FIRE_RL_waitFillResp ||
	     EN_putFromProc ||
	     WILL_FIRE_RL_sendFillReq ;

  // submodule lines_memory
  always@(MUX_lines_memory$put_2__SEL_1 or
	  WILL_FIRE_RL_waitFillResp or
	  curReq or
	  EN_putFromProc or
	  putFromProc_e or WILL_FIRE_RL_clear_bram or clear_idx)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_lines_memory$put_2__SEL_1 || WILL_FIRE_RL_waitFillResp:
	  lines_memory$ADDR = curReq[519:512];
      EN_putFromProc: lines_memory$ADDR = putFromProc_e[519:512];
      WILL_FIRE_RL_clear_bram: lines_memory$ADDR = clear_idx;
      default: lines_memory$ADDR = 8'b10101010 /* unspecified value */ ;
    endcase
  end
  always@(MUX_lines_memory$put_2__SEL_1 or
	  MUX_lines_memory$put_3__VAL_1 or
	  EN_putFromProc or
	  WILL_FIRE_RL_clear_bram or
	  WILL_FIRE_RL_waitFillResp or MUX_lines_memory$put_3__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_lines_memory$put_2__SEL_1:
	  lines_memory$DI = MUX_lines_memory$put_3__VAL_1;
      EN_putFromProc:
	  lines_memory$DI =
	      532'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
      WILL_FIRE_RL_clear_bram: lines_memory$DI = 532'd0;
      WILL_FIRE_RL_waitFillResp:
	  lines_memory$DI = MUX_lines_memory$put_3__VAL_4;
      default: lines_memory$DI =
		   532'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign lines_memory$WE = !EN_putFromProc ;
  assign lines_memory$EN =
	     WILL_FIRE_RL_checkMiss &&
	     IF_lines_serverAdapter_outData_ff_i_notEmpty_T_ETC___d64 !=
	     2'd0 &&
	     IF_lines_serverAdapter_outData_ff_i_notEmpty_T_ETC___d73 &&
	     curReq[538] ||
	     EN_putFromProc ||
	     WILL_FIRE_RL_clear_bram ||
	     WILL_FIRE_RL_waitFillResp ;

  // submodule lines_serverAdapter_outData_beforeDeq
  assign lines_serverAdapter_outData_beforeDeq$D_IN = 1'd1 ;
  assign lines_serverAdapter_outData_beforeDeq$EN = WILL_FIRE_RL_checkMiss ;

  // submodule lines_serverAdapter_outData_beforeEnq
  assign lines_serverAdapter_outData_beforeEnq$D_IN = 1'd1 ;
  assign lines_serverAdapter_outData_beforeEnq$EN =
	     lines_serverAdapter_outData_enqw$whas ;

  // submodule lines_serverAdapter_outData_ff
  assign lines_serverAdapter_outData_ff$D_IN = lines_memory$DO ;
  assign lines_serverAdapter_outData_ff$ENQ =
	     lines_serverAdapter_outData_enqw$whas &&
	     (!WILL_FIRE_RL_checkMiss ||
	      lines_serverAdapter_outData_ff$EMPTY_N) ;
  assign lines_serverAdapter_outData_ff$DEQ =
	     WILL_FIRE_RL_checkMiss &&
	     lines_serverAdapter_outData_ff$EMPTY_N ;
  assign lines_serverAdapter_outData_ff$CLR = 1'b0 ;

  // submodule memReqQ
  assign memReqQ$D_IN =
	     MUX_memReqQ$enq_1__SEL_1 ?
	       MUX_memReqQ$enq_1__VAL_1 :
	       MUX_memReqQ$enq_1__VAL_2 ;
  assign memReqQ$ENQ =
	     WILL_FIRE_RL_checkMiss &&
	     !IF_lines_serverAdapter_outData_ff_i_notEmpty_T_ETC___d73 &&
	     IF_lines_serverAdapter_outData_ff_i_notEmpty_T_ETC___d64 ==
	     2'd2 ||
	     WILL_FIRE_RL_sendFillReq ;
  assign memReqQ$DEQ = EN_getToMem ;
  assign memReqQ$CLR = 1'b0 ;

  // submodule memRespQ
  assign memRespQ$D_IN = putFromMem_e ;
  assign memRespQ$ENQ = EN_putFromMem ;
  assign memRespQ$DEQ = WILL_FIRE_RL_waitFillResp ;
  assign memRespQ$CLR = 1'b0 ;

  // submodule respQ
  assign respQ$D_IN =
	     MUX_respQ$enq_1__SEL_1 ?
	       memRespQ$D_OUT :
	       MUX_respQ$enq_1__VAL_2 ;
  assign respQ$ENQ =
	     WILL_FIRE_RL_waitFillResp && !curReq[538] ||
	     WILL_FIRE_RL_checkMiss &&
	     IF_lines_serverAdapter_outData_ff_i_notEmpty_T_ETC___d64 !=
	     2'd0 &&
	     IF_lines_serverAdapter_outData_ff_i_notEmpty_T_ETC___d73 &&
	     !curReq[538] ;
  assign respQ$DEQ = EN_getToProc ;
  assign respQ$CLR = 1'b0 ;

  // remaining internal signals
  assign IF_NOT_IF_lines_serverAdapter_outData_ff_i_not_ETC___d82 =
	     (IF_lines_serverAdapter_outData_ff_i_notEmpty_T_ETC___d64 !=
	      2'd0 &&
	      IF_lines_serverAdapter_outData_ff_i_notEmpty_T_ETC___d73) ?
	       (curReq[538] ?
		  lines_serverAdapter_cnt_5_SLT_3___d50 :
		  respQ$FULL_N) :
	       IF_lines_serverAdapter_outData_ff_i_notEmpty_T_ETC___d64 !=
	       2'd2 ||
	       memReqQ$FULL_N ;
  assign IF_lines_serverAdapter_outData_ff_i_notEmpty_T_ETC___d64 =
	     lines_serverAdapter_outData_ff$EMPTY_N ?
	       lines_serverAdapter_outData_ff$D_OUT[531:530] :
	       lines_memory$DO[531:530] ;
  assign IF_lines_serverAdapter_outData_ff_i_notEmpty_T_ETC___d70 =
	     lines_serverAdapter_outData_ff$EMPTY_N ?
	       lines_serverAdapter_outData_ff$D_OUT[529:512] :
	       lines_memory$DO[529:512] ;
  assign IF_lines_serverAdapter_outData_ff_i_notEmpty_T_ETC___d73 =
	     IF_lines_serverAdapter_outData_ff_i_notEmpty_T_ETC___d70 ==
	     curReq[537:520] ;
  assign din_datain_data__h3135 =
	     curReq[538] ? curReq[511:0] : memRespQ$D_OUT ;
  assign lines_serverAdapter_cnt_5_PLUS_IF_lines_server_ETC___d21 =
	     lines_serverAdapter_cnt +
	     (lines_serverAdapter_cnt_1$whas ? 3'd1 : 3'd0) +
	     (WILL_FIRE_RL_checkMiss ? 3'd7 : 3'd0) ;
  assign lines_serverAdapter_cnt_5_SLT_3___d50 =
	     (lines_serverAdapter_cnt ^ 3'h4) < 3'd7 ;
  assign x__h2664 = MUX_respQ$enq_1__VAL_2 ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        clear_idx <= `BSV_ASSIGNMENT_DELAY 8'd0;
	curReq <= `BSV_ASSIGNMENT_DELAY 539'd0;
	lines_serverAdapter_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	lines_serverAdapter_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	reqStatus <= `BSV_ASSIGNMENT_DELAY 3'd0;
      end
    else
      begin
        if (clear_idx$EN) clear_idx <= `BSV_ASSIGNMENT_DELAY clear_idx$D_IN;
	if (curReq$EN) curReq <= `BSV_ASSIGNMENT_DELAY curReq$D_IN;
	if (lines_serverAdapter_cnt$EN)
	  lines_serverAdapter_cnt <= `BSV_ASSIGNMENT_DELAY
	      lines_serverAdapter_cnt$D_IN;
	if (lines_serverAdapter_s1$EN)
	  lines_serverAdapter_s1 <= `BSV_ASSIGNMENT_DELAY
	      lines_serverAdapter_s1$D_IN;
	if (reqStatus$EN) reqStatus <= `BSV_ASSIGNMENT_DELAY reqStatus$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    clear_idx = 8'hAA;
    curReq =
	539'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    lines_serverAdapter_cnt = 3'h2;
    lines_serverAdapter_s1 = 2'h2;
    reqStatus = 3'h2;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (lines_serverAdapter_s1[1] &&
	  (!lines_serverAdapter_outData_beforeEnq$Q_OUT ||
	   !lines_serverAdapter_outData_beforeDeq$Q_OUT ||
	   !lines_serverAdapter_outData_ff$FULL_N))
	$display("ERROR: %m: mkBRAMAdapter overrun");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_checkMiss &&
	  !IF_lines_serverAdapter_outData_ff_i_notEmpty_T_ETC___d73 &&
	  IF_lines_serverAdapter_outData_ff_i_notEmpty_T_ETC___d64 == 2'd2)
	$display("[c512_wb] tag=%x, index=%x, addr=%x",
		 IF_lines_serverAdapter_outData_ff_i_notEmpty_T_ETC___d70,
		 curReq[519:512],
		 { IF_lines_serverAdapter_outData_ff_i_notEmpty_T_ETC___d70,
		   curReq[519:512] });
  end
  // synopsys translate_on
endmodule  // mkCache

