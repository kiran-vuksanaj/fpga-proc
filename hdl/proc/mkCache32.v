//
// Generated by Bluespec Compiler, version 2023.07 (build 0eb551d)
//
// On Tue Jul  2 10:55:56 EDT 2024
//
//
// Ports:
// Name                         I/O  size props
// RDY_putFromProc                O     1
// getToProc                      O    32 reg
// RDY_getToProc                  O     1 reg
// getToMem                       O   539 reg
// RDY_getToMem                   O     1 reg
// RDY_putFromMem                 O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// putFromProc_e                  I    68
// putFromMem_e                   I   512 reg
// EN_putFromProc                 I     1
// EN_putFromMem                  I     1
// EN_getToProc                   I     1
// EN_getToMem                    I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkCache32(CLK,
		 RST_N,

		 putFromProc_e,
		 EN_putFromProc,
		 RDY_putFromProc,

		 EN_getToProc,
		 getToProc,
		 RDY_getToProc,

		 EN_getToMem,
		 getToMem,
		 RDY_getToMem,

		 putFromMem_e,
		 EN_putFromMem,
		 RDY_putFromMem);
  input  CLK;
  input  RST_N;

  // action method putFromProc
  input  [67 : 0] putFromProc_e;
  input  EN_putFromProc;
  output RDY_putFromProc;

  // actionvalue method getToProc
  input  EN_getToProc;
  output [31 : 0] getToProc;
  output RDY_getToProc;

  // actionvalue method getToMem
  input  EN_getToMem;
  output [538 : 0] getToMem;
  output RDY_getToMem;

  // action method putFromMem
  input  [511 : 0] putFromMem_e;
  input  EN_putFromMem;
  output RDY_putFromMem;

  // signals for module outputs
  wire [538 : 0] getToMem;
  wire [31 : 0] getToProc;
  wire RDY_getToMem, RDY_getToProc, RDY_putFromMem, RDY_putFromProc;

  // inlined wires
  reg [1 : 0] cache_data_serverAdapter_writeWithResp$wget;
  wire [1 : 0] cache_data_serverAdapter_s1_1$wget,
	       cache_metadata_serverAdapter_s1_1$wget,
	       cache_metadata_serverAdapter_writeWithResp$wget;
  wire cache_data_serverAdapter_cnt_1$whas,
       cache_data_serverAdapter_outData_enqw$whas,
       cache_data_serverAdapter_writeWithResp$whas,
       cache_metadata_serverAdapter_cnt_1$whas,
       cache_metadata_serverAdapter_outData_enqw$whas,
       cache_metadata_serverAdapter_writeWithResp$whas;

  // register cache_data_serverAdapter_cnt
  reg [2 : 0] cache_data_serverAdapter_cnt;
  wire [2 : 0] cache_data_serverAdapter_cnt$D_IN;
  wire cache_data_serverAdapter_cnt$EN;

  // register cache_data_serverAdapter_s1
  reg [1 : 0] cache_data_serverAdapter_s1;
  wire [1 : 0] cache_data_serverAdapter_s1$D_IN;
  wire cache_data_serverAdapter_s1$EN;

  // register cache_metadata_serverAdapter_cnt
  reg [2 : 0] cache_metadata_serverAdapter_cnt;
  wire [2 : 0] cache_metadata_serverAdapter_cnt$D_IN;
  wire cache_metadata_serverAdapter_cnt$EN;

  // register cache_metadata_serverAdapter_s1
  reg [1 : 0] cache_metadata_serverAdapter_s1;
  wire [1 : 0] cache_metadata_serverAdapter_s1$D_IN;
  wire cache_metadata_serverAdapter_s1$EN;

  // register clear_idx
  reg [6 : 0] clear_idx;
  wire [6 : 0] clear_idx$D_IN;
  wire clear_idx$EN;

  // register curReq
  reg [67 : 0] curReq;
  wire [67 : 0] curReq$D_IN;
  wire curReq$EN;

  // register reqStatus
  reg [2 : 0] reqStatus;
  reg [2 : 0] reqStatus$D_IN;
  wire reqStatus$EN;

  // ports of submodule cache_data_memory
  reg [511 : 0] cache_data_memory$DI;
  reg [63 : 0] cache_data_memory$WE;
  reg [6 : 0] cache_data_memory$ADDR;
  wire [511 : 0] cache_data_memory$DO;
  wire cache_data_memory$EN;

  // ports of submodule cache_data_serverAdapter_outData_beforeDeq
  wire cache_data_serverAdapter_outData_beforeDeq$D_IN,
       cache_data_serverAdapter_outData_beforeDeq$EN,
       cache_data_serverAdapter_outData_beforeDeq$Q_OUT;

  // ports of submodule cache_data_serverAdapter_outData_beforeEnq
  wire cache_data_serverAdapter_outData_beforeEnq$D_IN,
       cache_data_serverAdapter_outData_beforeEnq$EN,
       cache_data_serverAdapter_outData_beforeEnq$Q_OUT;

  // ports of submodule cache_data_serverAdapter_outData_ff
  wire [511 : 0] cache_data_serverAdapter_outData_ff$D_IN,
		 cache_data_serverAdapter_outData_ff$D_OUT;
  wire cache_data_serverAdapter_outData_ff$CLR,
       cache_data_serverAdapter_outData_ff$DEQ,
       cache_data_serverAdapter_outData_ff$EMPTY_N,
       cache_data_serverAdapter_outData_ff$ENQ,
       cache_data_serverAdapter_outData_ff$FULL_N;

  // ports of submodule cache_metadata_memory
  reg [20 : 0] cache_metadata_memory$DI;
  reg [6 : 0] cache_metadata_memory$ADDR;
  wire [20 : 0] cache_metadata_memory$DO;
  wire cache_metadata_memory$EN, cache_metadata_memory$WE;

  // ports of submodule cache_metadata_serverAdapter_outData_beforeDeq
  wire cache_metadata_serverAdapter_outData_beforeDeq$D_IN,
       cache_metadata_serverAdapter_outData_beforeDeq$EN,
       cache_metadata_serverAdapter_outData_beforeDeq$Q_OUT;

  // ports of submodule cache_metadata_serverAdapter_outData_beforeEnq
  wire cache_metadata_serverAdapter_outData_beforeEnq$D_IN,
       cache_metadata_serverAdapter_outData_beforeEnq$EN,
       cache_metadata_serverAdapter_outData_beforeEnq$Q_OUT;

  // ports of submodule cache_metadata_serverAdapter_outData_ff
  wire [20 : 0] cache_metadata_serverAdapter_outData_ff$D_IN,
		cache_metadata_serverAdapter_outData_ff$D_OUT;
  wire cache_metadata_serverAdapter_outData_ff$CLR,
       cache_metadata_serverAdapter_outData_ff$DEQ,
       cache_metadata_serverAdapter_outData_ff$EMPTY_N,
       cache_metadata_serverAdapter_outData_ff$ENQ,
       cache_metadata_serverAdapter_outData_ff$FULL_N;

  // ports of submodule memReqQ
  wire [538 : 0] memReqQ$D_IN, memReqQ$D_OUT;
  wire memReqQ$CLR, memReqQ$DEQ, memReqQ$EMPTY_N, memReqQ$ENQ, memReqQ$FULL_N;

  // ports of submodule memRespQ
  wire [511 : 0] memRespQ$D_IN, memRespQ$D_OUT;
  wire memRespQ$CLR,
       memRespQ$DEQ,
       memRespQ$EMPTY_N,
       memRespQ$ENQ,
       memRespQ$FULL_N;

  // ports of submodule respQ
  wire [31 : 0] respQ$D_IN, respQ$D_OUT;
  wire respQ$CLR, respQ$DEQ, respQ$EMPTY_N, respQ$ENQ, respQ$FULL_N;

  // rule scheduling signals
  wire WILL_FIRE_RL_checkMiss,
       WILL_FIRE_RL_clear_bram,
       WILL_FIRE_RL_sendFillReq,
       WILL_FIRE_RL_waitFillResp;

  // inputs to muxes for submodule ports
  wire [538 : 0] MUX_memReqQ$enq_1__VAL_1, MUX_memReqQ$enq_1__VAL_2;
  wire [511 : 0] MUX_cache_data_memory$put_3__VAL_1,
		 MUX_cache_data_memory$put_3__VAL_4;
  wire [20 : 0] MUX_cache_metadata_memory$put_3__VAL_1,
		MUX_cache_metadata_memory$put_3__VAL_4;
  wire [2 : 0] MUX_reqStatus$write_1__VAL_2;
  wire [1 : 0] MUX_cache_data_serverAdapter_writeWithResp$wset_1__VAL_1;
  wire MUX_cache_data_memory$put_1__SEL_1,
       MUX_cache_data_serverAdapter_writeWithResp$wset_1__SEL_3,
       MUX_memReqQ$enq_1__SEL_1,
       MUX_reqStatus$write_1__SEL_1,
       MUX_respQ$enq_1__SEL_1;

  // remaining internal signals
  reg [31 : 0] SEL_ARR_IF_cache_data_serverAdapter_outData_ff_ETC___d164,
	       indexed_word__h7551;
  wire [511 : 0] IF_curReq_23_BITS_37_TO_34_63_EQ_15_31_THEN_IF_ETC___d280,
		 x_data__h4883;
  wire [447 : 0] IF_curReq_23_BITS_37_TO_34_63_EQ_15_31_THEN_IF_ETC___d275;
  wire [383 : 0] IF_curReq_23_BITS_37_TO_34_63_EQ_15_31_THEN_IF_ETC___d270;
  wire [319 : 0] IF_curReq_23_BITS_37_TO_34_63_EQ_15_31_THEN_IF_ETC___d265;
  wire [255 : 0] IF_curReq_23_BITS_37_TO_34_63_EQ_15_31_THEN_IF_ETC___d260;
  wire [191 : 0] IF_curReq_23_BITS_37_TO_34_63_EQ_15_31_THEN_IF_ETC___d255;
  wire [127 : 0] IF_curReq_23_BITS_37_TO_34_63_EQ_15_31_THEN_IF_ETC___d250;
  wire [63 : 0] w_en__h6216;
  wire [31 : 0] n__h9122, x__h6325;
  wire [25 : 0] x_addr__h4882;
  wire [18 : 0] IF_cache_metadata_serverAdapter_outData_ff_i_n_ETC___d122;
  wire [8 : 0] x__h7354;
  wire [5 : 0] x__h6303;
  wire [2 : 0] cache_data_serverAdapter_cnt_5_PLUS_IF_cache_d_ETC___d71,
	       cache_metadata_serverAdapter_cnt_5_PLUS_IF_cac_ETC___d21;
  wire [1 : 0] IF_cache_metadata_serverAdapter_outData_ff_i_n_ETC___d116;
  wire IF_NOT_IF_cache_metadata_serverAdapter_outData_ETC___d138,
       IF_cache_metadata_serverAdapter_outData_ff_i_n_ETC___d125,
       cache_data_serverAdapter_cnt_5_SLT_3___d100,
       cache_metadata_serverAdapter_cnt_5_SLT_3___d99,
       cache_metadata_serverAdapter_outData_beforeDeq_ETC___d140,
       respQ_i_notFull__27_AND_curReq_23_BITS_67_TO_6_ETC___d131;

  // action method putFromProc
  assign RDY_putFromProc =
	     reqStatus == 3'd1 &&
	     cache_metadata_serverAdapter_cnt_5_SLT_3___d99 &&
	     cache_data_serverAdapter_cnt_5_SLT_3___d100 ;

  // actionvalue method getToProc
  assign getToProc = respQ$D_OUT ;
  assign RDY_getToProc = respQ$EMPTY_N ;

  // actionvalue method getToMem
  assign getToMem = memReqQ$D_OUT ;
  assign RDY_getToMem = memReqQ$EMPTY_N ;

  // action method putFromMem
  assign RDY_putFromMem = memRespQ$FULL_N ;

  // submodule cache_data_memory
  BRAM1BE #(.PIPELINED(1'd0),
	    .ADDR_WIDTH(32'd7),
	    .DATA_WIDTH(32'd512),
	    .CHUNKSIZE(32'd8),
	    .WE_WIDTH(32'd64),
	    .MEMSIZE(8'd128)) cache_data_memory(.CLK(CLK),
						.ADDR(cache_data_memory$ADDR),
						.DI(cache_data_memory$DI),
						.WE(cache_data_memory$WE),
						.EN(cache_data_memory$EN),
						.DO(cache_data_memory$DO));

  // submodule cache_data_serverAdapter_outData_beforeDeq
  RevertReg #(.width(32'd1),
	      .init(1'd1)) cache_data_serverAdapter_outData_beforeDeq(.CLK(CLK),
								      .D_IN(cache_data_serverAdapter_outData_beforeDeq$D_IN),
								      .EN(cache_data_serverAdapter_outData_beforeDeq$EN),
								      .Q_OUT(cache_data_serverAdapter_outData_beforeDeq$Q_OUT));

  // submodule cache_data_serverAdapter_outData_beforeEnq
  RevertReg #(.width(32'd1),
	      .init(1'd1)) cache_data_serverAdapter_outData_beforeEnq(.CLK(CLK),
								      .D_IN(cache_data_serverAdapter_outData_beforeEnq$D_IN),
								      .EN(cache_data_serverAdapter_outData_beforeEnq$EN),
								      .Q_OUT(cache_data_serverAdapter_outData_beforeEnq$Q_OUT));

  // submodule cache_data_serverAdapter_outData_ff
  SizedFIFO #(.p1width(32'd512),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(1'd0)) cache_data_serverAdapter_outData_ff(.RST(RST_N),
								  .CLK(CLK),
								  .D_IN(cache_data_serverAdapter_outData_ff$D_IN),
								  .ENQ(cache_data_serverAdapter_outData_ff$ENQ),
								  .DEQ(cache_data_serverAdapter_outData_ff$DEQ),
								  .CLR(cache_data_serverAdapter_outData_ff$CLR),
								  .D_OUT(cache_data_serverAdapter_outData_ff$D_OUT),
								  .FULL_N(cache_data_serverAdapter_outData_ff$FULL_N),
								  .EMPTY_N(cache_data_serverAdapter_outData_ff$EMPTY_N));

  // submodule cache_metadata_memory
  BRAM1 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd7),
	  .DATA_WIDTH(32'd21),
	  .MEMSIZE(8'd128)) cache_metadata_memory(.CLK(CLK),
						  .ADDR(cache_metadata_memory$ADDR),
						  .DI(cache_metadata_memory$DI),
						  .WE(cache_metadata_memory$WE),
						  .EN(cache_metadata_memory$EN),
						  .DO(cache_metadata_memory$DO));

  // submodule cache_metadata_serverAdapter_outData_beforeDeq
  RevertReg #(.width(32'd1),
	      .init(1'd1)) cache_metadata_serverAdapter_outData_beforeDeq(.CLK(CLK),
									  .D_IN(cache_metadata_serverAdapter_outData_beforeDeq$D_IN),
									  .EN(cache_metadata_serverAdapter_outData_beforeDeq$EN),
									  .Q_OUT(cache_metadata_serverAdapter_outData_beforeDeq$Q_OUT));

  // submodule cache_metadata_serverAdapter_outData_beforeEnq
  RevertReg #(.width(32'd1),
	      .init(1'd1)) cache_metadata_serverAdapter_outData_beforeEnq(.CLK(CLK),
									  .D_IN(cache_metadata_serverAdapter_outData_beforeEnq$D_IN),
									  .EN(cache_metadata_serverAdapter_outData_beforeEnq$EN),
									  .Q_OUT(cache_metadata_serverAdapter_outData_beforeEnq$Q_OUT));

  // submodule cache_metadata_serverAdapter_outData_ff
  SizedFIFO #(.p1width(32'd21),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(1'd0)) cache_metadata_serverAdapter_outData_ff(.RST(RST_N),
								      .CLK(CLK),
								      .D_IN(cache_metadata_serverAdapter_outData_ff$D_IN),
								      .ENQ(cache_metadata_serverAdapter_outData_ff$ENQ),
								      .DEQ(cache_metadata_serverAdapter_outData_ff$DEQ),
								      .CLR(cache_metadata_serverAdapter_outData_ff$CLR),
								      .D_OUT(cache_metadata_serverAdapter_outData_ff$D_OUT),
								      .FULL_N(cache_metadata_serverAdapter_outData_ff$FULL_N),
								      .EMPTY_N(cache_metadata_serverAdapter_outData_ff$EMPTY_N));

  // submodule memReqQ
  FIFO2 #(.width(32'd539), .guarded(1'd1)) memReqQ(.RST(RST_N),
						   .CLK(CLK),
						   .D_IN(memReqQ$D_IN),
						   .ENQ(memReqQ$ENQ),
						   .DEQ(memReqQ$DEQ),
						   .CLR(memReqQ$CLR),
						   .D_OUT(memReqQ$D_OUT),
						   .FULL_N(memReqQ$FULL_N),
						   .EMPTY_N(memReqQ$EMPTY_N));

  // submodule memRespQ
  FIFO2 #(.width(32'd512), .guarded(1'd1)) memRespQ(.RST(RST_N),
						    .CLK(CLK),
						    .D_IN(memRespQ$D_IN),
						    .ENQ(memRespQ$ENQ),
						    .DEQ(memRespQ$DEQ),
						    .CLR(memRespQ$CLR),
						    .D_OUT(memRespQ$D_OUT),
						    .FULL_N(memRespQ$FULL_N),
						    .EMPTY_N(memRespQ$EMPTY_N));

  // submodule respQ
  FIFO2 #(.width(32'd32), .guarded(1'd1)) respQ(.RST(RST_N),
						.CLK(CLK),
						.D_IN(respQ$D_IN),
						.ENQ(respQ$ENQ),
						.DEQ(respQ$DEQ),
						.CLR(respQ$CLR),
						.D_OUT(respQ$D_OUT),
						.FULL_N(respQ$FULL_N),
						.EMPTY_N(respQ$EMPTY_N));

  // rule RL_clear_bram
  assign WILL_FIRE_RL_clear_bram =
	     cache_metadata_serverAdapter_cnt_5_SLT_3___d99 &&
	     cache_data_serverAdapter_cnt_5_SLT_3___d100 &&
	     reqStatus == 3'd0 ;

  // rule RL_sendFillReq
  assign WILL_FIRE_RL_sendFillReq = memReqQ$FULL_N && reqStatus == 3'd3 ;

  // rule RL_waitFillResp
  assign WILL_FIRE_RL_waitFillResp =
	     cache_metadata_serverAdapter_cnt_5_SLT_3___d99 &&
	     cache_data_serverAdapter_cnt_5_SLT_3___d100 &&
	     respQ$FULL_N &&
	     memRespQ$EMPTY_N &&
	     reqStatus == 3'd4 ;

  // rule RL_checkMiss
  assign WILL_FIRE_RL_checkMiss =
	     cache_metadata_serverAdapter_outData_beforeDeq_ETC___d140 &&
	     reqStatus == 3'd2 ;

  // inputs to muxes for submodule ports
  assign MUX_cache_data_memory$put_1__SEL_1 =
	     WILL_FIRE_RL_checkMiss &&
	     IF_cache_metadata_serverAdapter_outData_ff_i_n_ETC___d116 !=
	     2'd0 &&
	     IF_cache_metadata_serverAdapter_outData_ff_i_n_ETC___d125 &&
	     curReq[67:64] != 4'b0 ;
  assign MUX_cache_data_serverAdapter_writeWithResp$wset_1__SEL_3 =
	     WILL_FIRE_RL_waitFillResp || WILL_FIRE_RL_clear_bram ;
  assign MUX_memReqQ$enq_1__SEL_1 =
	     WILL_FIRE_RL_checkMiss &&
	     !IF_cache_metadata_serverAdapter_outData_ff_i_n_ETC___d125 &&
	     IF_cache_metadata_serverAdapter_outData_ff_i_n_ETC___d116 ==
	     2'd2 ;
  assign MUX_reqStatus$write_1__SEL_1 =
	     WILL_FIRE_RL_clear_bram && clear_idx == 7'd127 ;
  assign MUX_respQ$enq_1__SEL_1 =
	     WILL_FIRE_RL_checkMiss &&
	     IF_cache_metadata_serverAdapter_outData_ff_i_n_ETC___d116 !=
	     2'd0 &&
	     IF_cache_metadata_serverAdapter_outData_ff_i_n_ETC___d125 ;
  assign MUX_cache_data_memory$put_3__VAL_1 =
	     { 480'd0, x__h6325 } << x__h7354 ;
  assign MUX_cache_data_memory$put_3__VAL_4 =
	     (curReq[67:64] == 4'b0) ?
	       memRespQ$D_OUT :
	       IF_curReq_23_BITS_37_TO_34_63_EQ_15_31_THEN_IF_ETC___d280 ;
  assign MUX_cache_data_serverAdapter_writeWithResp$wset_1__VAL_1 =
	     { w_en__h6216 != 64'd0, w_en__h6216 == 64'd0 } ;
  assign MUX_cache_metadata_memory$put_3__VAL_1 =
	     { 2'd2,
	       IF_cache_metadata_serverAdapter_outData_ff_i_n_ETC___d122 } ;
  assign MUX_cache_metadata_memory$put_3__VAL_4 =
	     { (curReq[67:64] == 4'b0) ? 2'd1 : 2'd2, curReq[63:45] } ;
  assign MUX_memReqQ$enq_1__VAL_1 = { 1'b1, x_addr__h4882, x_data__h4883 } ;
  assign MUX_memReqQ$enq_1__VAL_2 =
	     { 1'b0,
	       curReq[63:0],
	       474'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA } ;
  assign MUX_reqStatus$write_1__VAL_2 =
	     (IF_cache_metadata_serverAdapter_outData_ff_i_n_ETC___d116 !=
	      2'd0 &&
	      IF_cache_metadata_serverAdapter_outData_ff_i_n_ETC___d125) ?
	       3'd1 :
	       3'd3 ;

  // inlined wires
  assign cache_metadata_serverAdapter_outData_enqw$whas =
	     (!cache_metadata_serverAdapter_s1[0] ||
	      cache_metadata_serverAdapter_outData_ff$FULL_N) &&
	     cache_metadata_serverAdapter_s1[1] &&
	     cache_metadata_serverAdapter_s1[0] ;
  assign cache_metadata_serverAdapter_cnt_1$whas =
	     (MUX_cache_data_memory$put_1__SEL_1 || EN_putFromProc ||
	      WILL_FIRE_RL_waitFillResp ||
	      WILL_FIRE_RL_clear_bram) &&
	     (!cache_metadata_serverAdapter_writeWithResp$wget[1] ||
	      cache_metadata_serverAdapter_writeWithResp$wget[0]) ;
  assign cache_metadata_serverAdapter_writeWithResp$wget =
	     EN_putFromProc ? 2'd0 : 2'd2 ;
  assign cache_metadata_serverAdapter_writeWithResp$whas =
	     MUX_cache_data_memory$put_1__SEL_1 || EN_putFromProc ||
	     WILL_FIRE_RL_waitFillResp ||
	     WILL_FIRE_RL_clear_bram ;
  assign cache_metadata_serverAdapter_s1_1$wget =
	     { 1'd1,
	       !cache_metadata_serverAdapter_writeWithResp$wget[1] ||
	       cache_metadata_serverAdapter_writeWithResp$wget[0] } ;
  assign cache_data_serverAdapter_outData_enqw$whas =
	     (!cache_data_serverAdapter_s1[0] ||
	      cache_data_serverAdapter_outData_ff$FULL_N) &&
	     cache_data_serverAdapter_s1[1] &&
	     cache_data_serverAdapter_s1[0] ;
  assign cache_data_serverAdapter_cnt_1$whas =
	     (MUX_cache_data_memory$put_1__SEL_1 || EN_putFromProc ||
	      WILL_FIRE_RL_waitFillResp ||
	      WILL_FIRE_RL_clear_bram) &&
	     (!cache_data_serverAdapter_writeWithResp$wget[1] ||
	      cache_data_serverAdapter_writeWithResp$wget[0]) ;
  always@(MUX_cache_data_memory$put_1__SEL_1 or
	  MUX_cache_data_serverAdapter_writeWithResp$wset_1__VAL_1 or
	  EN_putFromProc or
	  MUX_cache_data_serverAdapter_writeWithResp$wset_1__SEL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_cache_data_memory$put_1__SEL_1:
	  cache_data_serverAdapter_writeWithResp$wget =
	      MUX_cache_data_serverAdapter_writeWithResp$wset_1__VAL_1;
      EN_putFromProc: cache_data_serverAdapter_writeWithResp$wget = 2'd1;
      MUX_cache_data_serverAdapter_writeWithResp$wset_1__SEL_3:
	  cache_data_serverAdapter_writeWithResp$wget = 2'd2;
      default: cache_data_serverAdapter_writeWithResp$wget =
		   2'b10 /* unspecified value */ ;
    endcase
  end
  assign cache_data_serverAdapter_writeWithResp$whas =
	     MUX_cache_data_memory$put_1__SEL_1 || EN_putFromProc ||
	     WILL_FIRE_RL_waitFillResp ||
	     WILL_FIRE_RL_clear_bram ;
  assign cache_data_serverAdapter_s1_1$wget =
	     { 1'd1,
	       !cache_data_serverAdapter_writeWithResp$wget[1] ||
	       cache_data_serverAdapter_writeWithResp$wget[0] } ;

  // register cache_data_serverAdapter_cnt
  assign cache_data_serverAdapter_cnt$D_IN =
	     cache_data_serverAdapter_cnt_5_PLUS_IF_cache_d_ETC___d71 ;
  assign cache_data_serverAdapter_cnt$EN =
	     cache_data_serverAdapter_cnt_1$whas || WILL_FIRE_RL_checkMiss ;

  // register cache_data_serverAdapter_s1
  assign cache_data_serverAdapter_s1$D_IN =
	     cache_data_serverAdapter_writeWithResp$whas ?
	       cache_data_serverAdapter_s1_1$wget :
	       2'd0 ;
  assign cache_data_serverAdapter_s1$EN = 1'd1 ;

  // register cache_metadata_serverAdapter_cnt
  assign cache_metadata_serverAdapter_cnt$D_IN =
	     cache_metadata_serverAdapter_cnt_5_PLUS_IF_cac_ETC___d21 ;
  assign cache_metadata_serverAdapter_cnt$EN =
	     cache_metadata_serverAdapter_cnt_1$whas ||
	     WILL_FIRE_RL_checkMiss ;

  // register cache_metadata_serverAdapter_s1
  assign cache_metadata_serverAdapter_s1$D_IN =
	     cache_metadata_serverAdapter_writeWithResp$whas ?
	       cache_metadata_serverAdapter_s1_1$wget :
	       2'd0 ;
  assign cache_metadata_serverAdapter_s1$EN = 1'd1 ;

  // register clear_idx
  assign clear_idx$D_IN = clear_idx + 7'd1 ;
  assign clear_idx$EN = WILL_FIRE_RL_clear_bram && clear_idx != 7'd127 ;

  // register curReq
  assign curReq$D_IN = putFromProc_e ;
  assign curReq$EN = EN_putFromProc ;

  // register reqStatus
  always@(WILL_FIRE_RL_checkMiss or
	  MUX_reqStatus$write_1__VAL_2 or
	  MUX_reqStatus$write_1__SEL_1 or
	  WILL_FIRE_RL_waitFillResp or
	  EN_putFromProc or WILL_FIRE_RL_sendFillReq)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_checkMiss: reqStatus$D_IN = MUX_reqStatus$write_1__VAL_2;
      MUX_reqStatus$write_1__SEL_1 || WILL_FIRE_RL_waitFillResp:
	  reqStatus$D_IN = 3'd1;
      EN_putFromProc: reqStatus$D_IN = 3'd2;
      WILL_FIRE_RL_sendFillReq: reqStatus$D_IN = 3'd4;
      default: reqStatus$D_IN = 3'b010 /* unspecified value */ ;
    endcase
  end
  assign reqStatus$EN =
	     WILL_FIRE_RL_clear_bram && clear_idx == 7'd127 ||
	     WILL_FIRE_RL_checkMiss ||
	     WILL_FIRE_RL_waitFillResp ||
	     EN_putFromProc ||
	     WILL_FIRE_RL_sendFillReq ;

  // submodule cache_data_memory
  always@(MUX_cache_data_memory$put_1__SEL_1 or
	  WILL_FIRE_RL_waitFillResp or
	  curReq or
	  EN_putFromProc or
	  putFromProc_e or WILL_FIRE_RL_clear_bram or clear_idx)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_cache_data_memory$put_1__SEL_1 || WILL_FIRE_RL_waitFillResp:
	  cache_data_memory$ADDR = curReq[44:38];
      EN_putFromProc: cache_data_memory$ADDR = putFromProc_e[44:38];
      WILL_FIRE_RL_clear_bram: cache_data_memory$ADDR = clear_idx;
      default: cache_data_memory$ADDR = 7'b0101010 /* unspecified value */ ;
    endcase
  end
  always@(MUX_cache_data_memory$put_1__SEL_1 or
	  MUX_cache_data_memory$put_3__VAL_1 or
	  EN_putFromProc or
	  WILL_FIRE_RL_clear_bram or
	  WILL_FIRE_RL_waitFillResp or MUX_cache_data_memory$put_3__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_cache_data_memory$put_1__SEL_1:
	  cache_data_memory$DI = MUX_cache_data_memory$put_3__VAL_1;
      EN_putFromProc:
	  cache_data_memory$DI =
	      512'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
      WILL_FIRE_RL_clear_bram: cache_data_memory$DI = 512'd0;
      WILL_FIRE_RL_waitFillResp:
	  cache_data_memory$DI = MUX_cache_data_memory$put_3__VAL_4;
      default: cache_data_memory$DI =
		   512'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  always@(MUX_cache_data_memory$put_1__SEL_1 or
	  w_en__h6216 or
	  EN_putFromProc or
	  WILL_FIRE_RL_clear_bram or WILL_FIRE_RL_waitFillResp)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_cache_data_memory$put_1__SEL_1: cache_data_memory$WE = w_en__h6216;
      EN_putFromProc: cache_data_memory$WE = 64'd0;
      WILL_FIRE_RL_clear_bram || WILL_FIRE_RL_waitFillResp:
	  cache_data_memory$WE = 64'hFFFFFFFFFFFFFFFF;
      default: cache_data_memory$WE =
		   64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign cache_data_memory$EN =
	     WILL_FIRE_RL_checkMiss &&
	     IF_cache_metadata_serverAdapter_outData_ff_i_n_ETC___d116 !=
	     2'd0 &&
	     IF_cache_metadata_serverAdapter_outData_ff_i_n_ETC___d125 &&
	     curReq[67:64] != 4'b0 ||
	     EN_putFromProc ||
	     WILL_FIRE_RL_clear_bram ||
	     WILL_FIRE_RL_waitFillResp ;

  // submodule cache_data_serverAdapter_outData_beforeDeq
  assign cache_data_serverAdapter_outData_beforeDeq$D_IN = 1'd1 ;
  assign cache_data_serverAdapter_outData_beforeDeq$EN =
	     WILL_FIRE_RL_checkMiss ;

  // submodule cache_data_serverAdapter_outData_beforeEnq
  assign cache_data_serverAdapter_outData_beforeEnq$D_IN = 1'd1 ;
  assign cache_data_serverAdapter_outData_beforeEnq$EN =
	     cache_data_serverAdapter_outData_enqw$whas ;

  // submodule cache_data_serverAdapter_outData_ff
  assign cache_data_serverAdapter_outData_ff$D_IN = cache_data_memory$DO ;
  assign cache_data_serverAdapter_outData_ff$ENQ =
	     cache_data_serverAdapter_outData_enqw$whas &&
	     (!WILL_FIRE_RL_checkMiss ||
	      cache_data_serverAdapter_outData_ff$EMPTY_N) ;
  assign cache_data_serverAdapter_outData_ff$DEQ =
	     WILL_FIRE_RL_checkMiss &&
	     cache_data_serverAdapter_outData_ff$EMPTY_N ;
  assign cache_data_serverAdapter_outData_ff$CLR = 1'b0 ;

  // submodule cache_metadata_memory
  always@(MUX_cache_data_memory$put_1__SEL_1 or
	  WILL_FIRE_RL_waitFillResp or
	  curReq or
	  EN_putFromProc or
	  putFromProc_e or WILL_FIRE_RL_clear_bram or clear_idx)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_cache_data_memory$put_1__SEL_1 || WILL_FIRE_RL_waitFillResp:
	  cache_metadata_memory$ADDR = curReq[44:38];
      EN_putFromProc: cache_metadata_memory$ADDR = putFromProc_e[44:38];
      WILL_FIRE_RL_clear_bram: cache_metadata_memory$ADDR = clear_idx;
      default: cache_metadata_memory$ADDR =
		   7'b0101010 /* unspecified value */ ;
    endcase
  end
  always@(MUX_cache_data_memory$put_1__SEL_1 or
	  MUX_cache_metadata_memory$put_3__VAL_1 or
	  EN_putFromProc or
	  WILL_FIRE_RL_clear_bram or
	  WILL_FIRE_RL_waitFillResp or MUX_cache_metadata_memory$put_3__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_cache_data_memory$put_1__SEL_1:
	  cache_metadata_memory$DI = MUX_cache_metadata_memory$put_3__VAL_1;
      EN_putFromProc:
	  cache_metadata_memory$DI =
	      21'b010101010101010101010 /* unspecified value */ ;
      WILL_FIRE_RL_clear_bram: cache_metadata_memory$DI = 21'd0;
      WILL_FIRE_RL_waitFillResp:
	  cache_metadata_memory$DI = MUX_cache_metadata_memory$put_3__VAL_4;
      default: cache_metadata_memory$DI =
		   21'b010101010101010101010 /* unspecified value */ ;
    endcase
  end
  assign cache_metadata_memory$WE = !EN_putFromProc ;
  assign cache_metadata_memory$EN =
	     WILL_FIRE_RL_checkMiss &&
	     IF_cache_metadata_serverAdapter_outData_ff_i_n_ETC___d116 !=
	     2'd0 &&
	     IF_cache_metadata_serverAdapter_outData_ff_i_n_ETC___d125 &&
	     curReq[67:64] != 4'b0 ||
	     EN_putFromProc ||
	     WILL_FIRE_RL_clear_bram ||
	     WILL_FIRE_RL_waitFillResp ;

  // submodule cache_metadata_serverAdapter_outData_beforeDeq
  assign cache_metadata_serverAdapter_outData_beforeDeq$D_IN = 1'd1 ;
  assign cache_metadata_serverAdapter_outData_beforeDeq$EN =
	     WILL_FIRE_RL_checkMiss ;

  // submodule cache_metadata_serverAdapter_outData_beforeEnq
  assign cache_metadata_serverAdapter_outData_beforeEnq$D_IN = 1'd1 ;
  assign cache_metadata_serverAdapter_outData_beforeEnq$EN =
	     cache_metadata_serverAdapter_outData_enqw$whas ;

  // submodule cache_metadata_serverAdapter_outData_ff
  assign cache_metadata_serverAdapter_outData_ff$D_IN =
	     cache_metadata_memory$DO ;
  assign cache_metadata_serverAdapter_outData_ff$ENQ =
	     cache_metadata_serverAdapter_outData_enqw$whas &&
	     (!WILL_FIRE_RL_checkMiss ||
	      cache_metadata_serverAdapter_outData_ff$EMPTY_N) ;
  assign cache_metadata_serverAdapter_outData_ff$DEQ =
	     WILL_FIRE_RL_checkMiss &&
	     cache_metadata_serverAdapter_outData_ff$EMPTY_N ;
  assign cache_metadata_serverAdapter_outData_ff$CLR = 1'b0 ;

  // submodule memReqQ
  assign memReqQ$D_IN =
	     MUX_memReqQ$enq_1__SEL_1 ?
	       MUX_memReqQ$enq_1__VAL_1 :
	       MUX_memReqQ$enq_1__VAL_2 ;
  assign memReqQ$ENQ =
	     WILL_FIRE_RL_checkMiss &&
	     !IF_cache_metadata_serverAdapter_outData_ff_i_n_ETC___d125 &&
	     IF_cache_metadata_serverAdapter_outData_ff_i_n_ETC___d116 ==
	     2'd2 ||
	     WILL_FIRE_RL_sendFillReq ;
  assign memReqQ$DEQ = EN_getToMem ;
  assign memReqQ$CLR = 1'b0 ;

  // submodule memRespQ
  assign memRespQ$D_IN = putFromMem_e ;
  assign memRespQ$ENQ = EN_putFromMem ;
  assign memRespQ$DEQ = WILL_FIRE_RL_waitFillResp ;
  assign memRespQ$CLR = 1'b0 ;

  // submodule respQ
  assign respQ$D_IN =
	     MUX_respQ$enq_1__SEL_1 ?
	       SEL_ARR_IF_cache_data_serverAdapter_outData_ff_ETC___d164 :
	       indexed_word__h7551 ;
  assign respQ$ENQ =
	     WILL_FIRE_RL_checkMiss &&
	     IF_cache_metadata_serverAdapter_outData_ff_i_n_ETC___d116 !=
	     2'd0 &&
	     IF_cache_metadata_serverAdapter_outData_ff_i_n_ETC___d125 ||
	     WILL_FIRE_RL_waitFillResp ;
  assign respQ$DEQ = EN_getToProc ;
  assign respQ$CLR = 1'b0 ;

  // remaining internal signals
  assign IF_NOT_IF_cache_metadata_serverAdapter_outData_ETC___d138 =
	     (IF_cache_metadata_serverAdapter_outData_ff_i_n_ETC___d116 !=
	      2'd0 &&
	      IF_cache_metadata_serverAdapter_outData_ff_i_n_ETC___d125) ?
	       cache_data_serverAdapter_outData_beforeDeq$Q_OUT &&
	       respQ_i_notFull__27_AND_curReq_23_BITS_67_TO_6_ETC___d131 :
	       IF_cache_metadata_serverAdapter_outData_ff_i_n_ETC___d116 !=
	       2'd2 ||
	       cache_data_serverAdapter_outData_beforeDeq$Q_OUT &&
	       memReqQ$FULL_N ;
  assign IF_cache_metadata_serverAdapter_outData_ff_i_n_ETC___d116 =
	     cache_metadata_serverAdapter_outData_ff$EMPTY_N ?
	       cache_metadata_serverAdapter_outData_ff$D_OUT[20:19] :
	       cache_metadata_memory$DO[20:19] ;
  assign IF_cache_metadata_serverAdapter_outData_ff_i_n_ETC___d122 =
	     cache_metadata_serverAdapter_outData_ff$EMPTY_N ?
	       cache_metadata_serverAdapter_outData_ff$D_OUT[18:0] :
	       cache_metadata_memory$DO[18:0] ;
  assign IF_cache_metadata_serverAdapter_outData_ff_i_n_ETC___d125 =
	     IF_cache_metadata_serverAdapter_outData_ff_i_n_ETC___d122 ==
	     curReq[63:45] ;
  assign IF_curReq_23_BITS_37_TO_34_63_EQ_15_31_THEN_IF_ETC___d250 =
	     { (curReq[37:34] == 4'd15) ? n__h9122 : memRespQ$D_OUT[511:480],
	       (curReq[37:34] == 4'd14) ? n__h9122 : memRespQ$D_OUT[479:448],
	       (curReq[37:34] == 4'd13) ? n__h9122 : memRespQ$D_OUT[447:416],
	       (curReq[37:34] == 4'd12) ?
		 n__h9122 :
		 memRespQ$D_OUT[415:384] } ;
  assign IF_curReq_23_BITS_37_TO_34_63_EQ_15_31_THEN_IF_ETC___d255 =
	     { IF_curReq_23_BITS_37_TO_34_63_EQ_15_31_THEN_IF_ETC___d250,
	       (curReq[37:34] == 4'd11) ? n__h9122 : memRespQ$D_OUT[383:352],
	       (curReq[37:34] == 4'd10) ?
		 n__h9122 :
		 memRespQ$D_OUT[351:320] } ;
  assign IF_curReq_23_BITS_37_TO_34_63_EQ_15_31_THEN_IF_ETC___d260 =
	     { IF_curReq_23_BITS_37_TO_34_63_EQ_15_31_THEN_IF_ETC___d255,
	       (curReq[37:34] == 4'd9) ? n__h9122 : memRespQ$D_OUT[319:288],
	       (curReq[37:34] == 4'd8) ?
		 n__h9122 :
		 memRespQ$D_OUT[287:256] } ;
  assign IF_curReq_23_BITS_37_TO_34_63_EQ_15_31_THEN_IF_ETC___d265 =
	     { IF_curReq_23_BITS_37_TO_34_63_EQ_15_31_THEN_IF_ETC___d260,
	       (curReq[37:34] == 4'd7) ? n__h9122 : memRespQ$D_OUT[255:224],
	       (curReq[37:34] == 4'd6) ?
		 n__h9122 :
		 memRespQ$D_OUT[223:192] } ;
  assign IF_curReq_23_BITS_37_TO_34_63_EQ_15_31_THEN_IF_ETC___d270 =
	     { IF_curReq_23_BITS_37_TO_34_63_EQ_15_31_THEN_IF_ETC___d265,
	       (curReq[37:34] == 4'd5) ? n__h9122 : memRespQ$D_OUT[191:160],
	       (curReq[37:34] == 4'd4) ?
		 n__h9122 :
		 memRespQ$D_OUT[159:128] } ;
  assign IF_curReq_23_BITS_37_TO_34_63_EQ_15_31_THEN_IF_ETC___d275 =
	     { IF_curReq_23_BITS_37_TO_34_63_EQ_15_31_THEN_IF_ETC___d270,
	       (curReq[37:34] == 4'd3) ? n__h9122 : memRespQ$D_OUT[127:96],
	       (curReq[37:34] == 4'd2) ? n__h9122 : memRespQ$D_OUT[95:64] } ;
  assign IF_curReq_23_BITS_37_TO_34_63_EQ_15_31_THEN_IF_ETC___d280 =
	     { IF_curReq_23_BITS_37_TO_34_63_EQ_15_31_THEN_IF_ETC___d275,
	       (curReq[37:34] == 4'd1) ? n__h9122 : memRespQ$D_OUT[63:32],
	       (curReq[37:34] == 4'd0) ? n__h9122 : memRespQ$D_OUT[31:0] } ;
  assign cache_data_serverAdapter_cnt_5_PLUS_IF_cache_d_ETC___d71 =
	     cache_data_serverAdapter_cnt +
	     (cache_data_serverAdapter_cnt_1$whas ? 3'd1 : 3'd0) +
	     (WILL_FIRE_RL_checkMiss ? 3'd7 : 3'd0) ;
  assign cache_data_serverAdapter_cnt_5_SLT_3___d100 =
	     (cache_data_serverAdapter_cnt ^ 3'h4) < 3'd7 ;
  assign cache_metadata_serverAdapter_cnt_5_PLUS_IF_cac_ETC___d21 =
	     cache_metadata_serverAdapter_cnt +
	     (cache_metadata_serverAdapter_cnt_1$whas ? 3'd1 : 3'd0) +
	     (WILL_FIRE_RL_checkMiss ? 3'd7 : 3'd0) ;
  assign cache_metadata_serverAdapter_cnt_5_SLT_3___d99 =
	     (cache_metadata_serverAdapter_cnt ^ 3'h4) < 3'd7 ;
  assign cache_metadata_serverAdapter_outData_beforeDeq_ETC___d140 =
	     cache_metadata_serverAdapter_outData_beforeDeq$Q_OUT &&
	     (cache_metadata_serverAdapter_outData_ff$EMPTY_N ||
	      cache_metadata_serverAdapter_outData_enqw$whas) &&
	     (cache_data_serverAdapter_outData_ff$EMPTY_N ||
	      cache_data_serverAdapter_outData_enqw$whas) &&
	     IF_NOT_IF_cache_metadata_serverAdapter_outData_ETC___d138 ;
  assign n__h9122 =
	     { curReq[67] ? curReq[31:24] : indexed_word__h7551[31:24],
	       curReq[66] ? curReq[23:16] : indexed_word__h7551[23:16],
	       curReq[65] ? curReq[15:8] : indexed_word__h7551[15:8],
	       curReq[64] ? curReq[7:0] : indexed_word__h7551[7:0] } ;
  assign respQ_i_notFull__27_AND_curReq_23_BITS_67_TO_6_ETC___d131 =
	     respQ$FULL_N &&
	     (curReq[67:64] == 4'b0 ||
	      cache_metadata_serverAdapter_cnt_5_SLT_3___d99 &&
	      cache_data_serverAdapter_cnt_5_SLT_3___d100) ;
  assign w_en__h6216 = { 60'd0, curReq[67:64] } << x__h6303 ;
  assign x__h6303 = { curReq[37:34], 2'b0 } ;
  assign x__h6325 =
	     { curReq[67] ?
		 curReq[31:24] :
		 SEL_ARR_IF_cache_data_serverAdapter_outData_ff_ETC___d164[31:24],
	       curReq[66] ?
		 curReq[23:16] :
		 SEL_ARR_IF_cache_data_serverAdapter_outData_ff_ETC___d164[23:16],
	       curReq[65] ?
		 curReq[15:8] :
		 SEL_ARR_IF_cache_data_serverAdapter_outData_ff_ETC___d164[15:8],
	       curReq[64] ?
		 curReq[7:0] :
		 SEL_ARR_IF_cache_data_serverAdapter_outData_ff_ETC___d164[7:0] } ;
  assign x__h7354 = { curReq[37:34], 5'b0 } ;
  assign x_addr__h4882 =
	     { IF_cache_metadata_serverAdapter_outData_ff_i_n_ETC___d122,
	       curReq[44:38] } ;
  assign x_data__h4883 =
	     cache_data_serverAdapter_outData_ff$EMPTY_N ?
	       cache_data_serverAdapter_outData_ff$D_OUT :
	       cache_data_memory$DO ;
  always@(curReq or memRespQ$D_OUT)
  begin
    case (curReq[37:34])
      4'd0: indexed_word__h7551 = memRespQ$D_OUT[31:0];
      4'd1: indexed_word__h7551 = memRespQ$D_OUT[63:32];
      4'd2: indexed_word__h7551 = memRespQ$D_OUT[95:64];
      4'd3: indexed_word__h7551 = memRespQ$D_OUT[127:96];
      4'd4: indexed_word__h7551 = memRespQ$D_OUT[159:128];
      4'd5: indexed_word__h7551 = memRespQ$D_OUT[191:160];
      4'd6: indexed_word__h7551 = memRespQ$D_OUT[223:192];
      4'd7: indexed_word__h7551 = memRespQ$D_OUT[255:224];
      4'd8: indexed_word__h7551 = memRespQ$D_OUT[287:256];
      4'd9: indexed_word__h7551 = memRespQ$D_OUT[319:288];
      4'd10: indexed_word__h7551 = memRespQ$D_OUT[351:320];
      4'd11: indexed_word__h7551 = memRespQ$D_OUT[383:352];
      4'd12: indexed_word__h7551 = memRespQ$D_OUT[415:384];
      4'd13: indexed_word__h7551 = memRespQ$D_OUT[447:416];
      4'd14: indexed_word__h7551 = memRespQ$D_OUT[479:448];
      4'd15: indexed_word__h7551 = memRespQ$D_OUT[511:480];
    endcase
  end
  always@(curReq or x_data__h4883)
  begin
    case (curReq[37:34])
      4'd0:
	  SEL_ARR_IF_cache_data_serverAdapter_outData_ff_ETC___d164 =
	      x_data__h4883[31:0];
      4'd1:
	  SEL_ARR_IF_cache_data_serverAdapter_outData_ff_ETC___d164 =
	      x_data__h4883[63:32];
      4'd2:
	  SEL_ARR_IF_cache_data_serverAdapter_outData_ff_ETC___d164 =
	      x_data__h4883[95:64];
      4'd3:
	  SEL_ARR_IF_cache_data_serverAdapter_outData_ff_ETC___d164 =
	      x_data__h4883[127:96];
      4'd4:
	  SEL_ARR_IF_cache_data_serverAdapter_outData_ff_ETC___d164 =
	      x_data__h4883[159:128];
      4'd5:
	  SEL_ARR_IF_cache_data_serverAdapter_outData_ff_ETC___d164 =
	      x_data__h4883[191:160];
      4'd6:
	  SEL_ARR_IF_cache_data_serverAdapter_outData_ff_ETC___d164 =
	      x_data__h4883[223:192];
      4'd7:
	  SEL_ARR_IF_cache_data_serverAdapter_outData_ff_ETC___d164 =
	      x_data__h4883[255:224];
      4'd8:
	  SEL_ARR_IF_cache_data_serverAdapter_outData_ff_ETC___d164 =
	      x_data__h4883[287:256];
      4'd9:
	  SEL_ARR_IF_cache_data_serverAdapter_outData_ff_ETC___d164 =
	      x_data__h4883[319:288];
      4'd10:
	  SEL_ARR_IF_cache_data_serverAdapter_outData_ff_ETC___d164 =
	      x_data__h4883[351:320];
      4'd11:
	  SEL_ARR_IF_cache_data_serverAdapter_outData_ff_ETC___d164 =
	      x_data__h4883[383:352];
      4'd12:
	  SEL_ARR_IF_cache_data_serverAdapter_outData_ff_ETC___d164 =
	      x_data__h4883[415:384];
      4'd13:
	  SEL_ARR_IF_cache_data_serverAdapter_outData_ff_ETC___d164 =
	      x_data__h4883[447:416];
      4'd14:
	  SEL_ARR_IF_cache_data_serverAdapter_outData_ff_ETC___d164 =
	      x_data__h4883[479:448];
      4'd15:
	  SEL_ARR_IF_cache_data_serverAdapter_outData_ff_ETC___d164 =
	      x_data__h4883[511:480];
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        cache_data_serverAdapter_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_data_serverAdapter_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	cache_metadata_serverAdapter_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_metadata_serverAdapter_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	clear_idx <= `BSV_ASSIGNMENT_DELAY 7'd0;
	curReq <= `BSV_ASSIGNMENT_DELAY 68'd0;
	reqStatus <= `BSV_ASSIGNMENT_DELAY 3'd0;
      end
    else
      begin
        if (cache_data_serverAdapter_cnt$EN)
	  cache_data_serverAdapter_cnt <= `BSV_ASSIGNMENT_DELAY
	      cache_data_serverAdapter_cnt$D_IN;
	if (cache_data_serverAdapter_s1$EN)
	  cache_data_serverAdapter_s1 <= `BSV_ASSIGNMENT_DELAY
	      cache_data_serverAdapter_s1$D_IN;
	if (cache_metadata_serverAdapter_cnt$EN)
	  cache_metadata_serverAdapter_cnt <= `BSV_ASSIGNMENT_DELAY
	      cache_metadata_serverAdapter_cnt$D_IN;
	if (cache_metadata_serverAdapter_s1$EN)
	  cache_metadata_serverAdapter_s1 <= `BSV_ASSIGNMENT_DELAY
	      cache_metadata_serverAdapter_s1$D_IN;
	if (clear_idx$EN) clear_idx <= `BSV_ASSIGNMENT_DELAY clear_idx$D_IN;
	if (curReq$EN) curReq <= `BSV_ASSIGNMENT_DELAY curReq$D_IN;
	if (reqStatus$EN) reqStatus <= `BSV_ASSIGNMENT_DELAY reqStatus$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    cache_data_serverAdapter_cnt = 3'h2;
    cache_data_serverAdapter_s1 = 2'h2;
    cache_metadata_serverAdapter_cnt = 3'h2;
    cache_metadata_serverAdapter_s1 = 2'h2;
    clear_idx = 7'h2A;
    curReq = 68'hAAAAAAAAAAAAAAAAA;
    reqStatus = 3'h2;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (cache_metadata_serverAdapter_s1[1] &&
	  (!cache_metadata_serverAdapter_outData_beforeEnq$Q_OUT ||
	   !cache_metadata_serverAdapter_outData_beforeDeq$Q_OUT ||
	   !cache_metadata_serverAdapter_outData_ff$FULL_N))
	$display("ERROR: %m: mkBRAMAdapter overrun");
    if (RST_N != `BSV_RESET_VALUE)
      if (cache_data_serverAdapter_s1[1] &&
	  (!cache_data_serverAdapter_outData_beforeEnq$Q_OUT ||
	   !cache_data_serverAdapter_outData_beforeDeq$Q_OUT ||
	   !cache_data_serverAdapter_outData_ff$FULL_N))
	$display("ERROR: %m: mkBRAMAdapter overrun");
  end
  // synopsys translate_on
endmodule  // mkCache32

