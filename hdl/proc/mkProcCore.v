//
// Generated by Bluespec Compiler, version 2023.07 (build 0eb551d)
//
// On Thu Jul  4 08:48:23 EDT 2024
//
//
// Ports:
// Name                         I/O  size props
// getMReq                        O   539 reg
// RDY_getMReq                    O     1 reg
// RDY_putMResp                   O     1 reg
// getMMIOReq                     O    68 reg
// RDY_getMMIOReq                 O     1 reg
// RDY_putMMIOResp                O     1 reg
// debug_pc                       O    32
// RDY_getPC                      O     1 const
// debug_epoch                    O     1 reg
// RDY_getEpoch                   O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// putMResp_data                  I   512 reg
// putMMIOResp_data               I    68 reg
// EN_putMResp                    I     1
// EN_putMMIOResp                 I     1
// EN_getMReq                     I     1
// EN_getMMIOReq                  I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkProcCore(CLK,
		  RST_N,

		  EN_getMReq,
		  getMReq,
		  RDY_getMReq,

		  putMResp_data,
		  EN_putMResp,
		  RDY_putMResp,

		  EN_getMMIOReq,
		  getMMIOReq,
		  RDY_getMMIOReq,

		  putMMIOResp_data,
		  EN_putMMIOResp,
		  RDY_putMMIOResp,

		  debug_pc,
		  RDY_getPC,

		  debug_epoch,
		  RDY_getEpoch);
  input  CLK;
  input  RST_N;

  // actionvalue method getMReq
  input  EN_getMReq;
  output [538 : 0] getMReq;
  output RDY_getMReq;

  // action method putMResp
  input  [511 : 0] putMResp_data;
  input  EN_putMResp;
  output RDY_putMResp;

  // actionvalue method getMMIOReq
  input  EN_getMMIOReq;
  output [67 : 0] getMMIOReq;
  output RDY_getMMIOReq;

  // action method putMMIOResp
  input  [67 : 0] putMMIOResp_data;
  input  EN_putMMIOResp;
  output RDY_putMMIOResp;

  // value method getPC
  output [31 : 0] debug_pc;
  output RDY_getPC;

  // value method getEpoch
  output debug_epoch;
  output RDY_getEpoch;

  // signals for module outputs
  wire [538 : 0] getMReq;
  wire [67 : 0] getMMIOReq;
  wire [31 : 0] debug_pc;
  wire RDY_getEpoch,
       RDY_getMMIOReq,
       RDY_getMReq,
       RDY_getPC,
       RDY_putMMIOResp,
       RDY_putMResp,
       debug_epoch;

  // register dreq
  reg [67 : 0] dreq;
  wire [67 : 0] dreq$D_IN;
  wire dreq$EN;

  // register ireq
  reg [67 : 0] ireq;
  wire [67 : 0] ireq$D_IN;
  wire ireq$EN;

  // ports of submodule cache
  wire [538 : 0] cache$getMemReq;
  wire [511 : 0] cache$putMemResp_resp;
  wire [67 : 0] cache$sendReqData_req, cache$sendReqInstr_req;
  wire [31 : 0] cache$getRespData, cache$getRespInstr;
  wire cache$EN_getMemReq,
       cache$EN_getRespData,
       cache$EN_getRespInstr,
       cache$EN_putMemResp,
       cache$EN_sendReqData,
       cache$EN_sendReqInstr,
       cache$RDY_getMemReq,
       cache$RDY_getRespData,
       cache$RDY_getRespInstr,
       cache$RDY_putMemResp,
       cache$RDY_sendReqData,
       cache$RDY_sendReqInstr;

  // ports of submodule mainMemReqQ
  wire [538 : 0] mainMemReqQ$D_IN, mainMemReqQ$D_OUT;
  wire mainMemReqQ$CLR,
       mainMemReqQ$DEQ,
       mainMemReqQ$EMPTY_N,
       mainMemReqQ$ENQ,
       mainMemReqQ$FULL_N;

  // ports of submodule mainMemRespQ
  wire [511 : 0] mainMemRespQ$D_IN, mainMemRespQ$D_OUT;
  wire mainMemRespQ$CLR,
       mainMemRespQ$DEQ,
       mainMemRespQ$EMPTY_N,
       mainMemRespQ$ENQ,
       mainMemRespQ$FULL_N;

  // ports of submodule mmioReqQ
  wire [67 : 0] mmioReqQ$D_IN, mmioReqQ$D_OUT;
  wire mmioReqQ$CLR,
       mmioReqQ$DEQ,
       mmioReqQ$EMPTY_N,
       mmioReqQ$ENQ,
       mmioReqQ$FULL_N;

  // ports of submodule mmioRespQ
  wire [67 : 0] mmioRespQ$D_IN, mmioRespQ$D_OUT;
  wire mmioRespQ$CLR,
       mmioRespQ$DEQ,
       mmioRespQ$EMPTY_N,
       mmioRespQ$ENQ,
       mmioRespQ$FULL_N;

  // ports of submodule rv_core
  wire [67 : 0] rv_core$getDReq,
		rv_core$getDResp_a,
		rv_core$getIReq,
		rv_core$getIResp_a,
		rv_core$getMMIOReq,
		rv_core$getMMIOResp_a;
  wire [31 : 0] rv_core$getPC;
  wire rv_core$EN_getDReq,
       rv_core$EN_getDResp,
       rv_core$EN_getIReq,
       rv_core$EN_getIResp,
       rv_core$EN_getMMIOReq,
       rv_core$EN_getMMIOResp,
       rv_core$RDY_getDReq,
       rv_core$RDY_getDResp,
       rv_core$RDY_getIReq,
       rv_core$RDY_getIResp,
       rv_core$RDY_getMMIOReq,
       rv_core$RDY_getMMIOResp,
       rv_core$getEpoch;

  // actionvalue method getMReq
  assign getMReq = mainMemReqQ$D_OUT ;
  assign RDY_getMReq = mainMemReqQ$EMPTY_N ;

  // action method putMResp
  assign RDY_putMResp = mainMemRespQ$FULL_N ;

  // actionvalue method getMMIOReq
  assign getMMIOReq = mmioReqQ$D_OUT ;
  assign RDY_getMMIOReq = mmioReqQ$EMPTY_N ;

  // action method putMMIOResp
  assign RDY_putMMIOResp = mmioRespQ$FULL_N ;

  // value method getPC
  assign debug_pc = rv_core$getPC ;
  assign RDY_getPC = 1'd1 ;

  // value method getEpoch
  assign debug_epoch = rv_core$getEpoch ;
  assign RDY_getEpoch = 1'd1 ;

  // submodule cache
  mkCacheUnified cache(.CLK(CLK),
		       .RST_N(RST_N),
		       .putMemResp_resp(cache$putMemResp_resp),
		       .sendReqData_req(cache$sendReqData_req),
		       .sendReqInstr_req(cache$sendReqInstr_req),
		       .EN_putMemResp(cache$EN_putMemResp),
		       .EN_getMemReq(cache$EN_getMemReq),
		       .EN_sendReqData(cache$EN_sendReqData),
		       .EN_getRespData(cache$EN_getRespData),
		       .EN_sendReqInstr(cache$EN_sendReqInstr),
		       .EN_getRespInstr(cache$EN_getRespInstr),
		       .RDY_putMemResp(cache$RDY_putMemResp),
		       .getMemReq(cache$getMemReq),
		       .RDY_getMemReq(cache$RDY_getMemReq),
		       .RDY_sendReqData(cache$RDY_sendReqData),
		       .getRespData(cache$getRespData),
		       .RDY_getRespData(cache$RDY_getRespData),
		       .RDY_sendReqInstr(cache$RDY_sendReqInstr),
		       .getRespInstr(cache$getRespInstr),
		       .RDY_getRespInstr(cache$RDY_getRespInstr));

  // submodule mainMemReqQ
  FIFO2 #(.width(32'd539), .guarded(1'd1)) mainMemReqQ(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(mainMemReqQ$D_IN),
						       .ENQ(mainMemReqQ$ENQ),
						       .DEQ(mainMemReqQ$DEQ),
						       .CLR(mainMemReqQ$CLR),
						       .D_OUT(mainMemReqQ$D_OUT),
						       .FULL_N(mainMemReqQ$FULL_N),
						       .EMPTY_N(mainMemReqQ$EMPTY_N));

  // submodule mainMemRespQ
  FIFO2 #(.width(32'd512), .guarded(1'd1)) mainMemRespQ(.RST(RST_N),
							.CLK(CLK),
							.D_IN(mainMemRespQ$D_IN),
							.ENQ(mainMemRespQ$ENQ),
							.DEQ(mainMemRespQ$DEQ),
							.CLR(mainMemRespQ$CLR),
							.D_OUT(mainMemRespQ$D_OUT),
							.FULL_N(mainMemRespQ$FULL_N),
							.EMPTY_N(mainMemRespQ$EMPTY_N));

  // submodule mmioReqQ
  FIFO2 #(.width(32'd68), .guarded(1'd1)) mmioReqQ(.RST(RST_N),
						   .CLK(CLK),
						   .D_IN(mmioReqQ$D_IN),
						   .ENQ(mmioReqQ$ENQ),
						   .DEQ(mmioReqQ$DEQ),
						   .CLR(mmioReqQ$CLR),
						   .D_OUT(mmioReqQ$D_OUT),
						   .FULL_N(mmioReqQ$FULL_N),
						   .EMPTY_N(mmioReqQ$EMPTY_N));

  // submodule mmioRespQ
  FIFO2 #(.width(32'd68), .guarded(1'd1)) mmioRespQ(.RST(RST_N),
						    .CLK(CLK),
						    .D_IN(mmioRespQ$D_IN),
						    .ENQ(mmioRespQ$ENQ),
						    .DEQ(mmioRespQ$DEQ),
						    .CLR(mmioRespQ$CLR),
						    .D_OUT(mmioRespQ$D_OUT),
						    .FULL_N(mmioRespQ$FULL_N),
						    .EMPTY_N(mmioRespQ$EMPTY_N));

  // submodule rv_core
  mkpipelined rv_core(.CLK(CLK),
		      .RST_N(RST_N),
		      .getDResp_a(rv_core$getDResp_a),
		      .getIResp_a(rv_core$getIResp_a),
		      .getMMIOResp_a(rv_core$getMMIOResp_a),
		      .EN_getIReq(rv_core$EN_getIReq),
		      .EN_getIResp(rv_core$EN_getIResp),
		      .EN_getDReq(rv_core$EN_getDReq),
		      .EN_getDResp(rv_core$EN_getDResp),
		      .EN_getMMIOReq(rv_core$EN_getMMIOReq),
		      .EN_getMMIOResp(rv_core$EN_getMMIOResp),
		      .getIReq(rv_core$getIReq),
		      .RDY_getIReq(rv_core$RDY_getIReq),
		      .RDY_getIResp(rv_core$RDY_getIResp),
		      .getDReq(rv_core$getDReq),
		      .RDY_getDReq(rv_core$RDY_getDReq),
		      .RDY_getDResp(rv_core$RDY_getDResp),
		      .getMMIOReq(rv_core$getMMIOReq),
		      .RDY_getMMIOReq(rv_core$RDY_getMMIOReq),
		      .RDY_getMMIOResp(rv_core$RDY_getMMIOResp),
		      .getPC(rv_core$getPC),
		      .RDY_getPC(),
		      .getEpoch(rv_core$getEpoch),
		      .RDY_getEpoch());

  // register dreq
  assign dreq$D_IN = rv_core$getDReq ;
  assign dreq$EN = rv_core$RDY_getDReq && cache$RDY_sendReqData ;

  // register ireq
  assign ireq$D_IN = rv_core$getIReq ;
  assign ireq$EN = rv_core$RDY_getIReq && cache$RDY_sendReqInstr ;

  // submodule cache
  assign cache$putMemResp_resp = mainMemRespQ$D_OUT ;
  assign cache$sendReqData_req = rv_core$getDReq ;
  assign cache$sendReqInstr_req = rv_core$getIReq ;
  assign cache$EN_putMemResp = cache$RDY_putMemResp && mainMemRespQ$EMPTY_N ;
  assign cache$EN_getMemReq = cache$RDY_getMemReq && mainMemReqQ$FULL_N ;
  assign cache$EN_sendReqData = rv_core$RDY_getDReq && cache$RDY_sendReqData ;
  assign cache$EN_getRespData =
	     rv_core$RDY_getDResp && cache$RDY_getRespData ;
  assign cache$EN_sendReqInstr =
	     rv_core$RDY_getIReq && cache$RDY_sendReqInstr ;
  assign cache$EN_getRespInstr =
	     rv_core$RDY_getIResp && cache$RDY_getRespInstr ;

  // submodule mainMemReqQ
  assign mainMemReqQ$D_IN = cache$getMemReq ;
  assign mainMemReqQ$ENQ = cache$RDY_getMemReq && mainMemReqQ$FULL_N ;
  assign mainMemReqQ$DEQ = EN_getMReq ;
  assign mainMemReqQ$CLR = 1'b0 ;

  // submodule mainMemRespQ
  assign mainMemRespQ$D_IN = putMResp_data ;
  assign mainMemRespQ$ENQ = EN_putMResp ;
  assign mainMemRespQ$DEQ = cache$RDY_putMemResp && mainMemRespQ$EMPTY_N ;
  assign mainMemRespQ$CLR = 1'b0 ;

  // submodule mmioReqQ
  assign mmioReqQ$D_IN = rv_core$getMMIOReq ;
  assign mmioReqQ$ENQ = rv_core$RDY_getMMIOReq && mmioReqQ$FULL_N ;
  assign mmioReqQ$DEQ = EN_getMMIOReq ;
  assign mmioReqQ$CLR = 1'b0 ;

  // submodule mmioRespQ
  assign mmioRespQ$D_IN = putMMIOResp_data ;
  assign mmioRespQ$ENQ = EN_putMMIOResp ;
  assign mmioRespQ$DEQ = rv_core$RDY_getMMIOResp && mmioRespQ$EMPTY_N ;
  assign mmioRespQ$CLR = 1'b0 ;

  // submodule rv_core
  assign rv_core$getDResp_a = { dreq[67:32], cache$getRespData } ;
  assign rv_core$getIResp_a = { ireq[67:32], cache$getRespInstr } ;
  assign rv_core$getMMIOResp_a = mmioRespQ$D_OUT ;
  assign rv_core$EN_getIReq = rv_core$RDY_getIReq && cache$RDY_sendReqInstr ;
  assign rv_core$EN_getIResp =
	     rv_core$RDY_getIResp && cache$RDY_getRespInstr ;
  assign rv_core$EN_getDReq = rv_core$RDY_getDReq && cache$RDY_sendReqData ;
  assign rv_core$EN_getDResp = rv_core$RDY_getDResp && cache$RDY_getRespData ;
  assign rv_core$EN_getMMIOReq = rv_core$RDY_getMMIOReq && mmioReqQ$FULL_N ;
  assign rv_core$EN_getMMIOResp =
	     rv_core$RDY_getMMIOResp && mmioRespQ$EMPTY_N ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (dreq$EN) dreq <= `BSV_ASSIGNMENT_DELAY dreq$D_IN;
    if (ireq$EN) ireq <= `BSV_ASSIGNMENT_DELAY ireq$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    dreq = 68'hAAAAAAAAAAAAAAAAA;
    ireq = 68'hAAAAAAAAAAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkProcCore

