//
// Generated by Bluespec Compiler, version 2023.07 (build 0eb551d)
//
// On Tue Jul  2 10:55:55 EDT 2024
//
//
// Ports:
// Name                         I/O  size props
// search1                        O     1
// RDY_search1                    O     1 const
// search2                        O     1
// RDY_search2                    O     1 const
// RDY_insert                     O     1 const
// RDY_remove1                    O     1 const
// RDY_remove2                    O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// search1_src                    I     5
// search2_src                    I     5
// insert_dst                     I     5
// remove1_dst                    I     5
// remove2_dst                    I     5
// EN_insert                      I     1
// EN_remove1                     I     1
// EN_remove2                     I     1
//
// Combinational paths from inputs to outputs:
//   search1_src -> search1
//   search2_src -> search2
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkBitScoreboard(CLK,
		       RST_N,

		       search1_src,
		       search1,
		       RDY_search1,

		       search2_src,
		       search2,
		       RDY_search2,

		       insert_dst,
		       EN_insert,
		       RDY_insert,

		       remove1_dst,
		       EN_remove1,
		       RDY_remove1,

		       remove2_dst,
		       EN_remove2,
		       RDY_remove2);
  input  CLK;
  input  RST_N;

  // value method search1
  input  [4 : 0] search1_src;
  output search1;
  output RDY_search1;

  // value method search2
  input  [4 : 0] search2_src;
  output search2;
  output RDY_search2;

  // action method insert
  input  [4 : 0] insert_dst;
  input  EN_insert;
  output RDY_insert;

  // action method remove1
  input  [4 : 0] remove1_dst;
  input  EN_remove1;
  output RDY_remove1;

  // action method remove2
  input  [4 : 0] remove2_dst;
  input  EN_remove2;
  output RDY_remove2;

  // signals for module outputs
  reg search1, search2;
  wire RDY_insert, RDY_remove1, RDY_remove2, RDY_search1, RDY_search2;

  // register board_0
  reg board_0;
  wire board_0$D_IN, board_0$EN;

  // register board_1
  reg board_1;
  wire board_1$D_IN, board_1$EN;

  // register board_10
  reg board_10;
  wire board_10$D_IN, board_10$EN;

  // register board_11
  reg board_11;
  wire board_11$D_IN, board_11$EN;

  // register board_12
  reg board_12;
  wire board_12$D_IN, board_12$EN;

  // register board_13
  reg board_13;
  wire board_13$D_IN, board_13$EN;

  // register board_14
  reg board_14;
  wire board_14$D_IN, board_14$EN;

  // register board_15
  reg board_15;
  wire board_15$D_IN, board_15$EN;

  // register board_16
  reg board_16;
  wire board_16$D_IN, board_16$EN;

  // register board_17
  reg board_17;
  wire board_17$D_IN, board_17$EN;

  // register board_18
  reg board_18;
  wire board_18$D_IN, board_18$EN;

  // register board_19
  reg board_19;
  wire board_19$D_IN, board_19$EN;

  // register board_2
  reg board_2;
  wire board_2$D_IN, board_2$EN;

  // register board_20
  reg board_20;
  wire board_20$D_IN, board_20$EN;

  // register board_21
  reg board_21;
  wire board_21$D_IN, board_21$EN;

  // register board_22
  reg board_22;
  wire board_22$D_IN, board_22$EN;

  // register board_23
  reg board_23;
  wire board_23$D_IN, board_23$EN;

  // register board_24
  reg board_24;
  wire board_24$D_IN, board_24$EN;

  // register board_25
  reg board_25;
  wire board_25$D_IN, board_25$EN;

  // register board_26
  reg board_26;
  wire board_26$D_IN, board_26$EN;

  // register board_27
  reg board_27;
  wire board_27$D_IN, board_27$EN;

  // register board_28
  reg board_28;
  wire board_28$D_IN, board_28$EN;

  // register board_29
  reg board_29;
  wire board_29$D_IN, board_29$EN;

  // register board_3
  reg board_3;
  wire board_3$D_IN, board_3$EN;

  // register board_30
  reg board_30;
  wire board_30$D_IN, board_30$EN;

  // register board_31
  reg board_31;
  wire board_31$D_IN, board_31$EN;

  // register board_4
  reg board_4;
  wire board_4$D_IN, board_4$EN;

  // register board_5
  reg board_5;
  wire board_5$D_IN, board_5$EN;

  // register board_6
  reg board_6;
  wire board_6$D_IN, board_6$EN;

  // register board_7
  reg board_7;
  wire board_7$D_IN, board_7$EN;

  // register board_8
  reg board_8;
  wire board_8$D_IN, board_8$EN;

  // register board_9
  reg board_9;
  wire board_9$D_IN, board_9$EN;

  // inputs to muxes for submodule ports
  wire MUX_board_1$write_1__SEL_1,
       MUX_board_1$write_1__SEL_2,
       MUX_board_10$write_1__SEL_1,
       MUX_board_10$write_1__SEL_2,
       MUX_board_11$write_1__SEL_1,
       MUX_board_11$write_1__SEL_2,
       MUX_board_12$write_1__SEL_1,
       MUX_board_12$write_1__SEL_2,
       MUX_board_13$write_1__SEL_1,
       MUX_board_13$write_1__SEL_2,
       MUX_board_14$write_1__SEL_1,
       MUX_board_14$write_1__SEL_2,
       MUX_board_15$write_1__SEL_1,
       MUX_board_15$write_1__SEL_2,
       MUX_board_16$write_1__SEL_1,
       MUX_board_16$write_1__SEL_2,
       MUX_board_17$write_1__SEL_1,
       MUX_board_17$write_1__SEL_2,
       MUX_board_18$write_1__SEL_1,
       MUX_board_18$write_1__SEL_2,
       MUX_board_19$write_1__SEL_1,
       MUX_board_19$write_1__SEL_2,
       MUX_board_2$write_1__SEL_1,
       MUX_board_2$write_1__SEL_2,
       MUX_board_20$write_1__SEL_1,
       MUX_board_20$write_1__SEL_2,
       MUX_board_21$write_1__SEL_1,
       MUX_board_21$write_1__SEL_2,
       MUX_board_22$write_1__SEL_1,
       MUX_board_22$write_1__SEL_2,
       MUX_board_23$write_1__SEL_1,
       MUX_board_23$write_1__SEL_2,
       MUX_board_24$write_1__SEL_1,
       MUX_board_24$write_1__SEL_2,
       MUX_board_25$write_1__SEL_1,
       MUX_board_25$write_1__SEL_2,
       MUX_board_26$write_1__SEL_1,
       MUX_board_26$write_1__SEL_2,
       MUX_board_27$write_1__SEL_1,
       MUX_board_27$write_1__SEL_2,
       MUX_board_28$write_1__SEL_1,
       MUX_board_28$write_1__SEL_2,
       MUX_board_29$write_1__SEL_1,
       MUX_board_29$write_1__SEL_2,
       MUX_board_3$write_1__SEL_1,
       MUX_board_3$write_1__SEL_2,
       MUX_board_30$write_1__SEL_1,
       MUX_board_30$write_1__SEL_2,
       MUX_board_31$write_1__SEL_1,
       MUX_board_31$write_1__SEL_2,
       MUX_board_4$write_1__SEL_1,
       MUX_board_4$write_1__SEL_2,
       MUX_board_5$write_1__SEL_1,
       MUX_board_5$write_1__SEL_2,
       MUX_board_6$write_1__SEL_1,
       MUX_board_6$write_1__SEL_2,
       MUX_board_7$write_1__SEL_1,
       MUX_board_7$write_1__SEL_2,
       MUX_board_8$write_1__SEL_1,
       MUX_board_8$write_1__SEL_2,
       MUX_board_9$write_1__SEL_1,
       MUX_board_9$write_1__SEL_2;

  // value method search1
  always@(search1_src or
	  board_0 or
	  board_1 or
	  board_2 or
	  board_3 or
	  board_4 or
	  board_5 or
	  board_6 or
	  board_7 or
	  board_8 or
	  board_9 or
	  board_10 or
	  board_11 or
	  board_12 or
	  board_13 or
	  board_14 or
	  board_15 or
	  board_16 or
	  board_17 or
	  board_18 or
	  board_19 or
	  board_20 or
	  board_21 or
	  board_22 or
	  board_23 or
	  board_24 or
	  board_25 or
	  board_26 or
	  board_27 or board_28 or board_29 or board_30 or board_31)
  begin
    case (search1_src)
      5'd0: search1 = board_0;
      5'd1: search1 = board_1;
      5'd2: search1 = board_2;
      5'd3: search1 = board_3;
      5'd4: search1 = board_4;
      5'd5: search1 = board_5;
      5'd6: search1 = board_6;
      5'd7: search1 = board_7;
      5'd8: search1 = board_8;
      5'd9: search1 = board_9;
      5'd10: search1 = board_10;
      5'd11: search1 = board_11;
      5'd12: search1 = board_12;
      5'd13: search1 = board_13;
      5'd14: search1 = board_14;
      5'd15: search1 = board_15;
      5'd16: search1 = board_16;
      5'd17: search1 = board_17;
      5'd18: search1 = board_18;
      5'd19: search1 = board_19;
      5'd20: search1 = board_20;
      5'd21: search1 = board_21;
      5'd22: search1 = board_22;
      5'd23: search1 = board_23;
      5'd24: search1 = board_24;
      5'd25: search1 = board_25;
      5'd26: search1 = board_26;
      5'd27: search1 = board_27;
      5'd28: search1 = board_28;
      5'd29: search1 = board_29;
      5'd30: search1 = board_30;
      5'd31: search1 = board_31;
    endcase
  end
  assign RDY_search1 = 1'd1 ;

  // value method search2
  always@(search2_src or
	  board_0 or
	  board_1 or
	  board_2 or
	  board_3 or
	  board_4 or
	  board_5 or
	  board_6 or
	  board_7 or
	  board_8 or
	  board_9 or
	  board_10 or
	  board_11 or
	  board_12 or
	  board_13 or
	  board_14 or
	  board_15 or
	  board_16 or
	  board_17 or
	  board_18 or
	  board_19 or
	  board_20 or
	  board_21 or
	  board_22 or
	  board_23 or
	  board_24 or
	  board_25 or
	  board_26 or
	  board_27 or board_28 or board_29 or board_30 or board_31)
  begin
    case (search2_src)
      5'd0: search2 = board_0;
      5'd1: search2 = board_1;
      5'd2: search2 = board_2;
      5'd3: search2 = board_3;
      5'd4: search2 = board_4;
      5'd5: search2 = board_5;
      5'd6: search2 = board_6;
      5'd7: search2 = board_7;
      5'd8: search2 = board_8;
      5'd9: search2 = board_9;
      5'd10: search2 = board_10;
      5'd11: search2 = board_11;
      5'd12: search2 = board_12;
      5'd13: search2 = board_13;
      5'd14: search2 = board_14;
      5'd15: search2 = board_15;
      5'd16: search2 = board_16;
      5'd17: search2 = board_17;
      5'd18: search2 = board_18;
      5'd19: search2 = board_19;
      5'd20: search2 = board_20;
      5'd21: search2 = board_21;
      5'd22: search2 = board_22;
      5'd23: search2 = board_23;
      5'd24: search2 = board_24;
      5'd25: search2 = board_25;
      5'd26: search2 = board_26;
      5'd27: search2 = board_27;
      5'd28: search2 = board_28;
      5'd29: search2 = board_29;
      5'd30: search2 = board_30;
      5'd31: search2 = board_31;
    endcase
  end
  assign RDY_search2 = 1'd1 ;

  // action method insert
  assign RDY_insert = 1'd1 ;

  // action method remove1
  assign RDY_remove1 = 1'd1 ;

  // action method remove2
  assign RDY_remove2 = 1'd1 ;

  // inputs to muxes for submodule ports
  assign MUX_board_1$write_1__SEL_1 = EN_remove2 && remove2_dst == 5'd1 ;
  assign MUX_board_1$write_1__SEL_2 = EN_remove1 && remove1_dst == 5'd1 ;
  assign MUX_board_10$write_1__SEL_1 = EN_remove2 && remove2_dst == 5'd10 ;
  assign MUX_board_10$write_1__SEL_2 = EN_remove1 && remove1_dst == 5'd10 ;
  assign MUX_board_11$write_1__SEL_1 = EN_remove2 && remove2_dst == 5'd11 ;
  assign MUX_board_11$write_1__SEL_2 = EN_remove1 && remove1_dst == 5'd11 ;
  assign MUX_board_12$write_1__SEL_1 = EN_remove2 && remove2_dst == 5'd12 ;
  assign MUX_board_12$write_1__SEL_2 = EN_remove1 && remove1_dst == 5'd12 ;
  assign MUX_board_13$write_1__SEL_1 = EN_remove2 && remove2_dst == 5'd13 ;
  assign MUX_board_13$write_1__SEL_2 = EN_remove1 && remove1_dst == 5'd13 ;
  assign MUX_board_14$write_1__SEL_1 = EN_remove2 && remove2_dst == 5'd14 ;
  assign MUX_board_14$write_1__SEL_2 = EN_remove1 && remove1_dst == 5'd14 ;
  assign MUX_board_15$write_1__SEL_1 = EN_remove2 && remove2_dst == 5'd15 ;
  assign MUX_board_15$write_1__SEL_2 = EN_remove1 && remove1_dst == 5'd15 ;
  assign MUX_board_16$write_1__SEL_1 = EN_remove2 && remove2_dst == 5'd16 ;
  assign MUX_board_16$write_1__SEL_2 = EN_remove1 && remove1_dst == 5'd16 ;
  assign MUX_board_17$write_1__SEL_1 = EN_remove2 && remove2_dst == 5'd17 ;
  assign MUX_board_17$write_1__SEL_2 = EN_remove1 && remove1_dst == 5'd17 ;
  assign MUX_board_18$write_1__SEL_1 = EN_remove2 && remove2_dst == 5'd18 ;
  assign MUX_board_18$write_1__SEL_2 = EN_remove1 && remove1_dst == 5'd18 ;
  assign MUX_board_19$write_1__SEL_1 = EN_remove2 && remove2_dst == 5'd19 ;
  assign MUX_board_19$write_1__SEL_2 = EN_remove1 && remove1_dst == 5'd19 ;
  assign MUX_board_2$write_1__SEL_1 = EN_remove2 && remove2_dst == 5'd2 ;
  assign MUX_board_2$write_1__SEL_2 = EN_remove1 && remove1_dst == 5'd2 ;
  assign MUX_board_20$write_1__SEL_1 = EN_remove2 && remove2_dst == 5'd20 ;
  assign MUX_board_20$write_1__SEL_2 = EN_remove1 && remove1_dst == 5'd20 ;
  assign MUX_board_21$write_1__SEL_1 = EN_remove2 && remove2_dst == 5'd21 ;
  assign MUX_board_21$write_1__SEL_2 = EN_remove1 && remove1_dst == 5'd21 ;
  assign MUX_board_22$write_1__SEL_1 = EN_remove2 && remove2_dst == 5'd22 ;
  assign MUX_board_22$write_1__SEL_2 = EN_remove1 && remove1_dst == 5'd22 ;
  assign MUX_board_23$write_1__SEL_1 = EN_remove2 && remove2_dst == 5'd23 ;
  assign MUX_board_23$write_1__SEL_2 = EN_remove1 && remove1_dst == 5'd23 ;
  assign MUX_board_24$write_1__SEL_1 = EN_remove2 && remove2_dst == 5'd24 ;
  assign MUX_board_24$write_1__SEL_2 = EN_remove1 && remove1_dst == 5'd24 ;
  assign MUX_board_25$write_1__SEL_1 = EN_remove2 && remove2_dst == 5'd25 ;
  assign MUX_board_25$write_1__SEL_2 = EN_remove1 && remove1_dst == 5'd25 ;
  assign MUX_board_26$write_1__SEL_1 = EN_remove2 && remove2_dst == 5'd26 ;
  assign MUX_board_26$write_1__SEL_2 = EN_remove1 && remove1_dst == 5'd26 ;
  assign MUX_board_27$write_1__SEL_1 = EN_remove2 && remove2_dst == 5'd27 ;
  assign MUX_board_27$write_1__SEL_2 = EN_remove1 && remove1_dst == 5'd27 ;
  assign MUX_board_28$write_1__SEL_1 = EN_remove2 && remove2_dst == 5'd28 ;
  assign MUX_board_28$write_1__SEL_2 = EN_remove1 && remove1_dst == 5'd28 ;
  assign MUX_board_29$write_1__SEL_1 = EN_remove2 && remove2_dst == 5'd29 ;
  assign MUX_board_29$write_1__SEL_2 = EN_remove1 && remove1_dst == 5'd29 ;
  assign MUX_board_3$write_1__SEL_1 = EN_remove2 && remove2_dst == 5'd3 ;
  assign MUX_board_3$write_1__SEL_2 = EN_remove1 && remove1_dst == 5'd3 ;
  assign MUX_board_30$write_1__SEL_1 = EN_remove2 && remove2_dst == 5'd30 ;
  assign MUX_board_30$write_1__SEL_2 = EN_remove1 && remove1_dst == 5'd30 ;
  assign MUX_board_31$write_1__SEL_1 = EN_remove2 && remove2_dst == 5'd31 ;
  assign MUX_board_31$write_1__SEL_2 = EN_remove1 && remove1_dst == 5'd31 ;
  assign MUX_board_4$write_1__SEL_1 = EN_remove2 && remove2_dst == 5'd4 ;
  assign MUX_board_4$write_1__SEL_2 = EN_remove1 && remove1_dst == 5'd4 ;
  assign MUX_board_5$write_1__SEL_1 = EN_remove2 && remove2_dst == 5'd5 ;
  assign MUX_board_5$write_1__SEL_2 = EN_remove1 && remove1_dst == 5'd5 ;
  assign MUX_board_6$write_1__SEL_1 = EN_remove2 && remove2_dst == 5'd6 ;
  assign MUX_board_6$write_1__SEL_2 = EN_remove1 && remove1_dst == 5'd6 ;
  assign MUX_board_7$write_1__SEL_1 = EN_remove2 && remove2_dst == 5'd7 ;
  assign MUX_board_7$write_1__SEL_2 = EN_remove1 && remove1_dst == 5'd7 ;
  assign MUX_board_8$write_1__SEL_1 = EN_remove2 && remove2_dst == 5'd8 ;
  assign MUX_board_8$write_1__SEL_2 = EN_remove1 && remove1_dst == 5'd8 ;
  assign MUX_board_9$write_1__SEL_1 = EN_remove2 && remove2_dst == 5'd9 ;
  assign MUX_board_9$write_1__SEL_2 = EN_remove1 && remove1_dst == 5'd9 ;

  // register board_0
  assign board_0$D_IN = 1'b0 /* unspecified value */  ;
  assign board_0$EN = 1'b0 ;

  // register board_1
  assign board_1$D_IN =
	     !MUX_board_1$write_1__SEL_1 && !MUX_board_1$write_1__SEL_2 ;
  assign board_1$EN =
	     EN_insert && insert_dst == 5'd1 ||
	     EN_remove1 && remove1_dst == 5'd1 ||
	     EN_remove2 && remove2_dst == 5'd1 ;

  // register board_10
  assign board_10$D_IN =
	     !MUX_board_10$write_1__SEL_1 && !MUX_board_10$write_1__SEL_2 ;
  assign board_10$EN =
	     EN_insert && insert_dst == 5'd10 ||
	     EN_remove1 && remove1_dst == 5'd10 ||
	     EN_remove2 && remove2_dst == 5'd10 ;

  // register board_11
  assign board_11$D_IN =
	     !MUX_board_11$write_1__SEL_1 && !MUX_board_11$write_1__SEL_2 ;
  assign board_11$EN =
	     EN_insert && insert_dst == 5'd11 ||
	     EN_remove1 && remove1_dst == 5'd11 ||
	     EN_remove2 && remove2_dst == 5'd11 ;

  // register board_12
  assign board_12$D_IN =
	     !MUX_board_12$write_1__SEL_1 && !MUX_board_12$write_1__SEL_2 ;
  assign board_12$EN =
	     EN_insert && insert_dst == 5'd12 ||
	     EN_remove1 && remove1_dst == 5'd12 ||
	     EN_remove2 && remove2_dst == 5'd12 ;

  // register board_13
  assign board_13$D_IN =
	     !MUX_board_13$write_1__SEL_1 && !MUX_board_13$write_1__SEL_2 ;
  assign board_13$EN =
	     EN_insert && insert_dst == 5'd13 ||
	     EN_remove1 && remove1_dst == 5'd13 ||
	     EN_remove2 && remove2_dst == 5'd13 ;

  // register board_14
  assign board_14$D_IN =
	     !MUX_board_14$write_1__SEL_1 && !MUX_board_14$write_1__SEL_2 ;
  assign board_14$EN =
	     EN_insert && insert_dst == 5'd14 ||
	     EN_remove1 && remove1_dst == 5'd14 ||
	     EN_remove2 && remove2_dst == 5'd14 ;

  // register board_15
  assign board_15$D_IN =
	     !MUX_board_15$write_1__SEL_1 && !MUX_board_15$write_1__SEL_2 ;
  assign board_15$EN =
	     EN_insert && insert_dst == 5'd15 ||
	     EN_remove1 && remove1_dst == 5'd15 ||
	     EN_remove2 && remove2_dst == 5'd15 ;

  // register board_16
  assign board_16$D_IN =
	     !MUX_board_16$write_1__SEL_1 && !MUX_board_16$write_1__SEL_2 ;
  assign board_16$EN =
	     EN_insert && insert_dst == 5'd16 ||
	     EN_remove1 && remove1_dst == 5'd16 ||
	     EN_remove2 && remove2_dst == 5'd16 ;

  // register board_17
  assign board_17$D_IN =
	     !MUX_board_17$write_1__SEL_1 && !MUX_board_17$write_1__SEL_2 ;
  assign board_17$EN =
	     EN_insert && insert_dst == 5'd17 ||
	     EN_remove1 && remove1_dst == 5'd17 ||
	     EN_remove2 && remove2_dst == 5'd17 ;

  // register board_18
  assign board_18$D_IN =
	     !MUX_board_18$write_1__SEL_1 && !MUX_board_18$write_1__SEL_2 ;
  assign board_18$EN =
	     EN_insert && insert_dst == 5'd18 ||
	     EN_remove1 && remove1_dst == 5'd18 ||
	     EN_remove2 && remove2_dst == 5'd18 ;

  // register board_19
  assign board_19$D_IN =
	     !MUX_board_19$write_1__SEL_1 && !MUX_board_19$write_1__SEL_2 ;
  assign board_19$EN =
	     EN_insert && insert_dst == 5'd19 ||
	     EN_remove1 && remove1_dst == 5'd19 ||
	     EN_remove2 && remove2_dst == 5'd19 ;

  // register board_2
  assign board_2$D_IN =
	     !MUX_board_2$write_1__SEL_1 && !MUX_board_2$write_1__SEL_2 ;
  assign board_2$EN =
	     EN_insert && insert_dst == 5'd2 ||
	     EN_remove1 && remove1_dst == 5'd2 ||
	     EN_remove2 && remove2_dst == 5'd2 ;

  // register board_20
  assign board_20$D_IN =
	     !MUX_board_20$write_1__SEL_1 && !MUX_board_20$write_1__SEL_2 ;
  assign board_20$EN =
	     EN_insert && insert_dst == 5'd20 ||
	     EN_remove1 && remove1_dst == 5'd20 ||
	     EN_remove2 && remove2_dst == 5'd20 ;

  // register board_21
  assign board_21$D_IN =
	     !MUX_board_21$write_1__SEL_1 && !MUX_board_21$write_1__SEL_2 ;
  assign board_21$EN =
	     EN_insert && insert_dst == 5'd21 ||
	     EN_remove1 && remove1_dst == 5'd21 ||
	     EN_remove2 && remove2_dst == 5'd21 ;

  // register board_22
  assign board_22$D_IN =
	     !MUX_board_22$write_1__SEL_1 && !MUX_board_22$write_1__SEL_2 ;
  assign board_22$EN =
	     EN_insert && insert_dst == 5'd22 ||
	     EN_remove1 && remove1_dst == 5'd22 ||
	     EN_remove2 && remove2_dst == 5'd22 ;

  // register board_23
  assign board_23$D_IN =
	     !MUX_board_23$write_1__SEL_1 && !MUX_board_23$write_1__SEL_2 ;
  assign board_23$EN =
	     EN_insert && insert_dst == 5'd23 ||
	     EN_remove1 && remove1_dst == 5'd23 ||
	     EN_remove2 && remove2_dst == 5'd23 ;

  // register board_24
  assign board_24$D_IN =
	     !MUX_board_24$write_1__SEL_1 && !MUX_board_24$write_1__SEL_2 ;
  assign board_24$EN =
	     EN_insert && insert_dst == 5'd24 ||
	     EN_remove1 && remove1_dst == 5'd24 ||
	     EN_remove2 && remove2_dst == 5'd24 ;

  // register board_25
  assign board_25$D_IN =
	     !MUX_board_25$write_1__SEL_1 && !MUX_board_25$write_1__SEL_2 ;
  assign board_25$EN =
	     EN_insert && insert_dst == 5'd25 ||
	     EN_remove1 && remove1_dst == 5'd25 ||
	     EN_remove2 && remove2_dst == 5'd25 ;

  // register board_26
  assign board_26$D_IN =
	     !MUX_board_26$write_1__SEL_1 && !MUX_board_26$write_1__SEL_2 ;
  assign board_26$EN =
	     EN_insert && insert_dst == 5'd26 ||
	     EN_remove1 && remove1_dst == 5'd26 ||
	     EN_remove2 && remove2_dst == 5'd26 ;

  // register board_27
  assign board_27$D_IN =
	     !MUX_board_27$write_1__SEL_1 && !MUX_board_27$write_1__SEL_2 ;
  assign board_27$EN =
	     EN_insert && insert_dst == 5'd27 ||
	     EN_remove1 && remove1_dst == 5'd27 ||
	     EN_remove2 && remove2_dst == 5'd27 ;

  // register board_28
  assign board_28$D_IN =
	     !MUX_board_28$write_1__SEL_1 && !MUX_board_28$write_1__SEL_2 ;
  assign board_28$EN =
	     EN_insert && insert_dst == 5'd28 ||
	     EN_remove1 && remove1_dst == 5'd28 ||
	     EN_remove2 && remove2_dst == 5'd28 ;

  // register board_29
  assign board_29$D_IN =
	     !MUX_board_29$write_1__SEL_1 && !MUX_board_29$write_1__SEL_2 ;
  assign board_29$EN =
	     EN_insert && insert_dst == 5'd29 ||
	     EN_remove1 && remove1_dst == 5'd29 ||
	     EN_remove2 && remove2_dst == 5'd29 ;

  // register board_3
  assign board_3$D_IN =
	     !MUX_board_3$write_1__SEL_1 && !MUX_board_3$write_1__SEL_2 ;
  assign board_3$EN =
	     EN_insert && insert_dst == 5'd3 ||
	     EN_remove1 && remove1_dst == 5'd3 ||
	     EN_remove2 && remove2_dst == 5'd3 ;

  // register board_30
  assign board_30$D_IN =
	     !MUX_board_30$write_1__SEL_1 && !MUX_board_30$write_1__SEL_2 ;
  assign board_30$EN =
	     EN_insert && insert_dst == 5'd30 ||
	     EN_remove1 && remove1_dst == 5'd30 ||
	     EN_remove2 && remove2_dst == 5'd30 ;

  // register board_31
  assign board_31$D_IN =
	     !MUX_board_31$write_1__SEL_1 && !MUX_board_31$write_1__SEL_2 ;
  assign board_31$EN =
	     EN_insert && insert_dst == 5'd31 ||
	     EN_remove1 && remove1_dst == 5'd31 ||
	     EN_remove2 && remove2_dst == 5'd31 ;

  // register board_4
  assign board_4$D_IN =
	     !MUX_board_4$write_1__SEL_1 && !MUX_board_4$write_1__SEL_2 ;
  assign board_4$EN =
	     EN_insert && insert_dst == 5'd4 ||
	     EN_remove1 && remove1_dst == 5'd4 ||
	     EN_remove2 && remove2_dst == 5'd4 ;

  // register board_5
  assign board_5$D_IN =
	     !MUX_board_5$write_1__SEL_1 && !MUX_board_5$write_1__SEL_2 ;
  assign board_5$EN =
	     EN_insert && insert_dst == 5'd5 ||
	     EN_remove1 && remove1_dst == 5'd5 ||
	     EN_remove2 && remove2_dst == 5'd5 ;

  // register board_6
  assign board_6$D_IN =
	     !MUX_board_6$write_1__SEL_1 && !MUX_board_6$write_1__SEL_2 ;
  assign board_6$EN =
	     EN_insert && insert_dst == 5'd6 ||
	     EN_remove1 && remove1_dst == 5'd6 ||
	     EN_remove2 && remove2_dst == 5'd6 ;

  // register board_7
  assign board_7$D_IN =
	     !MUX_board_7$write_1__SEL_1 && !MUX_board_7$write_1__SEL_2 ;
  assign board_7$EN =
	     EN_insert && insert_dst == 5'd7 ||
	     EN_remove1 && remove1_dst == 5'd7 ||
	     EN_remove2 && remove2_dst == 5'd7 ;

  // register board_8
  assign board_8$D_IN =
	     !MUX_board_8$write_1__SEL_1 && !MUX_board_8$write_1__SEL_2 ;
  assign board_8$EN =
	     EN_insert && insert_dst == 5'd8 ||
	     EN_remove1 && remove1_dst == 5'd8 ||
	     EN_remove2 && remove2_dst == 5'd8 ;

  // register board_9
  assign board_9$D_IN =
	     !MUX_board_9$write_1__SEL_1 && !MUX_board_9$write_1__SEL_2 ;
  assign board_9$EN =
	     EN_insert && insert_dst == 5'd9 ||
	     EN_remove1 && remove1_dst == 5'd9 ||
	     EN_remove2 && remove2_dst == 5'd9 ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        board_0 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	board_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	board_10 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	board_11 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	board_12 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	board_13 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	board_14 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	board_15 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	board_16 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	board_17 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	board_18 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	board_19 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	board_2 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	board_20 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	board_21 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	board_22 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	board_23 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	board_24 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	board_25 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	board_26 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	board_27 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	board_28 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	board_29 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	board_3 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	board_30 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	board_31 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	board_4 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	board_5 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	board_6 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	board_7 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	board_8 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	board_9 <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (board_0$EN) board_0 <= `BSV_ASSIGNMENT_DELAY board_0$D_IN;
	if (board_1$EN) board_1 <= `BSV_ASSIGNMENT_DELAY board_1$D_IN;
	if (board_10$EN) board_10 <= `BSV_ASSIGNMENT_DELAY board_10$D_IN;
	if (board_11$EN) board_11 <= `BSV_ASSIGNMENT_DELAY board_11$D_IN;
	if (board_12$EN) board_12 <= `BSV_ASSIGNMENT_DELAY board_12$D_IN;
	if (board_13$EN) board_13 <= `BSV_ASSIGNMENT_DELAY board_13$D_IN;
	if (board_14$EN) board_14 <= `BSV_ASSIGNMENT_DELAY board_14$D_IN;
	if (board_15$EN) board_15 <= `BSV_ASSIGNMENT_DELAY board_15$D_IN;
	if (board_16$EN) board_16 <= `BSV_ASSIGNMENT_DELAY board_16$D_IN;
	if (board_17$EN) board_17 <= `BSV_ASSIGNMENT_DELAY board_17$D_IN;
	if (board_18$EN) board_18 <= `BSV_ASSIGNMENT_DELAY board_18$D_IN;
	if (board_19$EN) board_19 <= `BSV_ASSIGNMENT_DELAY board_19$D_IN;
	if (board_2$EN) board_2 <= `BSV_ASSIGNMENT_DELAY board_2$D_IN;
	if (board_20$EN) board_20 <= `BSV_ASSIGNMENT_DELAY board_20$D_IN;
	if (board_21$EN) board_21 <= `BSV_ASSIGNMENT_DELAY board_21$D_IN;
	if (board_22$EN) board_22 <= `BSV_ASSIGNMENT_DELAY board_22$D_IN;
	if (board_23$EN) board_23 <= `BSV_ASSIGNMENT_DELAY board_23$D_IN;
	if (board_24$EN) board_24 <= `BSV_ASSIGNMENT_DELAY board_24$D_IN;
	if (board_25$EN) board_25 <= `BSV_ASSIGNMENT_DELAY board_25$D_IN;
	if (board_26$EN) board_26 <= `BSV_ASSIGNMENT_DELAY board_26$D_IN;
	if (board_27$EN) board_27 <= `BSV_ASSIGNMENT_DELAY board_27$D_IN;
	if (board_28$EN) board_28 <= `BSV_ASSIGNMENT_DELAY board_28$D_IN;
	if (board_29$EN) board_29 <= `BSV_ASSIGNMENT_DELAY board_29$D_IN;
	if (board_3$EN) board_3 <= `BSV_ASSIGNMENT_DELAY board_3$D_IN;
	if (board_30$EN) board_30 <= `BSV_ASSIGNMENT_DELAY board_30$D_IN;
	if (board_31$EN) board_31 <= `BSV_ASSIGNMENT_DELAY board_31$D_IN;
	if (board_4$EN) board_4 <= `BSV_ASSIGNMENT_DELAY board_4$D_IN;
	if (board_5$EN) board_5 <= `BSV_ASSIGNMENT_DELAY board_5$D_IN;
	if (board_6$EN) board_6 <= `BSV_ASSIGNMENT_DELAY board_6$D_IN;
	if (board_7$EN) board_7 <= `BSV_ASSIGNMENT_DELAY board_7$D_IN;
	if (board_8$EN) board_8 <= `BSV_ASSIGNMENT_DELAY board_8$D_IN;
	if (board_9$EN) board_9 <= `BSV_ASSIGNMENT_DELAY board_9$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    board_0 = 1'h0;
    board_1 = 1'h0;
    board_10 = 1'h0;
    board_11 = 1'h0;
    board_12 = 1'h0;
    board_13 = 1'h0;
    board_14 = 1'h0;
    board_15 = 1'h0;
    board_16 = 1'h0;
    board_17 = 1'h0;
    board_18 = 1'h0;
    board_19 = 1'h0;
    board_2 = 1'h0;
    board_20 = 1'h0;
    board_21 = 1'h0;
    board_22 = 1'h0;
    board_23 = 1'h0;
    board_24 = 1'h0;
    board_25 = 1'h0;
    board_26 = 1'h0;
    board_27 = 1'h0;
    board_28 = 1'h0;
    board_29 = 1'h0;
    board_3 = 1'h0;
    board_30 = 1'h0;
    board_31 = 1'h0;
    board_4 = 1'h0;
    board_5 = 1'h0;
    board_6 = 1'h0;
    board_7 = 1'h0;
    board_8 = 1'h0;
    board_9 = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkBitScoreboard

