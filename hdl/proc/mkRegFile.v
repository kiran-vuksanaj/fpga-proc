//
// Generated by Bluespec Compiler, version 2023.07 (build 0eb551d)
//
// On Thu Jul  4 08:48:21 EDT 2024
//
//
// Ports:
// Name                         I/O  size props
// getRs1                         O    32
// RDY_getRs1                     O     1 const
// getRs2                         O    32
// RDY_getRs2                     O     1 const
// RDY_writeRd                    O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// getRs1_src                     I     5
// getRs2_src                     I     5
// writeRd_dst                    I     5
// writeRd_data                   I    32 reg
// EN_writeRd                     I     1
//
// Combinational paths from inputs to outputs:
//   getRs1_src -> getRs1
//   getRs2_src -> getRs2
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkRegFile(CLK,
		 RST_N,

		 getRs1_src,
		 getRs1,
		 RDY_getRs1,

		 getRs2_src,
		 getRs2,
		 RDY_getRs2,

		 writeRd_dst,
		 writeRd_data,
		 EN_writeRd,
		 RDY_writeRd);
  input  CLK;
  input  RST_N;

  // value method getRs1
  input  [4 : 0] getRs1_src;
  output [31 : 0] getRs1;
  output RDY_getRs1;

  // value method getRs2
  input  [4 : 0] getRs2_src;
  output [31 : 0] getRs2;
  output RDY_getRs2;

  // action method writeRd
  input  [4 : 0] writeRd_dst;
  input  [31 : 0] writeRd_data;
  input  EN_writeRd;
  output RDY_writeRd;

  // signals for module outputs
  reg [31 : 0] getRs1, getRs2;
  wire RDY_getRs1, RDY_getRs2, RDY_writeRd;

  // register rf_0
  reg [31 : 0] rf_0;
  wire [31 : 0] rf_0$D_IN;
  wire rf_0$EN;

  // register rf_1
  reg [31 : 0] rf_1;
  wire [31 : 0] rf_1$D_IN;
  wire rf_1$EN;

  // register rf_10
  reg [31 : 0] rf_10;
  wire [31 : 0] rf_10$D_IN;
  wire rf_10$EN;

  // register rf_11
  reg [31 : 0] rf_11;
  wire [31 : 0] rf_11$D_IN;
  wire rf_11$EN;

  // register rf_12
  reg [31 : 0] rf_12;
  wire [31 : 0] rf_12$D_IN;
  wire rf_12$EN;

  // register rf_13
  reg [31 : 0] rf_13;
  wire [31 : 0] rf_13$D_IN;
  wire rf_13$EN;

  // register rf_14
  reg [31 : 0] rf_14;
  wire [31 : 0] rf_14$D_IN;
  wire rf_14$EN;

  // register rf_15
  reg [31 : 0] rf_15;
  wire [31 : 0] rf_15$D_IN;
  wire rf_15$EN;

  // register rf_16
  reg [31 : 0] rf_16;
  wire [31 : 0] rf_16$D_IN;
  wire rf_16$EN;

  // register rf_17
  reg [31 : 0] rf_17;
  wire [31 : 0] rf_17$D_IN;
  wire rf_17$EN;

  // register rf_18
  reg [31 : 0] rf_18;
  wire [31 : 0] rf_18$D_IN;
  wire rf_18$EN;

  // register rf_19
  reg [31 : 0] rf_19;
  wire [31 : 0] rf_19$D_IN;
  wire rf_19$EN;

  // register rf_2
  reg [31 : 0] rf_2;
  wire [31 : 0] rf_2$D_IN;
  wire rf_2$EN;

  // register rf_20
  reg [31 : 0] rf_20;
  wire [31 : 0] rf_20$D_IN;
  wire rf_20$EN;

  // register rf_21
  reg [31 : 0] rf_21;
  wire [31 : 0] rf_21$D_IN;
  wire rf_21$EN;

  // register rf_22
  reg [31 : 0] rf_22;
  wire [31 : 0] rf_22$D_IN;
  wire rf_22$EN;

  // register rf_23
  reg [31 : 0] rf_23;
  wire [31 : 0] rf_23$D_IN;
  wire rf_23$EN;

  // register rf_24
  reg [31 : 0] rf_24;
  wire [31 : 0] rf_24$D_IN;
  wire rf_24$EN;

  // register rf_25
  reg [31 : 0] rf_25;
  wire [31 : 0] rf_25$D_IN;
  wire rf_25$EN;

  // register rf_26
  reg [31 : 0] rf_26;
  wire [31 : 0] rf_26$D_IN;
  wire rf_26$EN;

  // register rf_27
  reg [31 : 0] rf_27;
  wire [31 : 0] rf_27$D_IN;
  wire rf_27$EN;

  // register rf_28
  reg [31 : 0] rf_28;
  wire [31 : 0] rf_28$D_IN;
  wire rf_28$EN;

  // register rf_29
  reg [31 : 0] rf_29;
  wire [31 : 0] rf_29$D_IN;
  wire rf_29$EN;

  // register rf_3
  reg [31 : 0] rf_3;
  wire [31 : 0] rf_3$D_IN;
  wire rf_3$EN;

  // register rf_30
  reg [31 : 0] rf_30;
  wire [31 : 0] rf_30$D_IN;
  wire rf_30$EN;

  // register rf_31
  reg [31 : 0] rf_31;
  wire [31 : 0] rf_31$D_IN;
  wire rf_31$EN;

  // register rf_4
  reg [31 : 0] rf_4;
  wire [31 : 0] rf_4$D_IN;
  wire rf_4$EN;

  // register rf_5
  reg [31 : 0] rf_5;
  wire [31 : 0] rf_5$D_IN;
  wire rf_5$EN;

  // register rf_6
  reg [31 : 0] rf_6;
  wire [31 : 0] rf_6$D_IN;
  wire rf_6$EN;

  // register rf_7
  reg [31 : 0] rf_7;
  wire [31 : 0] rf_7$D_IN;
  wire rf_7$EN;

  // register rf_8
  reg [31 : 0] rf_8;
  wire [31 : 0] rf_8$D_IN;
  wire rf_8$EN;

  // register rf_9
  reg [31 : 0] rf_9;
  wire [31 : 0] rf_9$D_IN;
  wire rf_9$EN;

  // value method getRs1
  always@(getRs1_src or
	  rf_0 or
	  rf_1 or
	  rf_2 or
	  rf_3 or
	  rf_4 or
	  rf_5 or
	  rf_6 or
	  rf_7 or
	  rf_8 or
	  rf_9 or
	  rf_10 or
	  rf_11 or
	  rf_12 or
	  rf_13 or
	  rf_14 or
	  rf_15 or
	  rf_16 or
	  rf_17 or
	  rf_18 or
	  rf_19 or
	  rf_20 or
	  rf_21 or
	  rf_22 or
	  rf_23 or
	  rf_24 or
	  rf_25 or rf_26 or rf_27 or rf_28 or rf_29 or rf_30 or rf_31)
  begin
    case (getRs1_src)
      5'd0: getRs1 = rf_0;
      5'd1: getRs1 = rf_1;
      5'd2: getRs1 = rf_2;
      5'd3: getRs1 = rf_3;
      5'd4: getRs1 = rf_4;
      5'd5: getRs1 = rf_5;
      5'd6: getRs1 = rf_6;
      5'd7: getRs1 = rf_7;
      5'd8: getRs1 = rf_8;
      5'd9: getRs1 = rf_9;
      5'd10: getRs1 = rf_10;
      5'd11: getRs1 = rf_11;
      5'd12: getRs1 = rf_12;
      5'd13: getRs1 = rf_13;
      5'd14: getRs1 = rf_14;
      5'd15: getRs1 = rf_15;
      5'd16: getRs1 = rf_16;
      5'd17: getRs1 = rf_17;
      5'd18: getRs1 = rf_18;
      5'd19: getRs1 = rf_19;
      5'd20: getRs1 = rf_20;
      5'd21: getRs1 = rf_21;
      5'd22: getRs1 = rf_22;
      5'd23: getRs1 = rf_23;
      5'd24: getRs1 = rf_24;
      5'd25: getRs1 = rf_25;
      5'd26: getRs1 = rf_26;
      5'd27: getRs1 = rf_27;
      5'd28: getRs1 = rf_28;
      5'd29: getRs1 = rf_29;
      5'd30: getRs1 = rf_30;
      5'd31: getRs1 = rf_31;
    endcase
  end
  assign RDY_getRs1 = 1'd1 ;

  // value method getRs2
  always@(getRs2_src or
	  rf_0 or
	  rf_1 or
	  rf_2 or
	  rf_3 or
	  rf_4 or
	  rf_5 or
	  rf_6 or
	  rf_7 or
	  rf_8 or
	  rf_9 or
	  rf_10 or
	  rf_11 or
	  rf_12 or
	  rf_13 or
	  rf_14 or
	  rf_15 or
	  rf_16 or
	  rf_17 or
	  rf_18 or
	  rf_19 or
	  rf_20 or
	  rf_21 or
	  rf_22 or
	  rf_23 or
	  rf_24 or
	  rf_25 or rf_26 or rf_27 or rf_28 or rf_29 or rf_30 or rf_31)
  begin
    case (getRs2_src)
      5'd0: getRs2 = rf_0;
      5'd1: getRs2 = rf_1;
      5'd2: getRs2 = rf_2;
      5'd3: getRs2 = rf_3;
      5'd4: getRs2 = rf_4;
      5'd5: getRs2 = rf_5;
      5'd6: getRs2 = rf_6;
      5'd7: getRs2 = rf_7;
      5'd8: getRs2 = rf_8;
      5'd9: getRs2 = rf_9;
      5'd10: getRs2 = rf_10;
      5'd11: getRs2 = rf_11;
      5'd12: getRs2 = rf_12;
      5'd13: getRs2 = rf_13;
      5'd14: getRs2 = rf_14;
      5'd15: getRs2 = rf_15;
      5'd16: getRs2 = rf_16;
      5'd17: getRs2 = rf_17;
      5'd18: getRs2 = rf_18;
      5'd19: getRs2 = rf_19;
      5'd20: getRs2 = rf_20;
      5'd21: getRs2 = rf_21;
      5'd22: getRs2 = rf_22;
      5'd23: getRs2 = rf_23;
      5'd24: getRs2 = rf_24;
      5'd25: getRs2 = rf_25;
      5'd26: getRs2 = rf_26;
      5'd27: getRs2 = rf_27;
      5'd28: getRs2 = rf_28;
      5'd29: getRs2 = rf_29;
      5'd30: getRs2 = rf_30;
      5'd31: getRs2 = rf_31;
    endcase
  end
  assign RDY_getRs2 = 1'd1 ;

  // action method writeRd
  assign RDY_writeRd = 1'd1 ;

  // register rf_0
  assign rf_0$D_IN = writeRd_data ;
  assign rf_0$EN = EN_writeRd && writeRd_dst == 5'd0 ;

  // register rf_1
  assign rf_1$D_IN = writeRd_data ;
  assign rf_1$EN = EN_writeRd && writeRd_dst == 5'd1 ;

  // register rf_10
  assign rf_10$D_IN = writeRd_data ;
  assign rf_10$EN = EN_writeRd && writeRd_dst == 5'd10 ;

  // register rf_11
  assign rf_11$D_IN = writeRd_data ;
  assign rf_11$EN = EN_writeRd && writeRd_dst == 5'd11 ;

  // register rf_12
  assign rf_12$D_IN = writeRd_data ;
  assign rf_12$EN = EN_writeRd && writeRd_dst == 5'd12 ;

  // register rf_13
  assign rf_13$D_IN = writeRd_data ;
  assign rf_13$EN = EN_writeRd && writeRd_dst == 5'd13 ;

  // register rf_14
  assign rf_14$D_IN = writeRd_data ;
  assign rf_14$EN = EN_writeRd && writeRd_dst == 5'd14 ;

  // register rf_15
  assign rf_15$D_IN = writeRd_data ;
  assign rf_15$EN = EN_writeRd && writeRd_dst == 5'd15 ;

  // register rf_16
  assign rf_16$D_IN = writeRd_data ;
  assign rf_16$EN = EN_writeRd && writeRd_dst == 5'd16 ;

  // register rf_17
  assign rf_17$D_IN = writeRd_data ;
  assign rf_17$EN = EN_writeRd && writeRd_dst == 5'd17 ;

  // register rf_18
  assign rf_18$D_IN = writeRd_data ;
  assign rf_18$EN = EN_writeRd && writeRd_dst == 5'd18 ;

  // register rf_19
  assign rf_19$D_IN = writeRd_data ;
  assign rf_19$EN = EN_writeRd && writeRd_dst == 5'd19 ;

  // register rf_2
  assign rf_2$D_IN = writeRd_data ;
  assign rf_2$EN = EN_writeRd && writeRd_dst == 5'd2 ;

  // register rf_20
  assign rf_20$D_IN = writeRd_data ;
  assign rf_20$EN = EN_writeRd && writeRd_dst == 5'd20 ;

  // register rf_21
  assign rf_21$D_IN = writeRd_data ;
  assign rf_21$EN = EN_writeRd && writeRd_dst == 5'd21 ;

  // register rf_22
  assign rf_22$D_IN = writeRd_data ;
  assign rf_22$EN = EN_writeRd && writeRd_dst == 5'd22 ;

  // register rf_23
  assign rf_23$D_IN = writeRd_data ;
  assign rf_23$EN = EN_writeRd && writeRd_dst == 5'd23 ;

  // register rf_24
  assign rf_24$D_IN = writeRd_data ;
  assign rf_24$EN = EN_writeRd && writeRd_dst == 5'd24 ;

  // register rf_25
  assign rf_25$D_IN = writeRd_data ;
  assign rf_25$EN = EN_writeRd && writeRd_dst == 5'd25 ;

  // register rf_26
  assign rf_26$D_IN = writeRd_data ;
  assign rf_26$EN = EN_writeRd && writeRd_dst == 5'd26 ;

  // register rf_27
  assign rf_27$D_IN = writeRd_data ;
  assign rf_27$EN = EN_writeRd && writeRd_dst == 5'd27 ;

  // register rf_28
  assign rf_28$D_IN = writeRd_data ;
  assign rf_28$EN = EN_writeRd && writeRd_dst == 5'd28 ;

  // register rf_29
  assign rf_29$D_IN = writeRd_data ;
  assign rf_29$EN = EN_writeRd && writeRd_dst == 5'd29 ;

  // register rf_3
  assign rf_3$D_IN = writeRd_data ;
  assign rf_3$EN = EN_writeRd && writeRd_dst == 5'd3 ;

  // register rf_30
  assign rf_30$D_IN = writeRd_data ;
  assign rf_30$EN = EN_writeRd && writeRd_dst == 5'd30 ;

  // register rf_31
  assign rf_31$D_IN = writeRd_data ;
  assign rf_31$EN = EN_writeRd && writeRd_dst == 5'd31 ;

  // register rf_4
  assign rf_4$D_IN = writeRd_data ;
  assign rf_4$EN = EN_writeRd && writeRd_dst == 5'd4 ;

  // register rf_5
  assign rf_5$D_IN = writeRd_data ;
  assign rf_5$EN = EN_writeRd && writeRd_dst == 5'd5 ;

  // register rf_6
  assign rf_6$D_IN = writeRd_data ;
  assign rf_6$EN = EN_writeRd && writeRd_dst == 5'd6 ;

  // register rf_7
  assign rf_7$D_IN = writeRd_data ;
  assign rf_7$EN = EN_writeRd && writeRd_dst == 5'd7 ;

  // register rf_8
  assign rf_8$D_IN = writeRd_data ;
  assign rf_8$EN = EN_writeRd && writeRd_dst == 5'd8 ;

  // register rf_9
  assign rf_9$D_IN = writeRd_data ;
  assign rf_9$EN = EN_writeRd && writeRd_dst == 5'd9 ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        rf_0 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rf_1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rf_10 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rf_11 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rf_12 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rf_13 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rf_14 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rf_15 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rf_16 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rf_17 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rf_18 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rf_19 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rf_2 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rf_20 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rf_21 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rf_22 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rf_23 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rf_24 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rf_25 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rf_26 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rf_27 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rf_28 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rf_29 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rf_3 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rf_30 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rf_31 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rf_4 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rf_5 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rf_6 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rf_7 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rf_8 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rf_9 <= `BSV_ASSIGNMENT_DELAY 32'd0;
      end
    else
      begin
        if (rf_0$EN) rf_0 <= `BSV_ASSIGNMENT_DELAY rf_0$D_IN;
	if (rf_1$EN) rf_1 <= `BSV_ASSIGNMENT_DELAY rf_1$D_IN;
	if (rf_10$EN) rf_10 <= `BSV_ASSIGNMENT_DELAY rf_10$D_IN;
	if (rf_11$EN) rf_11 <= `BSV_ASSIGNMENT_DELAY rf_11$D_IN;
	if (rf_12$EN) rf_12 <= `BSV_ASSIGNMENT_DELAY rf_12$D_IN;
	if (rf_13$EN) rf_13 <= `BSV_ASSIGNMENT_DELAY rf_13$D_IN;
	if (rf_14$EN) rf_14 <= `BSV_ASSIGNMENT_DELAY rf_14$D_IN;
	if (rf_15$EN) rf_15 <= `BSV_ASSIGNMENT_DELAY rf_15$D_IN;
	if (rf_16$EN) rf_16 <= `BSV_ASSIGNMENT_DELAY rf_16$D_IN;
	if (rf_17$EN) rf_17 <= `BSV_ASSIGNMENT_DELAY rf_17$D_IN;
	if (rf_18$EN) rf_18 <= `BSV_ASSIGNMENT_DELAY rf_18$D_IN;
	if (rf_19$EN) rf_19 <= `BSV_ASSIGNMENT_DELAY rf_19$D_IN;
	if (rf_2$EN) rf_2 <= `BSV_ASSIGNMENT_DELAY rf_2$D_IN;
	if (rf_20$EN) rf_20 <= `BSV_ASSIGNMENT_DELAY rf_20$D_IN;
	if (rf_21$EN) rf_21 <= `BSV_ASSIGNMENT_DELAY rf_21$D_IN;
	if (rf_22$EN) rf_22 <= `BSV_ASSIGNMENT_DELAY rf_22$D_IN;
	if (rf_23$EN) rf_23 <= `BSV_ASSIGNMENT_DELAY rf_23$D_IN;
	if (rf_24$EN) rf_24 <= `BSV_ASSIGNMENT_DELAY rf_24$D_IN;
	if (rf_25$EN) rf_25 <= `BSV_ASSIGNMENT_DELAY rf_25$D_IN;
	if (rf_26$EN) rf_26 <= `BSV_ASSIGNMENT_DELAY rf_26$D_IN;
	if (rf_27$EN) rf_27 <= `BSV_ASSIGNMENT_DELAY rf_27$D_IN;
	if (rf_28$EN) rf_28 <= `BSV_ASSIGNMENT_DELAY rf_28$D_IN;
	if (rf_29$EN) rf_29 <= `BSV_ASSIGNMENT_DELAY rf_29$D_IN;
	if (rf_3$EN) rf_3 <= `BSV_ASSIGNMENT_DELAY rf_3$D_IN;
	if (rf_30$EN) rf_30 <= `BSV_ASSIGNMENT_DELAY rf_30$D_IN;
	if (rf_31$EN) rf_31 <= `BSV_ASSIGNMENT_DELAY rf_31$D_IN;
	if (rf_4$EN) rf_4 <= `BSV_ASSIGNMENT_DELAY rf_4$D_IN;
	if (rf_5$EN) rf_5 <= `BSV_ASSIGNMENT_DELAY rf_5$D_IN;
	if (rf_6$EN) rf_6 <= `BSV_ASSIGNMENT_DELAY rf_6$D_IN;
	if (rf_7$EN) rf_7 <= `BSV_ASSIGNMENT_DELAY rf_7$D_IN;
	if (rf_8$EN) rf_8 <= `BSV_ASSIGNMENT_DELAY rf_8$D_IN;
	if (rf_9$EN) rf_9 <= `BSV_ASSIGNMENT_DELAY rf_9$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    rf_0 = 32'hAAAAAAAA;
    rf_1 = 32'hAAAAAAAA;
    rf_10 = 32'hAAAAAAAA;
    rf_11 = 32'hAAAAAAAA;
    rf_12 = 32'hAAAAAAAA;
    rf_13 = 32'hAAAAAAAA;
    rf_14 = 32'hAAAAAAAA;
    rf_15 = 32'hAAAAAAAA;
    rf_16 = 32'hAAAAAAAA;
    rf_17 = 32'hAAAAAAAA;
    rf_18 = 32'hAAAAAAAA;
    rf_19 = 32'hAAAAAAAA;
    rf_2 = 32'hAAAAAAAA;
    rf_20 = 32'hAAAAAAAA;
    rf_21 = 32'hAAAAAAAA;
    rf_22 = 32'hAAAAAAAA;
    rf_23 = 32'hAAAAAAAA;
    rf_24 = 32'hAAAAAAAA;
    rf_25 = 32'hAAAAAAAA;
    rf_26 = 32'hAAAAAAAA;
    rf_27 = 32'hAAAAAAAA;
    rf_28 = 32'hAAAAAAAA;
    rf_29 = 32'hAAAAAAAA;
    rf_3 = 32'hAAAAAAAA;
    rf_30 = 32'hAAAAAAAA;
    rf_31 = 32'hAAAAAAAA;
    rf_4 = 32'hAAAAAAAA;
    rf_5 = 32'hAAAAAAAA;
    rf_6 = 32'hAAAAAAAA;
    rf_7 = 32'hAAAAAAAA;
    rf_8 = 32'hAAAAAAAA;
    rf_9 = 32'hAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkRegFile

