//
// Generated by Bluespec Compiler, version 2023.07 (build 0eb551d)
//
// On Tue Jul  9 11:58:13 EDT 2024
//
//
// Ports:
// Name                         I/O  size props
// RDY_putMemResp                 O     1
// getMemReq                      O   539
// RDY_getMemReq                  O     1
// RDY_sendReqData                O     1
// getRespData                    O    32 reg
// RDY_getRespData                O     1 reg
// RDY_sendReqInstr               O     1
// getRespInstr                   O    32 reg
// RDY_getRespInstr               O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// putMemResp_resp                I   512 reg
// sendReqData_req                I    68
// sendReqInstr_req               I    68
// EN_putMemResp                  I     1
// EN_sendReqData                 I     1
// EN_sendReqInstr                I     1
// EN_getMemReq                   I     1
// EN_getRespData                 I     1
// EN_getRespInstr                I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkCacheUnified(CLK,
		      RST_N,

		      putMemResp_resp,
		      EN_putMemResp,
		      RDY_putMemResp,

		      EN_getMemReq,
		      getMemReq,
		      RDY_getMemReq,

		      sendReqData_req,
		      EN_sendReqData,
		      RDY_sendReqData,

		      EN_getRespData,
		      getRespData,
		      RDY_getRespData,

		      sendReqInstr_req,
		      EN_sendReqInstr,
		      RDY_sendReqInstr,

		      EN_getRespInstr,
		      getRespInstr,
		      RDY_getRespInstr);
  input  CLK;
  input  RST_N;

  // action method putMemResp
  input  [511 : 0] putMemResp_resp;
  input  EN_putMemResp;
  output RDY_putMemResp;

  // actionvalue method getMemReq
  input  EN_getMemReq;
  output [538 : 0] getMemReq;
  output RDY_getMemReq;

  // action method sendReqData
  input  [67 : 0] sendReqData_req;
  input  EN_sendReqData;
  output RDY_sendReqData;

  // actionvalue method getRespData
  input  EN_getRespData;
  output [31 : 0] getRespData;
  output RDY_getRespData;

  // action method sendReqInstr
  input  [67 : 0] sendReqInstr_req;
  input  EN_sendReqInstr;
  output RDY_sendReqInstr;

  // actionvalue method getRespInstr
  input  EN_getRespInstr;
  output [31 : 0] getRespInstr;
  output RDY_getRespInstr;

  // signals for module outputs
  wire [538 : 0] getMemReq;
  wire [31 : 0] getRespData, getRespInstr;
  wire RDY_getMemReq,
       RDY_getRespData,
       RDY_getRespInstr,
       RDY_putMemResp,
       RDY_sendReqData,
       RDY_sendReqInstr;

  // inlined wires
  reg [1 : 0] cache_data_serverAdapterA_writeWithResp$wget,
	      cache_data_serverAdapterB_writeWithResp$wget;
  wire [1 : 0] cache_data_serverAdapterA_s1_1$wget,
	       cache_data_serverAdapterB_s1_1$wget,
	       cache_metadata_serverAdapterA_s1_1$wget,
	       cache_metadata_serverAdapterA_writeWithResp$wget,
	       cache_metadata_serverAdapterB_s1_1$wget,
	       cache_metadata_serverAdapterB_writeWithResp$wget;
  wire cache_data_serverAdapterA_cnt_1$whas,
       cache_data_serverAdapterA_outData_enqw$whas,
       cache_data_serverAdapterA_writeWithResp$whas,
       cache_data_serverAdapterB_cnt_1$whas,
       cache_data_serverAdapterB_outData_enqw$whas,
       cache_data_serverAdapterB_writeWithResp$whas,
       cache_metadata_serverAdapterA_cnt_1$whas,
       cache_metadata_serverAdapterA_outData_enqw$whas,
       cache_metadata_serverAdapterA_writeWithResp$whas,
       cache_metadata_serverAdapterB_cnt_1$whas,
       cache_metadata_serverAdapterB_outData_enqw$whas,
       cache_metadata_serverAdapterB_s1_1$whas;

  // register cache_data_serverAdapterA_cnt
  reg [3 : 0] cache_data_serverAdapterA_cnt;
  wire [3 : 0] cache_data_serverAdapterA_cnt$D_IN;
  wire cache_data_serverAdapterA_cnt$EN;

  // register cache_data_serverAdapterA_s1
  reg [1 : 0] cache_data_serverAdapterA_s1;
  wire [1 : 0] cache_data_serverAdapterA_s1$D_IN;
  wire cache_data_serverAdapterA_s1$EN;

  // register cache_data_serverAdapterA_s2
  reg [1 : 0] cache_data_serverAdapterA_s2;
  wire [1 : 0] cache_data_serverAdapterA_s2$D_IN;
  wire cache_data_serverAdapterA_s2$EN;

  // register cache_data_serverAdapterB_cnt
  reg [3 : 0] cache_data_serverAdapterB_cnt;
  wire [3 : 0] cache_data_serverAdapterB_cnt$D_IN;
  wire cache_data_serverAdapterB_cnt$EN;

  // register cache_data_serverAdapterB_s1
  reg [1 : 0] cache_data_serverAdapterB_s1;
  wire [1 : 0] cache_data_serverAdapterB_s1$D_IN;
  wire cache_data_serverAdapterB_s1$EN;

  // register cache_data_serverAdapterB_s2
  reg [1 : 0] cache_data_serverAdapterB_s2;
  wire [1 : 0] cache_data_serverAdapterB_s2$D_IN;
  wire cache_data_serverAdapterB_s2$EN;

  // register cache_metadata_serverAdapterA_cnt
  reg [3 : 0] cache_metadata_serverAdapterA_cnt;
  wire [3 : 0] cache_metadata_serverAdapterA_cnt$D_IN;
  wire cache_metadata_serverAdapterA_cnt$EN;

  // register cache_metadata_serverAdapterA_s1
  reg [1 : 0] cache_metadata_serverAdapterA_s1;
  wire [1 : 0] cache_metadata_serverAdapterA_s1$D_IN;
  wire cache_metadata_serverAdapterA_s1$EN;

  // register cache_metadata_serverAdapterA_s2
  reg [1 : 0] cache_metadata_serverAdapterA_s2;
  wire [1 : 0] cache_metadata_serverAdapterA_s2$D_IN;
  wire cache_metadata_serverAdapterA_s2$EN;

  // register cache_metadata_serverAdapterB_cnt
  reg [3 : 0] cache_metadata_serverAdapterB_cnt;
  wire [3 : 0] cache_metadata_serverAdapterB_cnt$D_IN;
  wire cache_metadata_serverAdapterB_cnt$EN;

  // register cache_metadata_serverAdapterB_s1
  reg [1 : 0] cache_metadata_serverAdapterB_s1;
  wire [1 : 0] cache_metadata_serverAdapterB_s1$D_IN;
  wire cache_metadata_serverAdapterB_s1$EN;

  // register cache_metadata_serverAdapterB_s2
  reg [1 : 0] cache_metadata_serverAdapterB_s2;
  wire [1 : 0] cache_metadata_serverAdapterB_s2$D_IN;
  wire cache_metadata_serverAdapterB_s2$EN;

  // register clear_idx
  reg [6 : 0] clear_idx;
  wire [6 : 0] clear_idx$D_IN;
  wire clear_idx$EN;

  // register dataReq
  reg [67 : 0] dataReq;
  wire [67 : 0] dataReq$D_IN;
  wire dataReq$EN;

  // register dataStatus
  reg [2 : 0] dataStatus;
  reg [2 : 0] dataStatus$D_IN;
  wire dataStatus$EN;

  // register instReq
  reg [67 : 0] instReq;
  wire [67 : 0] instReq$D_IN;
  wire instReq$EN;

  // register instStatus
  reg [2 : 0] instStatus;
  reg [2 : 0] instStatus$D_IN;
  wire instStatus$EN;

  // register reqTypePriority
  reg reqTypePriority;
  wire reqTypePriority$D_IN, reqTypePriority$EN;

  // ports of submodule cache_data_memory
  reg [511 : 0] cache_data_memory$DIA, cache_data_memory$DIB;
  reg [63 : 0] cache_data_memory$WEA, cache_data_memory$WEB;
  reg [6 : 0] cache_data_memory$ADDRA;
  wire [511 : 0] cache_data_memory$DOA, cache_data_memory$DOB;
  wire [6 : 0] cache_data_memory$ADDRB;
  wire cache_data_memory$ENA, cache_data_memory$ENB;

  // ports of submodule cache_data_serverAdapterA_outData_beforeDeq
  wire cache_data_serverAdapterA_outData_beforeDeq$D_IN,
       cache_data_serverAdapterA_outData_beforeDeq$EN,
       cache_data_serverAdapterA_outData_beforeDeq$Q_OUT;

  // ports of submodule cache_data_serverAdapterA_outData_beforeEnq
  wire cache_data_serverAdapterA_outData_beforeEnq$D_IN,
       cache_data_serverAdapterA_outData_beforeEnq$EN,
       cache_data_serverAdapterA_outData_beforeEnq$Q_OUT;

  // ports of submodule cache_data_serverAdapterA_outData_ff
  wire [511 : 0] cache_data_serverAdapterA_outData_ff$D_IN,
		 cache_data_serverAdapterA_outData_ff$D_OUT;
  wire cache_data_serverAdapterA_outData_ff$CLR,
       cache_data_serverAdapterA_outData_ff$DEQ,
       cache_data_serverAdapterA_outData_ff$EMPTY_N,
       cache_data_serverAdapterA_outData_ff$ENQ,
       cache_data_serverAdapterA_outData_ff$FULL_N;

  // ports of submodule cache_data_serverAdapterB_outData_beforeDeq
  wire cache_data_serverAdapterB_outData_beforeDeq$D_IN,
       cache_data_serverAdapterB_outData_beforeDeq$EN,
       cache_data_serverAdapterB_outData_beforeDeq$Q_OUT;

  // ports of submodule cache_data_serverAdapterB_outData_beforeEnq
  wire cache_data_serverAdapterB_outData_beforeEnq$D_IN,
       cache_data_serverAdapterB_outData_beforeEnq$EN,
       cache_data_serverAdapterB_outData_beforeEnq$Q_OUT;

  // ports of submodule cache_data_serverAdapterB_outData_ff
  wire [511 : 0] cache_data_serverAdapterB_outData_ff$D_IN,
		 cache_data_serverAdapterB_outData_ff$D_OUT;
  wire cache_data_serverAdapterB_outData_ff$CLR,
       cache_data_serverAdapterB_outData_ff$DEQ,
       cache_data_serverAdapterB_outData_ff$EMPTY_N,
       cache_data_serverAdapterB_outData_ff$ENQ,
       cache_data_serverAdapterB_outData_ff$FULL_N;

  // ports of submodule cache_metadata_memory
  reg [20 : 0] cache_metadata_memory$DIA, cache_metadata_memory$DIB;
  reg [6 : 0] cache_metadata_memory$ADDRA;
  wire [20 : 0] cache_metadata_memory$DOA, cache_metadata_memory$DOB;
  wire [6 : 0] cache_metadata_memory$ADDRB;
  wire cache_metadata_memory$ENA,
       cache_metadata_memory$ENB,
       cache_metadata_memory$WEA,
       cache_metadata_memory$WEB;

  // ports of submodule cache_metadata_serverAdapterA_outData_beforeDeq
  wire cache_metadata_serverAdapterA_outData_beforeDeq$D_IN,
       cache_metadata_serverAdapterA_outData_beforeDeq$EN,
       cache_metadata_serverAdapterA_outData_beforeDeq$Q_OUT;

  // ports of submodule cache_metadata_serverAdapterA_outData_beforeEnq
  wire cache_metadata_serverAdapterA_outData_beforeEnq$D_IN,
       cache_metadata_serverAdapterA_outData_beforeEnq$EN,
       cache_metadata_serverAdapterA_outData_beforeEnq$Q_OUT;

  // ports of submodule cache_metadata_serverAdapterA_outData_ff
  wire [20 : 0] cache_metadata_serverAdapterA_outData_ff$D_IN,
		cache_metadata_serverAdapterA_outData_ff$D_OUT;
  wire cache_metadata_serverAdapterA_outData_ff$CLR,
       cache_metadata_serverAdapterA_outData_ff$DEQ,
       cache_metadata_serverAdapterA_outData_ff$EMPTY_N,
       cache_metadata_serverAdapterA_outData_ff$ENQ,
       cache_metadata_serverAdapterA_outData_ff$FULL_N;

  // ports of submodule cache_metadata_serverAdapterB_outData_beforeDeq
  wire cache_metadata_serverAdapterB_outData_beforeDeq$D_IN,
       cache_metadata_serverAdapterB_outData_beforeDeq$EN,
       cache_metadata_serverAdapterB_outData_beforeDeq$Q_OUT;

  // ports of submodule cache_metadata_serverAdapterB_outData_beforeEnq
  wire cache_metadata_serverAdapterB_outData_beforeEnq$D_IN,
       cache_metadata_serverAdapterB_outData_beforeEnq$EN,
       cache_metadata_serverAdapterB_outData_beforeEnq$Q_OUT;

  // ports of submodule cache_metadata_serverAdapterB_outData_ff
  wire [20 : 0] cache_metadata_serverAdapterB_outData_ff$D_IN,
		cache_metadata_serverAdapterB_outData_ff$D_OUT;
  wire cache_metadata_serverAdapterB_outData_ff$CLR,
       cache_metadata_serverAdapterB_outData_ff$DEQ,
       cache_metadata_serverAdapterB_outData_ff$EMPTY_N,
       cache_metadata_serverAdapterB_outData_ff$ENQ,
       cache_metadata_serverAdapterB_outData_ff$FULL_N;

  // ports of submodule memReqQ_d
  wire [538 : 0] memReqQ_d$D_IN, memReqQ_d$D_OUT;
  wire memReqQ_d$CLR,
       memReqQ_d$DEQ,
       memReqQ_d$EMPTY_N,
       memReqQ_d$ENQ,
       memReqQ_d$FULL_N;

  // ports of submodule memReqQ_i
  wire [538 : 0] memReqQ_i$D_IN, memReqQ_i$D_OUT;
  wire memReqQ_i$CLR,
       memReqQ_i$DEQ,
       memReqQ_i$EMPTY_N,
       memReqQ_i$ENQ,
       memReqQ_i$FULL_N;

  // ports of submodule memRespQ_d
  wire [511 : 0] memRespQ_d$D_IN, memRespQ_d$D_OUT;
  wire memRespQ_d$CLR,
       memRespQ_d$DEQ,
       memRespQ_d$EMPTY_N,
       memRespQ_d$ENQ,
       memRespQ_d$FULL_N;

  // ports of submodule memRespQ_i
  wire [511 : 0] memRespQ_i$D_IN, memRespQ_i$D_OUT;
  wire memRespQ_i$CLR,
       memRespQ_i$DEQ,
       memRespQ_i$EMPTY_N,
       memRespQ_i$ENQ,
       memRespQ_i$FULL_N;

  // ports of submodule reqTypeQ
  wire reqTypeQ$CLR,
       reqTypeQ$DEQ,
       reqTypeQ$D_IN,
       reqTypeQ$D_OUT,
       reqTypeQ$EMPTY_N,
       reqTypeQ$ENQ,
       reqTypeQ$FULL_N;

  // ports of submodule respQ_d
  wire [31 : 0] respQ_d$D_IN, respQ_d$D_OUT;
  wire respQ_d$CLR, respQ_d$DEQ, respQ_d$EMPTY_N, respQ_d$ENQ, respQ_d$FULL_N;

  // ports of submodule respQ_i
  wire [31 : 0] respQ_i$D_IN, respQ_i$D_OUT;
  wire respQ_i$CLR, respQ_i$DEQ, respQ_i$EMPTY_N, respQ_i$ENQ, respQ_i$FULL_N;

  // rule scheduling signals
  wire WILL_FIRE_RL_checkMiss_d,
       WILL_FIRE_RL_checkMiss_i,
       WILL_FIRE_RL_clear_bram,
       WILL_FIRE_RL_sendFillReq_d,
       WILL_FIRE_RL_sendFillReq_i,
       WILL_FIRE_RL_waitFillResp_d,
       WILL_FIRE_RL_waitFillResp_i;

  // inputs to muxes for submodule ports
  wire [538 : 0] MUX_memReqQ_d$enq_1__VAL_1,
		 MUX_memReqQ_d$enq_1__VAL_2,
		 MUX_memReqQ_i$enq_1__VAL_1,
		 MUX_memReqQ_i$enq_1__VAL_2;
  wire [511 : 0] MUX_cache_data_memory$a_put_3__VAL_1,
		 MUX_cache_data_memory$a_put_3__VAL_4,
		 MUX_cache_data_memory$b_put_3__VAL_1,
		 MUX_cache_data_memory$b_put_3__VAL_3;
  wire [20 : 0] MUX_cache_metadata_memory$a_put_3__VAL_1,
		MUX_cache_metadata_memory$a_put_3__VAL_4,
		MUX_cache_metadata_memory$b_put_3__VAL_1,
		MUX_cache_metadata_memory$b_put_3__VAL_3;
  wire [2 : 0] MUX_dataStatus$write_1__VAL_2, MUX_instStatus$write_1__VAL_2;
  wire [1 : 0] MUX_cache_data_serverAdapterA_writeWithResp$wset_1__VAL_1,
	       MUX_cache_data_serverAdapterB_writeWithResp$wset_1__VAL_1;
  wire MUX_cache_data_memory$b_put_1__SEL_1,
       MUX_cache_data_serverAdapterA_writeWithResp$wset_1__SEL_3,
       MUX_cache_metadata_serverAdapterA_writeWithResp$wset_1__SEL_1,
       MUX_dataStatus$write_1__SEL_1,
       MUX_memReqQ_d$enq_1__SEL_1,
       MUX_memReqQ_i$enq_1__SEL_1,
       MUX_respQ_d$enq_1__SEL_1,
       MUX_respQ_i$enq_1__SEL_1;

  // remaining internal signals
  reg [31 : 0] SEL_ARR_IF_cache_data_serverAdapterA_outData_f_ETC___d282,
	       SEL_ARR_IF_cache_data_serverAdapterB_outData_f_ETC___d377,
	       indexed_word__h15391,
	       indexed_word__h18628;
  wire [511 : 0] IF_dataReq_23_BITS_37_TO_34_53_EQ_15_17_THEN_I_ETC___d566,
		 IF_instReq_32_BITS_37_TO_34_58_EQ_15_39_THEN_I_ETC___d488,
		 x_data__h10087,
		 x_data__h13807;
  wire [447 : 0] IF_dataReq_23_BITS_37_TO_34_53_EQ_15_17_THEN_I_ETC___d561,
		 IF_instReq_32_BITS_37_TO_34_58_EQ_15_39_THEN_I_ETC___d483;
  wire [383 : 0] IF_dataReq_23_BITS_37_TO_34_53_EQ_15_17_THEN_I_ETC___d556,
		 IF_instReq_32_BITS_37_TO_34_58_EQ_15_39_THEN_I_ETC___d478;
  wire [319 : 0] IF_dataReq_23_BITS_37_TO_34_53_EQ_15_17_THEN_I_ETC___d551,
		 IF_instReq_32_BITS_37_TO_34_58_EQ_15_39_THEN_I_ETC___d473;
  wire [255 : 0] IF_dataReq_23_BITS_37_TO_34_53_EQ_15_17_THEN_I_ETC___d546,
		 IF_instReq_32_BITS_37_TO_34_58_EQ_15_39_THEN_I_ETC___d468;
  wire [191 : 0] IF_dataReq_23_BITS_37_TO_34_53_EQ_15_17_THEN_I_ETC___d541,
		 IF_instReq_32_BITS_37_TO_34_58_EQ_15_39_THEN_I_ETC___d463;
  wire [127 : 0] IF_dataReq_23_BITS_37_TO_34_53_EQ_15_17_THEN_I_ETC___d536,
		 IF_instReq_32_BITS_37_TO_34_58_EQ_15_39_THEN_I_ETC___d458;
  wire [63 : 0] w_en__h11841, w_en__h8146;
  wire [31 : 0] n__h16960, n__h20197, x__h12016, x__h8293;
  wire [25 : 0] x_addr__h10086, x_addr__h13806;
  wire [18 : 0] x__h11760, x__h8056;
  wire [8 : 0] x__h13685, x__h9963;
  wire [5 : 0] x__h11975, x__h8252;
  wire [3 : 0] cache_data_serverAdapterA_cnt_19_PLUS_IF_cache_ETC___d125,
	       cache_data_serverAdapterB_cnt_71_PLUS_IF_cache_ETC___d177,
	       cache_metadata_serverAdapterA_cnt_5_PLUS_IF_ca_ETC___d21,
	       cache_metadata_serverAdapterB_cnt_7_PLUS_IF_ca_ETC___d73;
  wire [1 : 0] IF_cache_metadata_serverAdapterA_outData_ff_i__ETC___d225,
	       IF_cache_metadata_serverAdapterB_outData_ff_i__ETC___d316;
  wire IF_NOT_IF_cache_metadata_serverAdapterA_outDat_ETC___d247,
       IF_NOT_IF_cache_metadata_serverAdapterB_outDat_ETC___d341,
       IF_cache_metadata_serverAdapterA_outData_ff_i__ETC___d234,
       IF_cache_metadata_serverAdapterB_outData_ff_i__ETC___d325,
       cache_data_serverAdapterA_cnt_19_SLT_4___d209,
       cache_data_serverAdapterB_cnt_71_SLT_4___d331,
       cache_metadata_serverAdapterA_cnt_5_SLT_4___d208,
       cache_metadata_serverAdapterA_outData_beforeDe_ETC___d249,
       cache_metadata_serverAdapterB_cnt_7_SLT_4___d330,
       cache_metadata_serverAdapterB_outData_beforeDe_ETC___d343,
       respQ_d_i_notFull__27_AND_dataReq_23_BITS_67_T_ETC___d334,
       respQ_i_i_notFull__36_AND_instReq_32_BITS_67_T_ETC___d240;

  // action method putMemResp
  assign RDY_putMemResp =
	     reqTypeQ$EMPTY_N &&
	     (reqTypeQ$D_OUT ? memRespQ_d$FULL_N : memRespQ_i$FULL_N) ;

  // actionvalue method getMemReq
  assign getMemReq = reqTypePriority ? memReqQ_d$D_OUT : memReqQ_i$D_OUT ;
  assign RDY_getMemReq =
	     reqTypePriority ?
	       memReqQ_d$EMPTY_N &&
	       (memReqQ_d$D_OUT[538] || reqTypeQ$FULL_N) :
	       memReqQ_i$EMPTY_N &&
	       (memReqQ_i$D_OUT[538] || reqTypeQ$FULL_N) ;

  // action method sendReqData
  assign RDY_sendReqData =
	     dataStatus == 3'd1 &&
	     cache_metadata_serverAdapterB_cnt_7_SLT_4___d330 &&
	     cache_data_serverAdapterB_cnt_71_SLT_4___d331 ;

  // actionvalue method getRespData
  assign getRespData = respQ_d$D_OUT ;
  assign RDY_getRespData = respQ_d$EMPTY_N ;

  // action method sendReqInstr
  assign RDY_sendReqInstr =
	     instStatus == 3'd1 &&
	     cache_metadata_serverAdapterA_cnt_5_SLT_4___d208 &&
	     cache_data_serverAdapterA_cnt_19_SLT_4___d209 ;

  // actionvalue method getRespInstr
  assign getRespInstr = respQ_i$D_OUT ;
  assign RDY_getRespInstr = respQ_i$EMPTY_N ;

  // submodule cache_data_memory
  BRAM2BE #(.PIPELINED(1'd1),
	    .ADDR_WIDTH(32'd7),
	    .DATA_WIDTH(32'd512),
	    .CHUNKSIZE(32'd8),
	    .WE_WIDTH(32'd64),
	    .MEMSIZE(8'd128)) cache_data_memory(.CLKA(CLK),
						.CLKB(CLK),
						.ADDRA(cache_data_memory$ADDRA),
						.ADDRB(cache_data_memory$ADDRB),
						.DIA(cache_data_memory$DIA),
						.DIB(cache_data_memory$DIB),
						.WEA(cache_data_memory$WEA),
						.WEB(cache_data_memory$WEB),
						.ENA(cache_data_memory$ENA),
						.ENB(cache_data_memory$ENB),
						.DOA(cache_data_memory$DOA),
						.DOB(cache_data_memory$DOB));

  // submodule cache_data_serverAdapterA_outData_beforeDeq
  RevertReg #(.width(32'd1),
	      .init(1'd1)) cache_data_serverAdapterA_outData_beforeDeq(.CLK(CLK),
								       .D_IN(cache_data_serverAdapterA_outData_beforeDeq$D_IN),
								       .EN(cache_data_serverAdapterA_outData_beforeDeq$EN),
								       .Q_OUT(cache_data_serverAdapterA_outData_beforeDeq$Q_OUT));

  // submodule cache_data_serverAdapterA_outData_beforeEnq
  RevertReg #(.width(32'd1),
	      .init(1'd1)) cache_data_serverAdapterA_outData_beforeEnq(.CLK(CLK),
								       .D_IN(cache_data_serverAdapterA_outData_beforeEnq$D_IN),
								       .EN(cache_data_serverAdapterA_outData_beforeEnq$EN),
								       .Q_OUT(cache_data_serverAdapterA_outData_beforeEnq$Q_OUT));

  // submodule cache_data_serverAdapterA_outData_ff
  SizedFIFO #(.p1width(32'd512),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(1'd0)) cache_data_serverAdapterA_outData_ff(.RST(RST_N),
								   .CLK(CLK),
								   .D_IN(cache_data_serverAdapterA_outData_ff$D_IN),
								   .ENQ(cache_data_serverAdapterA_outData_ff$ENQ),
								   .DEQ(cache_data_serverAdapterA_outData_ff$DEQ),
								   .CLR(cache_data_serverAdapterA_outData_ff$CLR),
								   .D_OUT(cache_data_serverAdapterA_outData_ff$D_OUT),
								   .FULL_N(cache_data_serverAdapterA_outData_ff$FULL_N),
								   .EMPTY_N(cache_data_serverAdapterA_outData_ff$EMPTY_N));

  // submodule cache_data_serverAdapterB_outData_beforeDeq
  RevertReg #(.width(32'd1),
	      .init(1'd1)) cache_data_serverAdapterB_outData_beforeDeq(.CLK(CLK),
								       .D_IN(cache_data_serverAdapterB_outData_beforeDeq$D_IN),
								       .EN(cache_data_serverAdapterB_outData_beforeDeq$EN),
								       .Q_OUT(cache_data_serverAdapterB_outData_beforeDeq$Q_OUT));

  // submodule cache_data_serverAdapterB_outData_beforeEnq
  RevertReg #(.width(32'd1),
	      .init(1'd1)) cache_data_serverAdapterB_outData_beforeEnq(.CLK(CLK),
								       .D_IN(cache_data_serverAdapterB_outData_beforeEnq$D_IN),
								       .EN(cache_data_serverAdapterB_outData_beforeEnq$EN),
								       .Q_OUT(cache_data_serverAdapterB_outData_beforeEnq$Q_OUT));

  // submodule cache_data_serverAdapterB_outData_ff
  SizedFIFO #(.p1width(32'd512),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(1'd0)) cache_data_serverAdapterB_outData_ff(.RST(RST_N),
								   .CLK(CLK),
								   .D_IN(cache_data_serverAdapterB_outData_ff$D_IN),
								   .ENQ(cache_data_serverAdapterB_outData_ff$ENQ),
								   .DEQ(cache_data_serverAdapterB_outData_ff$DEQ),
								   .CLR(cache_data_serverAdapterB_outData_ff$CLR),
								   .D_OUT(cache_data_serverAdapterB_outData_ff$D_OUT),
								   .FULL_N(cache_data_serverAdapterB_outData_ff$FULL_N),
								   .EMPTY_N(cache_data_serverAdapterB_outData_ff$EMPTY_N));

  // submodule cache_metadata_memory
  BRAM2 #(.PIPELINED(1'd1),
	  .ADDR_WIDTH(32'd7),
	  .DATA_WIDTH(32'd21),
	  .MEMSIZE(8'd128)) cache_metadata_memory(.CLKA(CLK),
						  .CLKB(CLK),
						  .ADDRA(cache_metadata_memory$ADDRA),
						  .ADDRB(cache_metadata_memory$ADDRB),
						  .DIA(cache_metadata_memory$DIA),
						  .DIB(cache_metadata_memory$DIB),
						  .WEA(cache_metadata_memory$WEA),
						  .WEB(cache_metadata_memory$WEB),
						  .ENA(cache_metadata_memory$ENA),
						  .ENB(cache_metadata_memory$ENB),
						  .DOA(cache_metadata_memory$DOA),
						  .DOB(cache_metadata_memory$DOB));

  // submodule cache_metadata_serverAdapterA_outData_beforeDeq
  RevertReg #(.width(32'd1),
	      .init(1'd1)) cache_metadata_serverAdapterA_outData_beforeDeq(.CLK(CLK),
									   .D_IN(cache_metadata_serverAdapterA_outData_beforeDeq$D_IN),
									   .EN(cache_metadata_serverAdapterA_outData_beforeDeq$EN),
									   .Q_OUT(cache_metadata_serverAdapterA_outData_beforeDeq$Q_OUT));

  // submodule cache_metadata_serverAdapterA_outData_beforeEnq
  RevertReg #(.width(32'd1),
	      .init(1'd1)) cache_metadata_serverAdapterA_outData_beforeEnq(.CLK(CLK),
									   .D_IN(cache_metadata_serverAdapterA_outData_beforeEnq$D_IN),
									   .EN(cache_metadata_serverAdapterA_outData_beforeEnq$EN),
									   .Q_OUT(cache_metadata_serverAdapterA_outData_beforeEnq$Q_OUT));

  // submodule cache_metadata_serverAdapterA_outData_ff
  SizedFIFO #(.p1width(32'd21),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(1'd0)) cache_metadata_serverAdapterA_outData_ff(.RST(RST_N),
								       .CLK(CLK),
								       .D_IN(cache_metadata_serverAdapterA_outData_ff$D_IN),
								       .ENQ(cache_metadata_serverAdapterA_outData_ff$ENQ),
								       .DEQ(cache_metadata_serverAdapterA_outData_ff$DEQ),
								       .CLR(cache_metadata_serverAdapterA_outData_ff$CLR),
								       .D_OUT(cache_metadata_serverAdapterA_outData_ff$D_OUT),
								       .FULL_N(cache_metadata_serverAdapterA_outData_ff$FULL_N),
								       .EMPTY_N(cache_metadata_serverAdapterA_outData_ff$EMPTY_N));

  // submodule cache_metadata_serverAdapterB_outData_beforeDeq
  RevertReg #(.width(32'd1),
	      .init(1'd1)) cache_metadata_serverAdapterB_outData_beforeDeq(.CLK(CLK),
									   .D_IN(cache_metadata_serverAdapterB_outData_beforeDeq$D_IN),
									   .EN(cache_metadata_serverAdapterB_outData_beforeDeq$EN),
									   .Q_OUT(cache_metadata_serverAdapterB_outData_beforeDeq$Q_OUT));

  // submodule cache_metadata_serverAdapterB_outData_beforeEnq
  RevertReg #(.width(32'd1),
	      .init(1'd1)) cache_metadata_serverAdapterB_outData_beforeEnq(.CLK(CLK),
									   .D_IN(cache_metadata_serverAdapterB_outData_beforeEnq$D_IN),
									   .EN(cache_metadata_serverAdapterB_outData_beforeEnq$EN),
									   .Q_OUT(cache_metadata_serverAdapterB_outData_beforeEnq$Q_OUT));

  // submodule cache_metadata_serverAdapterB_outData_ff
  SizedFIFO #(.p1width(32'd21),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(1'd0)) cache_metadata_serverAdapterB_outData_ff(.RST(RST_N),
								       .CLK(CLK),
								       .D_IN(cache_metadata_serverAdapterB_outData_ff$D_IN),
								       .ENQ(cache_metadata_serverAdapterB_outData_ff$ENQ),
								       .DEQ(cache_metadata_serverAdapterB_outData_ff$DEQ),
								       .CLR(cache_metadata_serverAdapterB_outData_ff$CLR),
								       .D_OUT(cache_metadata_serverAdapterB_outData_ff$D_OUT),
								       .FULL_N(cache_metadata_serverAdapterB_outData_ff$FULL_N),
								       .EMPTY_N(cache_metadata_serverAdapterB_outData_ff$EMPTY_N));

  // submodule memReqQ_d
  FIFO2 #(.width(32'd539), .guarded(1'd1)) memReqQ_d(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(memReqQ_d$D_IN),
						     .ENQ(memReqQ_d$ENQ),
						     .DEQ(memReqQ_d$DEQ),
						     .CLR(memReqQ_d$CLR),
						     .D_OUT(memReqQ_d$D_OUT),
						     .FULL_N(memReqQ_d$FULL_N),
						     .EMPTY_N(memReqQ_d$EMPTY_N));

  // submodule memReqQ_i
  FIFO2 #(.width(32'd539), .guarded(1'd1)) memReqQ_i(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(memReqQ_i$D_IN),
						     .ENQ(memReqQ_i$ENQ),
						     .DEQ(memReqQ_i$DEQ),
						     .CLR(memReqQ_i$CLR),
						     .D_OUT(memReqQ_i$D_OUT),
						     .FULL_N(memReqQ_i$FULL_N),
						     .EMPTY_N(memReqQ_i$EMPTY_N));

  // submodule memRespQ_d
  FIFO2 #(.width(32'd512), .guarded(1'd1)) memRespQ_d(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(memRespQ_d$D_IN),
						      .ENQ(memRespQ_d$ENQ),
						      .DEQ(memRespQ_d$DEQ),
						      .CLR(memRespQ_d$CLR),
						      .D_OUT(memRespQ_d$D_OUT),
						      .FULL_N(memRespQ_d$FULL_N),
						      .EMPTY_N(memRespQ_d$EMPTY_N));

  // submodule memRespQ_i
  FIFO2 #(.width(32'd512), .guarded(1'd1)) memRespQ_i(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(memRespQ_i$D_IN),
						      .ENQ(memRespQ_i$ENQ),
						      .DEQ(memRespQ_i$DEQ),
						      .CLR(memRespQ_i$CLR),
						      .D_OUT(memRespQ_i$D_OUT),
						      .FULL_N(memRespQ_i$FULL_N),
						      .EMPTY_N(memRespQ_i$EMPTY_N));

  // submodule reqTypeQ
  FIFO2 #(.width(32'd1), .guarded(1'd1)) reqTypeQ(.RST(RST_N),
						  .CLK(CLK),
						  .D_IN(reqTypeQ$D_IN),
						  .ENQ(reqTypeQ$ENQ),
						  .DEQ(reqTypeQ$DEQ),
						  .CLR(reqTypeQ$CLR),
						  .D_OUT(reqTypeQ$D_OUT),
						  .FULL_N(reqTypeQ$FULL_N),
						  .EMPTY_N(reqTypeQ$EMPTY_N));

  // submodule respQ_d
  FIFO2 #(.width(32'd32), .guarded(1'd1)) respQ_d(.RST(RST_N),
						  .CLK(CLK),
						  .D_IN(respQ_d$D_IN),
						  .ENQ(respQ_d$ENQ),
						  .DEQ(respQ_d$DEQ),
						  .CLR(respQ_d$CLR),
						  .D_OUT(respQ_d$D_OUT),
						  .FULL_N(respQ_d$FULL_N),
						  .EMPTY_N(respQ_d$EMPTY_N));

  // submodule respQ_i
  FIFO2 #(.width(32'd32), .guarded(1'd1)) respQ_i(.RST(RST_N),
						  .CLK(CLK),
						  .D_IN(respQ_i$D_IN),
						  .ENQ(respQ_i$ENQ),
						  .DEQ(respQ_i$DEQ),
						  .CLR(respQ_i$CLR),
						  .D_OUT(respQ_i$D_OUT),
						  .FULL_N(respQ_i$FULL_N),
						  .EMPTY_N(respQ_i$EMPTY_N));

  // rule RL_sendFillReq_i
  assign WILL_FIRE_RL_sendFillReq_i = memReqQ_i$FULL_N && instStatus == 3'd3 ;

  // rule RL_sendFillReq_d
  assign WILL_FIRE_RL_sendFillReq_d = memReqQ_d$FULL_N && dataStatus == 3'd3 ;

  // rule RL_waitFillResp_i
  assign WILL_FIRE_RL_waitFillResp_i =
	     cache_metadata_serverAdapterA_cnt_5_SLT_4___d208 &&
	     cache_data_serverAdapterA_cnt_19_SLT_4___d209 &&
	     respQ_i$FULL_N &&
	     memRespQ_i$EMPTY_N &&
	     instStatus == 3'd4 ;

  // rule RL_waitFillResp_d
  assign WILL_FIRE_RL_waitFillResp_d =
	     cache_metadata_serverAdapterB_cnt_7_SLT_4___d330 &&
	     cache_data_serverAdapterB_cnt_71_SLT_4___d331 &&
	     respQ_d$FULL_N &&
	     memRespQ_d$EMPTY_N &&
	     dataStatus == 3'd4 ;

  // rule RL_checkMiss_i
  assign WILL_FIRE_RL_checkMiss_i =
	     cache_metadata_serverAdapterA_outData_beforeDe_ETC___d249 &&
	     instStatus == 3'd2 ;

  // rule RL_checkMiss_d
  assign WILL_FIRE_RL_checkMiss_d =
	     cache_metadata_serverAdapterB_outData_beforeDe_ETC___d343 &&
	     dataStatus == 3'd2 ;

  // rule RL_clear_bram
  assign WILL_FIRE_RL_clear_bram =
	     cache_metadata_serverAdapterA_cnt_5_SLT_4___d208 &&
	     cache_data_serverAdapterA_cnt_19_SLT_4___d209 &&
	     instStatus == 3'd0 ;

  // inputs to muxes for submodule ports
  assign MUX_cache_data_memory$b_put_1__SEL_1 =
	     WILL_FIRE_RL_checkMiss_d &&
	     IF_cache_metadata_serverAdapterB_outData_ff_i__ETC___d316 !=
	     2'd0 &&
	     IF_cache_metadata_serverAdapterB_outData_ff_i__ETC___d325 &&
	     dataReq[67:64] != 4'b0 ;
  assign MUX_cache_data_serverAdapterA_writeWithResp$wset_1__SEL_3 =
	     WILL_FIRE_RL_waitFillResp_i || WILL_FIRE_RL_clear_bram ;
  assign MUX_cache_metadata_serverAdapterA_writeWithResp$wset_1__SEL_1 =
	     WILL_FIRE_RL_checkMiss_i &&
	     IF_cache_metadata_serverAdapterA_outData_ff_i__ETC___d225 !=
	     2'd0 &&
	     IF_cache_metadata_serverAdapterA_outData_ff_i__ETC___d234 &&
	     instReq[67:64] != 4'b0 ;
  assign MUX_dataStatus$write_1__SEL_1 =
	     WILL_FIRE_RL_clear_bram && clear_idx == 7'd127 ;
  assign MUX_memReqQ_d$enq_1__SEL_1 =
	     WILL_FIRE_RL_checkMiss_d &&
	     !IF_cache_metadata_serverAdapterB_outData_ff_i__ETC___d325 &&
	     IF_cache_metadata_serverAdapterB_outData_ff_i__ETC___d316 ==
	     2'd2 ;
  assign MUX_memReqQ_i$enq_1__SEL_1 =
	     WILL_FIRE_RL_checkMiss_i &&
	     !IF_cache_metadata_serverAdapterA_outData_ff_i__ETC___d234 &&
	     IF_cache_metadata_serverAdapterA_outData_ff_i__ETC___d225 ==
	     2'd2 ;
  assign MUX_respQ_d$enq_1__SEL_1 =
	     WILL_FIRE_RL_checkMiss_d &&
	     IF_cache_metadata_serverAdapterB_outData_ff_i__ETC___d316 !=
	     2'd0 &&
	     IF_cache_metadata_serverAdapterB_outData_ff_i__ETC___d325 ;
  assign MUX_respQ_i$enq_1__SEL_1 =
	     WILL_FIRE_RL_checkMiss_i &&
	     IF_cache_metadata_serverAdapterA_outData_ff_i__ETC___d225 !=
	     2'd0 &&
	     IF_cache_metadata_serverAdapterA_outData_ff_i__ETC___d234 ;
  assign MUX_cache_data_memory$a_put_3__VAL_1 =
	     { 480'd0, x__h8293 } << x__h9963 ;
  assign MUX_cache_data_memory$a_put_3__VAL_4 =
	     (instReq[67:64] == 4'b0) ?
	       memRespQ_i$D_OUT :
	       IF_instReq_32_BITS_37_TO_34_58_EQ_15_39_THEN_I_ETC___d488 ;
  assign MUX_cache_data_memory$b_put_3__VAL_1 =
	     { 480'd0, x__h12016 } << x__h13685 ;
  assign MUX_cache_data_memory$b_put_3__VAL_3 =
	     (dataReq[67:64] == 4'b0) ?
	       memRespQ_d$D_OUT :
	       IF_dataReq_23_BITS_37_TO_34_53_EQ_15_17_THEN_I_ETC___d566 ;
  assign MUX_cache_data_serverAdapterA_writeWithResp$wset_1__VAL_1 =
	     { w_en__h8146 != 64'd0, w_en__h8146 == 64'd0 } ;
  assign MUX_cache_data_serverAdapterB_writeWithResp$wset_1__VAL_1 =
	     { w_en__h11841 != 64'd0, w_en__h11841 == 64'd0 } ;
  assign MUX_cache_metadata_memory$a_put_3__VAL_1 = { 2'd2, x__h8056 } ;
  assign MUX_cache_metadata_memory$a_put_3__VAL_4 =
	     { (instReq[67:64] == 4'b0) ? 2'd1 : 2'd2, instReq[63:45] } ;
  assign MUX_cache_metadata_memory$b_put_3__VAL_1 = { 2'd2, x__h11760 } ;
  assign MUX_cache_metadata_memory$b_put_3__VAL_3 =
	     { (dataReq[67:64] == 4'b0) ? 2'd1 : 2'd2, dataReq[63:45] } ;
  assign MUX_dataStatus$write_1__VAL_2 =
	     (IF_cache_metadata_serverAdapterB_outData_ff_i__ETC___d316 !=
	      2'd0 &&
	      IF_cache_metadata_serverAdapterB_outData_ff_i__ETC___d325) ?
	       3'd1 :
	       3'd3 ;
  assign MUX_instStatus$write_1__VAL_2 =
	     (IF_cache_metadata_serverAdapterA_outData_ff_i__ETC___d225 !=
	      2'd0 &&
	      IF_cache_metadata_serverAdapterA_outData_ff_i__ETC___d234) ?
	       3'd1 :
	       3'd3 ;
  assign MUX_memReqQ_d$enq_1__VAL_1 =
	     { 1'b1, x_addr__h13806, x_data__h13807 } ;
  assign MUX_memReqQ_d$enq_1__VAL_2 =
	     { 1'b0,
	       dataReq[63:0],
	       474'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA } ;
  assign MUX_memReqQ_i$enq_1__VAL_1 =
	     { 1'b1, x_addr__h10086, x_data__h10087 } ;
  assign MUX_memReqQ_i$enq_1__VAL_2 =
	     { 1'b0,
	       instReq[63:0],
	       474'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA } ;

  // inlined wires
  assign cache_metadata_serverAdapterA_outData_enqw$whas =
	     (!cache_metadata_serverAdapterA_s2[0] ||
	      cache_metadata_serverAdapterA_outData_ff$FULL_N) &&
	     cache_metadata_serverAdapterA_s2[1] &&
	     cache_metadata_serverAdapterA_s2[0] ;
  assign cache_metadata_serverAdapterA_cnt_1$whas =
	     (MUX_cache_metadata_serverAdapterA_writeWithResp$wset_1__SEL_1 ||
	      EN_sendReqInstr ||
	      WILL_FIRE_RL_waitFillResp_i ||
	      WILL_FIRE_RL_clear_bram) &&
	     (!cache_metadata_serverAdapterA_writeWithResp$wget[1] ||
	      cache_metadata_serverAdapterA_writeWithResp$wget[0]) ;
  assign cache_metadata_serverAdapterA_writeWithResp$wget =
	     EN_sendReqInstr ? 2'd0 : 2'd2 ;
  assign cache_metadata_serverAdapterA_writeWithResp$whas =
	     MUX_cache_metadata_serverAdapterA_writeWithResp$wset_1__SEL_1 ||
	     EN_sendReqInstr ||
	     WILL_FIRE_RL_waitFillResp_i ||
	     WILL_FIRE_RL_clear_bram ;
  assign cache_metadata_serverAdapterA_s1_1$wget =
	     { 1'd1,
	       !cache_metadata_serverAdapterA_writeWithResp$wget[1] ||
	       cache_metadata_serverAdapterA_writeWithResp$wget[0] } ;
  assign cache_metadata_serverAdapterB_outData_enqw$whas =
	     (!cache_metadata_serverAdapterB_s2[0] ||
	      cache_metadata_serverAdapterB_outData_ff$FULL_N) &&
	     cache_metadata_serverAdapterB_s2[1] &&
	     cache_metadata_serverAdapterB_s2[0] ;
  assign cache_metadata_serverAdapterB_cnt_1$whas =
	     (MUX_cache_data_memory$b_put_1__SEL_1 || EN_sendReqData ||
	      WILL_FIRE_RL_waitFillResp_d) &&
	     (!cache_metadata_serverAdapterB_writeWithResp$wget[1] ||
	      cache_metadata_serverAdapterB_writeWithResp$wget[0]) ;
  assign cache_metadata_serverAdapterB_writeWithResp$wget =
	     EN_sendReqData ? 2'd0 : 2'd2 ;
  assign cache_metadata_serverAdapterB_s1_1$wget =
	     { 1'd1,
	       !cache_metadata_serverAdapterB_writeWithResp$wget[1] ||
	       cache_metadata_serverAdapterB_writeWithResp$wget[0] } ;
  assign cache_metadata_serverAdapterB_s1_1$whas =
	     MUX_cache_data_memory$b_put_1__SEL_1 || EN_sendReqData ||
	     WILL_FIRE_RL_waitFillResp_d ;
  assign cache_data_serverAdapterA_outData_enqw$whas =
	     (!cache_data_serverAdapterA_s2[0] ||
	      cache_data_serverAdapterA_outData_ff$FULL_N) &&
	     cache_data_serverAdapterA_s2[1] &&
	     cache_data_serverAdapterA_s2[0] ;
  assign cache_data_serverAdapterA_cnt_1$whas =
	     (MUX_cache_metadata_serverAdapterA_writeWithResp$wset_1__SEL_1 ||
	      EN_sendReqInstr ||
	      WILL_FIRE_RL_waitFillResp_i ||
	      WILL_FIRE_RL_clear_bram) &&
	     (!cache_data_serverAdapterA_writeWithResp$wget[1] ||
	      cache_data_serverAdapterA_writeWithResp$wget[0]) ;
  always@(MUX_cache_metadata_serverAdapterA_writeWithResp$wset_1__SEL_1 or
	  MUX_cache_data_serverAdapterA_writeWithResp$wset_1__VAL_1 or
	  EN_sendReqInstr or
	  MUX_cache_data_serverAdapterA_writeWithResp$wset_1__SEL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_cache_metadata_serverAdapterA_writeWithResp$wset_1__SEL_1:
	  cache_data_serverAdapterA_writeWithResp$wget =
	      MUX_cache_data_serverAdapterA_writeWithResp$wset_1__VAL_1;
      EN_sendReqInstr: cache_data_serverAdapterA_writeWithResp$wget = 2'd1;
      MUX_cache_data_serverAdapterA_writeWithResp$wset_1__SEL_3:
	  cache_data_serverAdapterA_writeWithResp$wget = 2'd2;
      default: cache_data_serverAdapterA_writeWithResp$wget =
		   2'b10 /* unspecified value */ ;
    endcase
  end
  assign cache_data_serverAdapterA_writeWithResp$whas =
	     MUX_cache_metadata_serverAdapterA_writeWithResp$wset_1__SEL_1 ||
	     EN_sendReqInstr ||
	     WILL_FIRE_RL_waitFillResp_i ||
	     WILL_FIRE_RL_clear_bram ;
  assign cache_data_serverAdapterA_s1_1$wget =
	     { 1'd1,
	       !cache_data_serverAdapterA_writeWithResp$wget[1] ||
	       cache_data_serverAdapterA_writeWithResp$wget[0] } ;
  assign cache_data_serverAdapterB_outData_enqw$whas =
	     (!cache_data_serverAdapterB_s2[0] ||
	      cache_data_serverAdapterB_outData_ff$FULL_N) &&
	     cache_data_serverAdapterB_s2[1] &&
	     cache_data_serverAdapterB_s2[0] ;
  assign cache_data_serverAdapterB_cnt_1$whas =
	     (MUX_cache_data_memory$b_put_1__SEL_1 || EN_sendReqData ||
	      WILL_FIRE_RL_waitFillResp_d) &&
	     (!cache_data_serverAdapterB_writeWithResp$wget[1] ||
	      cache_data_serverAdapterB_writeWithResp$wget[0]) ;
  always@(MUX_cache_data_memory$b_put_1__SEL_1 or
	  MUX_cache_data_serverAdapterB_writeWithResp$wset_1__VAL_1 or
	  EN_sendReqData or WILL_FIRE_RL_waitFillResp_d)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_cache_data_memory$b_put_1__SEL_1:
	  cache_data_serverAdapterB_writeWithResp$wget =
	      MUX_cache_data_serverAdapterB_writeWithResp$wset_1__VAL_1;
      EN_sendReqData: cache_data_serverAdapterB_writeWithResp$wget = 2'd1;
      WILL_FIRE_RL_waitFillResp_d:
	  cache_data_serverAdapterB_writeWithResp$wget = 2'd2;
      default: cache_data_serverAdapterB_writeWithResp$wget =
		   2'b10 /* unspecified value */ ;
    endcase
  end
  assign cache_data_serverAdapterB_writeWithResp$whas =
	     MUX_cache_data_memory$b_put_1__SEL_1 || EN_sendReqData ||
	     WILL_FIRE_RL_waitFillResp_d ;
  assign cache_data_serverAdapterB_s1_1$wget =
	     { 1'd1,
	       !cache_data_serverAdapterB_writeWithResp$wget[1] ||
	       cache_data_serverAdapterB_writeWithResp$wget[0] } ;

  // register cache_data_serverAdapterA_cnt
  assign cache_data_serverAdapterA_cnt$D_IN =
	     cache_data_serverAdapterA_cnt_19_PLUS_IF_cache_ETC___d125 ;
  assign cache_data_serverAdapterA_cnt$EN =
	     cache_data_serverAdapterA_cnt_1$whas ||
	     WILL_FIRE_RL_checkMiss_i ;

  // register cache_data_serverAdapterA_s1
  assign cache_data_serverAdapterA_s1$D_IN =
	     cache_data_serverAdapterA_writeWithResp$whas ?
	       cache_data_serverAdapterA_s1_1$wget :
	       2'd0 ;
  assign cache_data_serverAdapterA_s1$EN = 1'd1 ;

  // register cache_data_serverAdapterA_s2
  assign cache_data_serverAdapterA_s2$D_IN = cache_data_serverAdapterA_s1 ;
  assign cache_data_serverAdapterA_s2$EN =
	     cache_data_serverAdapterA_s1[1] ||
	     cache_data_serverAdapterA_s2[1] ;

  // register cache_data_serverAdapterB_cnt
  assign cache_data_serverAdapterB_cnt$D_IN =
	     cache_data_serverAdapterB_cnt_71_PLUS_IF_cache_ETC___d177 ;
  assign cache_data_serverAdapterB_cnt$EN =
	     cache_data_serverAdapterB_cnt_1$whas ||
	     WILL_FIRE_RL_checkMiss_d ;

  // register cache_data_serverAdapterB_s1
  assign cache_data_serverAdapterB_s1$D_IN =
	     cache_data_serverAdapterB_writeWithResp$whas ?
	       cache_data_serverAdapterB_s1_1$wget :
	       2'd0 ;
  assign cache_data_serverAdapterB_s1$EN = 1'd1 ;

  // register cache_data_serverAdapterB_s2
  assign cache_data_serverAdapterB_s2$D_IN = cache_data_serverAdapterB_s1 ;
  assign cache_data_serverAdapterB_s2$EN =
	     cache_data_serverAdapterB_s1[1] ||
	     cache_data_serverAdapterB_s2[1] ;

  // register cache_metadata_serverAdapterA_cnt
  assign cache_metadata_serverAdapterA_cnt$D_IN =
	     cache_metadata_serverAdapterA_cnt_5_PLUS_IF_ca_ETC___d21 ;
  assign cache_metadata_serverAdapterA_cnt$EN =
	     cache_metadata_serverAdapterA_cnt_1$whas ||
	     WILL_FIRE_RL_checkMiss_i ;

  // register cache_metadata_serverAdapterA_s1
  assign cache_metadata_serverAdapterA_s1$D_IN =
	     cache_metadata_serverAdapterA_writeWithResp$whas ?
	       cache_metadata_serverAdapterA_s1_1$wget :
	       2'd0 ;
  assign cache_metadata_serverAdapterA_s1$EN = 1'd1 ;

  // register cache_metadata_serverAdapterA_s2
  assign cache_metadata_serverAdapterA_s2$D_IN =
	     cache_metadata_serverAdapterA_s1 ;
  assign cache_metadata_serverAdapterA_s2$EN =
	     cache_metadata_serverAdapterA_s1[1] ||
	     cache_metadata_serverAdapterA_s2[1] ;

  // register cache_metadata_serverAdapterB_cnt
  assign cache_metadata_serverAdapterB_cnt$D_IN =
	     cache_metadata_serverAdapterB_cnt_7_PLUS_IF_ca_ETC___d73 ;
  assign cache_metadata_serverAdapterB_cnt$EN =
	     cache_metadata_serverAdapterB_cnt_1$whas ||
	     WILL_FIRE_RL_checkMiss_d ;

  // register cache_metadata_serverAdapterB_s1
  assign cache_metadata_serverAdapterB_s1$D_IN =
	     cache_metadata_serverAdapterB_s1_1$whas ?
	       cache_metadata_serverAdapterB_s1_1$wget :
	       2'd0 ;
  assign cache_metadata_serverAdapterB_s1$EN = 1'd1 ;

  // register cache_metadata_serverAdapterB_s2
  assign cache_metadata_serverAdapterB_s2$D_IN =
	     cache_metadata_serverAdapterB_s1 ;
  assign cache_metadata_serverAdapterB_s2$EN =
	     cache_metadata_serverAdapterB_s1[1] ||
	     cache_metadata_serverAdapterB_s2[1] ;

  // register clear_idx
  assign clear_idx$D_IN = clear_idx + 7'd1 ;
  assign clear_idx$EN = WILL_FIRE_RL_clear_bram && clear_idx != 7'd127 ;

  // register dataReq
  assign dataReq$D_IN = sendReqData_req ;
  assign dataReq$EN = EN_sendReqData ;

  // register dataStatus
  always@(MUX_dataStatus$write_1__SEL_1 or
	  WILL_FIRE_RL_checkMiss_d or
	  MUX_dataStatus$write_1__VAL_2 or
	  WILL_FIRE_RL_waitFillResp_d or
	  WILL_FIRE_RL_sendFillReq_d or EN_sendReqData)
  case (1'b1)
    MUX_dataStatus$write_1__SEL_1: dataStatus$D_IN = 3'd1;
    WILL_FIRE_RL_checkMiss_d: dataStatus$D_IN = MUX_dataStatus$write_1__VAL_2;
    WILL_FIRE_RL_waitFillResp_d: dataStatus$D_IN = 3'd1;
    WILL_FIRE_RL_sendFillReq_d: dataStatus$D_IN = 3'd4;
    EN_sendReqData: dataStatus$D_IN = 3'd2;
    default: dataStatus$D_IN = 3'b010 /* unspecified value */ ;
  endcase
  assign dataStatus$EN =
	     WILL_FIRE_RL_clear_bram && clear_idx == 7'd127 ||
	     WILL_FIRE_RL_checkMiss_d ||
	     WILL_FIRE_RL_waitFillResp_d ||
	     EN_sendReqData ||
	     WILL_FIRE_RL_sendFillReq_d ;

  // register instReq
  assign instReq$D_IN = sendReqInstr_req ;
  assign instReq$EN = EN_sendReqInstr ;

  // register instStatus
  always@(WILL_FIRE_RL_checkMiss_i or
	  MUX_instStatus$write_1__VAL_2 or
	  MUX_dataStatus$write_1__SEL_1 or
	  WILL_FIRE_RL_waitFillResp_i or
	  EN_sendReqInstr or WILL_FIRE_RL_sendFillReq_i)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_checkMiss_i:
	  instStatus$D_IN = MUX_instStatus$write_1__VAL_2;
      MUX_dataStatus$write_1__SEL_1 || WILL_FIRE_RL_waitFillResp_i:
	  instStatus$D_IN = 3'd1;
      EN_sendReqInstr: instStatus$D_IN = 3'd2;
      WILL_FIRE_RL_sendFillReq_i: instStatus$D_IN = 3'd4;
      default: instStatus$D_IN = 3'b010 /* unspecified value */ ;
    endcase
  end
  assign instStatus$EN =
	     WILL_FIRE_RL_clear_bram && clear_idx == 7'd127 ||
	     WILL_FIRE_RL_checkMiss_i ||
	     WILL_FIRE_RL_waitFillResp_i ||
	     EN_sendReqInstr ||
	     WILL_FIRE_RL_sendFillReq_i ;

  // register reqTypePriority
  assign reqTypePriority$D_IN = !reqTypePriority ;
  assign reqTypePriority$EN = 1'd1 ;

  // submodule cache_data_memory
  always@(MUX_cache_metadata_serverAdapterA_writeWithResp$wset_1__SEL_1 or
	  WILL_FIRE_RL_waitFillResp_i or
	  instReq or
	  EN_sendReqInstr or
	  sendReqInstr_req or WILL_FIRE_RL_clear_bram or clear_idx)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_cache_metadata_serverAdapterA_writeWithResp$wset_1__SEL_1 ||
      WILL_FIRE_RL_waitFillResp_i:
	  cache_data_memory$ADDRA = instReq[44:38];
      EN_sendReqInstr: cache_data_memory$ADDRA = sendReqInstr_req[44:38];
      WILL_FIRE_RL_clear_bram: cache_data_memory$ADDRA = clear_idx;
      default: cache_data_memory$ADDRA = 7'b0101010 /* unspecified value */ ;
    endcase
  end
  assign cache_data_memory$ADDRB =
	     (MUX_cache_data_memory$b_put_1__SEL_1 ||
	      WILL_FIRE_RL_waitFillResp_d) ?
	       dataReq[44:38] :
	       sendReqData_req[44:38] ;
  always@(MUX_cache_metadata_serverAdapterA_writeWithResp$wset_1__SEL_1 or
	  MUX_cache_data_memory$a_put_3__VAL_1 or
	  EN_sendReqInstr or
	  WILL_FIRE_RL_clear_bram or
	  WILL_FIRE_RL_waitFillResp_i or MUX_cache_data_memory$a_put_3__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_cache_metadata_serverAdapterA_writeWithResp$wset_1__SEL_1:
	  cache_data_memory$DIA = MUX_cache_data_memory$a_put_3__VAL_1;
      EN_sendReqInstr:
	  cache_data_memory$DIA =
	      512'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
      WILL_FIRE_RL_clear_bram: cache_data_memory$DIA = 512'd0;
      WILL_FIRE_RL_waitFillResp_i:
	  cache_data_memory$DIA = MUX_cache_data_memory$a_put_3__VAL_4;
      default: cache_data_memory$DIA =
		   512'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  always@(MUX_cache_data_memory$b_put_1__SEL_1 or
	  MUX_cache_data_memory$b_put_3__VAL_1 or
	  EN_sendReqData or
	  WILL_FIRE_RL_waitFillResp_d or MUX_cache_data_memory$b_put_3__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_cache_data_memory$b_put_1__SEL_1:
	  cache_data_memory$DIB = MUX_cache_data_memory$b_put_3__VAL_1;
      EN_sendReqData:
	  cache_data_memory$DIB =
	      512'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
      WILL_FIRE_RL_waitFillResp_d:
	  cache_data_memory$DIB = MUX_cache_data_memory$b_put_3__VAL_3;
      default: cache_data_memory$DIB =
		   512'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  always@(MUX_cache_metadata_serverAdapterA_writeWithResp$wset_1__SEL_1 or
	  w_en__h8146 or
	  EN_sendReqInstr or
	  WILL_FIRE_RL_clear_bram or WILL_FIRE_RL_waitFillResp_i)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_cache_metadata_serverAdapterA_writeWithResp$wset_1__SEL_1:
	  cache_data_memory$WEA = w_en__h8146;
      EN_sendReqInstr: cache_data_memory$WEA = 64'd0;
      WILL_FIRE_RL_clear_bram || WILL_FIRE_RL_waitFillResp_i:
	  cache_data_memory$WEA = 64'hFFFFFFFFFFFFFFFF;
      default: cache_data_memory$WEA =
		   64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  always@(MUX_cache_data_memory$b_put_1__SEL_1 or
	  w_en__h11841 or EN_sendReqData or WILL_FIRE_RL_waitFillResp_d)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_cache_data_memory$b_put_1__SEL_1:
	  cache_data_memory$WEB = w_en__h11841;
      EN_sendReqData: cache_data_memory$WEB = 64'd0;
      WILL_FIRE_RL_waitFillResp_d:
	  cache_data_memory$WEB = 64'hFFFFFFFFFFFFFFFF;
      default: cache_data_memory$WEB =
		   64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign cache_data_memory$ENA =
	     WILL_FIRE_RL_checkMiss_i &&
	     IF_cache_metadata_serverAdapterA_outData_ff_i__ETC___d225 !=
	     2'd0 &&
	     IF_cache_metadata_serverAdapterA_outData_ff_i__ETC___d234 &&
	     instReq[67:64] != 4'b0 ||
	     EN_sendReqInstr ||
	     WILL_FIRE_RL_clear_bram ||
	     WILL_FIRE_RL_waitFillResp_i ;
  assign cache_data_memory$ENB =
	     WILL_FIRE_RL_checkMiss_d &&
	     IF_cache_metadata_serverAdapterB_outData_ff_i__ETC___d316 !=
	     2'd0 &&
	     IF_cache_metadata_serverAdapterB_outData_ff_i__ETC___d325 &&
	     dataReq[67:64] != 4'b0 ||
	     EN_sendReqData ||
	     WILL_FIRE_RL_waitFillResp_d ;

  // submodule cache_data_serverAdapterA_outData_beforeDeq
  assign cache_data_serverAdapterA_outData_beforeDeq$D_IN = 1'd1 ;
  assign cache_data_serverAdapterA_outData_beforeDeq$EN =
	     WILL_FIRE_RL_checkMiss_i ;

  // submodule cache_data_serverAdapterA_outData_beforeEnq
  assign cache_data_serverAdapterA_outData_beforeEnq$D_IN = 1'd1 ;
  assign cache_data_serverAdapterA_outData_beforeEnq$EN =
	     cache_data_serverAdapterA_outData_enqw$whas ;

  // submodule cache_data_serverAdapterA_outData_ff
  assign cache_data_serverAdapterA_outData_ff$D_IN = cache_data_memory$DOA ;
  assign cache_data_serverAdapterA_outData_ff$ENQ =
	     cache_data_serverAdapterA_outData_enqw$whas &&
	     (!WILL_FIRE_RL_checkMiss_i ||
	      cache_data_serverAdapterA_outData_ff$EMPTY_N) ;
  assign cache_data_serverAdapterA_outData_ff$DEQ =
	     WILL_FIRE_RL_checkMiss_i &&
	     cache_data_serverAdapterA_outData_ff$EMPTY_N ;
  assign cache_data_serverAdapterA_outData_ff$CLR = 1'b0 ;

  // submodule cache_data_serverAdapterB_outData_beforeDeq
  assign cache_data_serverAdapterB_outData_beforeDeq$D_IN = 1'd1 ;
  assign cache_data_serverAdapterB_outData_beforeDeq$EN =
	     WILL_FIRE_RL_checkMiss_d ;

  // submodule cache_data_serverAdapterB_outData_beforeEnq
  assign cache_data_serverAdapterB_outData_beforeEnq$D_IN = 1'd1 ;
  assign cache_data_serverAdapterB_outData_beforeEnq$EN =
	     cache_data_serverAdapterB_outData_enqw$whas ;

  // submodule cache_data_serverAdapterB_outData_ff
  assign cache_data_serverAdapterB_outData_ff$D_IN = cache_data_memory$DOB ;
  assign cache_data_serverAdapterB_outData_ff$ENQ =
	     cache_data_serverAdapterB_outData_enqw$whas &&
	     (!WILL_FIRE_RL_checkMiss_d ||
	      cache_data_serverAdapterB_outData_ff$EMPTY_N) ;
  assign cache_data_serverAdapterB_outData_ff$DEQ =
	     WILL_FIRE_RL_checkMiss_d &&
	     cache_data_serverAdapterB_outData_ff$EMPTY_N ;
  assign cache_data_serverAdapterB_outData_ff$CLR = 1'b0 ;

  // submodule cache_metadata_memory
  always@(MUX_cache_metadata_serverAdapterA_writeWithResp$wset_1__SEL_1 or
	  WILL_FIRE_RL_waitFillResp_i or
	  instReq or
	  EN_sendReqInstr or
	  sendReqInstr_req or WILL_FIRE_RL_clear_bram or clear_idx)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_cache_metadata_serverAdapterA_writeWithResp$wset_1__SEL_1 ||
      WILL_FIRE_RL_waitFillResp_i:
	  cache_metadata_memory$ADDRA = instReq[44:38];
      EN_sendReqInstr: cache_metadata_memory$ADDRA = sendReqInstr_req[44:38];
      WILL_FIRE_RL_clear_bram: cache_metadata_memory$ADDRA = clear_idx;
      default: cache_metadata_memory$ADDRA =
		   7'b0101010 /* unspecified value */ ;
    endcase
  end
  assign cache_metadata_memory$ADDRB =
	     (MUX_cache_data_memory$b_put_1__SEL_1 ||
	      WILL_FIRE_RL_waitFillResp_d) ?
	       dataReq[44:38] :
	       sendReqData_req[44:38] ;
  always@(MUX_cache_metadata_serverAdapterA_writeWithResp$wset_1__SEL_1 or
	  MUX_cache_metadata_memory$a_put_3__VAL_1 or
	  EN_sendReqInstr or
	  WILL_FIRE_RL_clear_bram or
	  WILL_FIRE_RL_waitFillResp_i or
	  MUX_cache_metadata_memory$a_put_3__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_cache_metadata_serverAdapterA_writeWithResp$wset_1__SEL_1:
	  cache_metadata_memory$DIA =
	      MUX_cache_metadata_memory$a_put_3__VAL_1;
      EN_sendReqInstr:
	  cache_metadata_memory$DIA =
	      21'b010101010101010101010 /* unspecified value */ ;
      WILL_FIRE_RL_clear_bram: cache_metadata_memory$DIA = 21'd0;
      WILL_FIRE_RL_waitFillResp_i:
	  cache_metadata_memory$DIA =
	      MUX_cache_metadata_memory$a_put_3__VAL_4;
      default: cache_metadata_memory$DIA =
		   21'b010101010101010101010 /* unspecified value */ ;
    endcase
  end
  always@(MUX_cache_data_memory$b_put_1__SEL_1 or
	  MUX_cache_metadata_memory$b_put_3__VAL_1 or
	  EN_sendReqData or
	  WILL_FIRE_RL_waitFillResp_d or
	  MUX_cache_metadata_memory$b_put_3__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_cache_data_memory$b_put_1__SEL_1:
	  cache_metadata_memory$DIB =
	      MUX_cache_metadata_memory$b_put_3__VAL_1;
      EN_sendReqData:
	  cache_metadata_memory$DIB =
	      21'b010101010101010101010 /* unspecified value */ ;
      WILL_FIRE_RL_waitFillResp_d:
	  cache_metadata_memory$DIB =
	      MUX_cache_metadata_memory$b_put_3__VAL_3;
      default: cache_metadata_memory$DIB =
		   21'b010101010101010101010 /* unspecified value */ ;
    endcase
  end
  assign cache_metadata_memory$WEA = !EN_sendReqInstr ;
  assign cache_metadata_memory$WEB = !EN_sendReqData ;
  assign cache_metadata_memory$ENA =
	     WILL_FIRE_RL_checkMiss_i &&
	     IF_cache_metadata_serverAdapterA_outData_ff_i__ETC___d225 !=
	     2'd0 &&
	     IF_cache_metadata_serverAdapterA_outData_ff_i__ETC___d234 &&
	     instReq[67:64] != 4'b0 ||
	     EN_sendReqInstr ||
	     WILL_FIRE_RL_clear_bram ||
	     WILL_FIRE_RL_waitFillResp_i ;
  assign cache_metadata_memory$ENB =
	     WILL_FIRE_RL_checkMiss_d &&
	     IF_cache_metadata_serverAdapterB_outData_ff_i__ETC___d316 !=
	     2'd0 &&
	     IF_cache_metadata_serverAdapterB_outData_ff_i__ETC___d325 &&
	     dataReq[67:64] != 4'b0 ||
	     EN_sendReqData ||
	     WILL_FIRE_RL_waitFillResp_d ;

  // submodule cache_metadata_serverAdapterA_outData_beforeDeq
  assign cache_metadata_serverAdapterA_outData_beforeDeq$D_IN = 1'd1 ;
  assign cache_metadata_serverAdapterA_outData_beforeDeq$EN =
	     WILL_FIRE_RL_checkMiss_i ;

  // submodule cache_metadata_serverAdapterA_outData_beforeEnq
  assign cache_metadata_serverAdapterA_outData_beforeEnq$D_IN = 1'd1 ;
  assign cache_metadata_serverAdapterA_outData_beforeEnq$EN =
	     cache_metadata_serverAdapterA_outData_enqw$whas ;

  // submodule cache_metadata_serverAdapterA_outData_ff
  assign cache_metadata_serverAdapterA_outData_ff$D_IN =
	     cache_metadata_memory$DOA ;
  assign cache_metadata_serverAdapterA_outData_ff$ENQ =
	     cache_metadata_serverAdapterA_outData_enqw$whas &&
	     (!WILL_FIRE_RL_checkMiss_i ||
	      cache_metadata_serverAdapterA_outData_ff$EMPTY_N) ;
  assign cache_metadata_serverAdapterA_outData_ff$DEQ =
	     WILL_FIRE_RL_checkMiss_i &&
	     cache_metadata_serverAdapterA_outData_ff$EMPTY_N ;
  assign cache_metadata_serverAdapterA_outData_ff$CLR = 1'b0 ;

  // submodule cache_metadata_serverAdapterB_outData_beforeDeq
  assign cache_metadata_serverAdapterB_outData_beforeDeq$D_IN = 1'd1 ;
  assign cache_metadata_serverAdapterB_outData_beforeDeq$EN =
	     WILL_FIRE_RL_checkMiss_d ;

  // submodule cache_metadata_serverAdapterB_outData_beforeEnq
  assign cache_metadata_serverAdapterB_outData_beforeEnq$D_IN = 1'd1 ;
  assign cache_metadata_serverAdapterB_outData_beforeEnq$EN =
	     cache_metadata_serverAdapterB_outData_enqw$whas ;

  // submodule cache_metadata_serverAdapterB_outData_ff
  assign cache_metadata_serverAdapterB_outData_ff$D_IN =
	     cache_metadata_memory$DOB ;
  assign cache_metadata_serverAdapterB_outData_ff$ENQ =
	     cache_metadata_serverAdapterB_outData_enqw$whas &&
	     (!WILL_FIRE_RL_checkMiss_d ||
	      cache_metadata_serverAdapterB_outData_ff$EMPTY_N) ;
  assign cache_metadata_serverAdapterB_outData_ff$DEQ =
	     WILL_FIRE_RL_checkMiss_d &&
	     cache_metadata_serverAdapterB_outData_ff$EMPTY_N ;
  assign cache_metadata_serverAdapterB_outData_ff$CLR = 1'b0 ;

  // submodule memReqQ_d
  assign memReqQ_d$D_IN =
	     MUX_memReqQ_d$enq_1__SEL_1 ?
	       MUX_memReqQ_d$enq_1__VAL_1 :
	       MUX_memReqQ_d$enq_1__VAL_2 ;
  assign memReqQ_d$ENQ =
	     WILL_FIRE_RL_checkMiss_d &&
	     !IF_cache_metadata_serverAdapterB_outData_ff_i__ETC___d325 &&
	     IF_cache_metadata_serverAdapterB_outData_ff_i__ETC___d316 ==
	     2'd2 ||
	     WILL_FIRE_RL_sendFillReq_d ;
  assign memReqQ_d$DEQ = EN_getMemReq && reqTypePriority ;
  assign memReqQ_d$CLR = 1'b0 ;

  // submodule memReqQ_i
  assign memReqQ_i$D_IN =
	     MUX_memReqQ_i$enq_1__SEL_1 ?
	       MUX_memReqQ_i$enq_1__VAL_1 :
	       MUX_memReqQ_i$enq_1__VAL_2 ;
  assign memReqQ_i$ENQ =
	     WILL_FIRE_RL_checkMiss_i &&
	     !IF_cache_metadata_serverAdapterA_outData_ff_i__ETC___d234 &&
	     IF_cache_metadata_serverAdapterA_outData_ff_i__ETC___d225 ==
	     2'd2 ||
	     WILL_FIRE_RL_sendFillReq_i ;
  assign memReqQ_i$DEQ = EN_getMemReq && !reqTypePriority ;
  assign memReqQ_i$CLR = 1'b0 ;

  // submodule memRespQ_d
  assign memRespQ_d$D_IN = putMemResp_resp ;
  assign memRespQ_d$ENQ = EN_putMemResp && reqTypeQ$D_OUT ;
  assign memRespQ_d$DEQ = WILL_FIRE_RL_waitFillResp_d ;
  assign memRespQ_d$CLR = 1'b0 ;

  // submodule memRespQ_i
  assign memRespQ_i$D_IN = putMemResp_resp ;
  assign memRespQ_i$ENQ = EN_putMemResp && !reqTypeQ$D_OUT ;
  assign memRespQ_i$DEQ = WILL_FIRE_RL_waitFillResp_i ;
  assign memRespQ_i$CLR = 1'b0 ;

  // submodule reqTypeQ
  assign reqTypeQ$D_IN = reqTypePriority ;
  assign reqTypeQ$ENQ =
	     EN_getMemReq &&
	     (reqTypePriority && !memReqQ_d$D_OUT[538] ||
	      !reqTypePriority && !memReqQ_i$D_OUT[538]) ;
  assign reqTypeQ$DEQ = EN_putMemResp ;
  assign reqTypeQ$CLR = 1'b0 ;

  // submodule respQ_d
  assign respQ_d$D_IN =
	     MUX_respQ_d$enq_1__SEL_1 ?
	       SEL_ARR_IF_cache_data_serverAdapterB_outData_f_ETC___d377 :
	       indexed_word__h18628 ;
  assign respQ_d$ENQ =
	     WILL_FIRE_RL_checkMiss_d &&
	     IF_cache_metadata_serverAdapterB_outData_ff_i__ETC___d316 !=
	     2'd0 &&
	     IF_cache_metadata_serverAdapterB_outData_ff_i__ETC___d325 ||
	     WILL_FIRE_RL_waitFillResp_d ;
  assign respQ_d$DEQ = EN_getRespData ;
  assign respQ_d$CLR = 1'b0 ;

  // submodule respQ_i
  assign respQ_i$D_IN =
	     MUX_respQ_i$enq_1__SEL_1 ?
	       SEL_ARR_IF_cache_data_serverAdapterA_outData_f_ETC___d282 :
	       indexed_word__h15391 ;
  assign respQ_i$ENQ =
	     WILL_FIRE_RL_checkMiss_i &&
	     IF_cache_metadata_serverAdapterA_outData_ff_i__ETC___d225 !=
	     2'd0 &&
	     IF_cache_metadata_serverAdapterA_outData_ff_i__ETC___d234 ||
	     WILL_FIRE_RL_waitFillResp_i ;
  assign respQ_i$DEQ = EN_getRespInstr ;
  assign respQ_i$CLR = 1'b0 ;

  // remaining internal signals
  assign IF_NOT_IF_cache_metadata_serverAdapterA_outDat_ETC___d247 =
	     (IF_cache_metadata_serverAdapterA_outData_ff_i__ETC___d225 !=
	      2'd0 &&
	      IF_cache_metadata_serverAdapterA_outData_ff_i__ETC___d234) ?
	       cache_data_serverAdapterA_outData_beforeDeq$Q_OUT &&
	       respQ_i_i_notFull__36_AND_instReq_32_BITS_67_T_ETC___d240 :
	       IF_cache_metadata_serverAdapterA_outData_ff_i__ETC___d225 !=
	       2'd2 ||
	       cache_data_serverAdapterA_outData_beforeDeq$Q_OUT &&
	       memReqQ_i$FULL_N ;
  assign IF_NOT_IF_cache_metadata_serverAdapterB_outDat_ETC___d341 =
	     (IF_cache_metadata_serverAdapterB_outData_ff_i__ETC___d316 !=
	      2'd0 &&
	      IF_cache_metadata_serverAdapterB_outData_ff_i__ETC___d325) ?
	       cache_data_serverAdapterB_outData_beforeDeq$Q_OUT &&
	       respQ_d_i_notFull__27_AND_dataReq_23_BITS_67_T_ETC___d334 :
	       IF_cache_metadata_serverAdapterB_outData_ff_i__ETC___d316 !=
	       2'd2 ||
	       cache_data_serverAdapterB_outData_beforeDeq$Q_OUT &&
	       memReqQ_d$FULL_N ;
  assign IF_cache_metadata_serverAdapterA_outData_ff_i__ETC___d225 =
	     cache_metadata_serverAdapterA_outData_ff$EMPTY_N ?
	       cache_metadata_serverAdapterA_outData_ff$D_OUT[20:19] :
	       cache_metadata_memory$DOA[20:19] ;
  assign IF_cache_metadata_serverAdapterA_outData_ff_i__ETC___d234 =
	     x__h8056 == instReq[63:45] ;
  assign IF_cache_metadata_serverAdapterB_outData_ff_i__ETC___d316 =
	     cache_metadata_serverAdapterB_outData_ff$EMPTY_N ?
	       cache_metadata_serverAdapterB_outData_ff$D_OUT[20:19] :
	       cache_metadata_memory$DOB[20:19] ;
  assign IF_cache_metadata_serverAdapterB_outData_ff_i__ETC___d325 =
	     x__h11760 == dataReq[63:45] ;
  assign IF_dataReq_23_BITS_37_TO_34_53_EQ_15_17_THEN_I_ETC___d536 =
	     { (dataReq[37:34] == 4'd15) ?
		 n__h20197 :
		 memRespQ_d$D_OUT[511:480],
	       (dataReq[37:34] == 4'd14) ?
		 n__h20197 :
		 memRespQ_d$D_OUT[479:448],
	       (dataReq[37:34] == 4'd13) ?
		 n__h20197 :
		 memRespQ_d$D_OUT[447:416],
	       (dataReq[37:34] == 4'd12) ?
		 n__h20197 :
		 memRespQ_d$D_OUT[415:384] } ;
  assign IF_dataReq_23_BITS_37_TO_34_53_EQ_15_17_THEN_I_ETC___d541 =
	     { IF_dataReq_23_BITS_37_TO_34_53_EQ_15_17_THEN_I_ETC___d536,
	       (dataReq[37:34] == 4'd11) ?
		 n__h20197 :
		 memRespQ_d$D_OUT[383:352],
	       (dataReq[37:34] == 4'd10) ?
		 n__h20197 :
		 memRespQ_d$D_OUT[351:320] } ;
  assign IF_dataReq_23_BITS_37_TO_34_53_EQ_15_17_THEN_I_ETC___d546 =
	     { IF_dataReq_23_BITS_37_TO_34_53_EQ_15_17_THEN_I_ETC___d541,
	       (dataReq[37:34] == 4'd9) ?
		 n__h20197 :
		 memRespQ_d$D_OUT[319:288],
	       (dataReq[37:34] == 4'd8) ?
		 n__h20197 :
		 memRespQ_d$D_OUT[287:256] } ;
  assign IF_dataReq_23_BITS_37_TO_34_53_EQ_15_17_THEN_I_ETC___d551 =
	     { IF_dataReq_23_BITS_37_TO_34_53_EQ_15_17_THEN_I_ETC___d546,
	       (dataReq[37:34] == 4'd7) ?
		 n__h20197 :
		 memRespQ_d$D_OUT[255:224],
	       (dataReq[37:34] == 4'd6) ?
		 n__h20197 :
		 memRespQ_d$D_OUT[223:192] } ;
  assign IF_dataReq_23_BITS_37_TO_34_53_EQ_15_17_THEN_I_ETC___d556 =
	     { IF_dataReq_23_BITS_37_TO_34_53_EQ_15_17_THEN_I_ETC___d551,
	       (dataReq[37:34] == 4'd5) ?
		 n__h20197 :
		 memRespQ_d$D_OUT[191:160],
	       (dataReq[37:34] == 4'd4) ?
		 n__h20197 :
		 memRespQ_d$D_OUT[159:128] } ;
  assign IF_dataReq_23_BITS_37_TO_34_53_EQ_15_17_THEN_I_ETC___d561 =
	     { IF_dataReq_23_BITS_37_TO_34_53_EQ_15_17_THEN_I_ETC___d556,
	       (dataReq[37:34] == 4'd3) ?
		 n__h20197 :
		 memRespQ_d$D_OUT[127:96],
	       (dataReq[37:34] == 4'd2) ?
		 n__h20197 :
		 memRespQ_d$D_OUT[95:64] } ;
  assign IF_dataReq_23_BITS_37_TO_34_53_EQ_15_17_THEN_I_ETC___d566 =
	     { IF_dataReq_23_BITS_37_TO_34_53_EQ_15_17_THEN_I_ETC___d561,
	       (dataReq[37:34] == 4'd1) ? n__h20197 : memRespQ_d$D_OUT[63:32],
	       (dataReq[37:34] == 4'd0) ?
		 n__h20197 :
		 memRespQ_d$D_OUT[31:0] } ;
  assign IF_instReq_32_BITS_37_TO_34_58_EQ_15_39_THEN_I_ETC___d458 =
	     { (instReq[37:34] == 4'd15) ?
		 n__h16960 :
		 memRespQ_i$D_OUT[511:480],
	       (instReq[37:34] == 4'd14) ?
		 n__h16960 :
		 memRespQ_i$D_OUT[479:448],
	       (instReq[37:34] == 4'd13) ?
		 n__h16960 :
		 memRespQ_i$D_OUT[447:416],
	       (instReq[37:34] == 4'd12) ?
		 n__h16960 :
		 memRespQ_i$D_OUT[415:384] } ;
  assign IF_instReq_32_BITS_37_TO_34_58_EQ_15_39_THEN_I_ETC___d463 =
	     { IF_instReq_32_BITS_37_TO_34_58_EQ_15_39_THEN_I_ETC___d458,
	       (instReq[37:34] == 4'd11) ?
		 n__h16960 :
		 memRespQ_i$D_OUT[383:352],
	       (instReq[37:34] == 4'd10) ?
		 n__h16960 :
		 memRespQ_i$D_OUT[351:320] } ;
  assign IF_instReq_32_BITS_37_TO_34_58_EQ_15_39_THEN_I_ETC___d468 =
	     { IF_instReq_32_BITS_37_TO_34_58_EQ_15_39_THEN_I_ETC___d463,
	       (instReq[37:34] == 4'd9) ?
		 n__h16960 :
		 memRespQ_i$D_OUT[319:288],
	       (instReq[37:34] == 4'd8) ?
		 n__h16960 :
		 memRespQ_i$D_OUT[287:256] } ;
  assign IF_instReq_32_BITS_37_TO_34_58_EQ_15_39_THEN_I_ETC___d473 =
	     { IF_instReq_32_BITS_37_TO_34_58_EQ_15_39_THEN_I_ETC___d468,
	       (instReq[37:34] == 4'd7) ?
		 n__h16960 :
		 memRespQ_i$D_OUT[255:224],
	       (instReq[37:34] == 4'd6) ?
		 n__h16960 :
		 memRespQ_i$D_OUT[223:192] } ;
  assign IF_instReq_32_BITS_37_TO_34_58_EQ_15_39_THEN_I_ETC___d478 =
	     { IF_instReq_32_BITS_37_TO_34_58_EQ_15_39_THEN_I_ETC___d473,
	       (instReq[37:34] == 4'd5) ?
		 n__h16960 :
		 memRespQ_i$D_OUT[191:160],
	       (instReq[37:34] == 4'd4) ?
		 n__h16960 :
		 memRespQ_i$D_OUT[159:128] } ;
  assign IF_instReq_32_BITS_37_TO_34_58_EQ_15_39_THEN_I_ETC___d483 =
	     { IF_instReq_32_BITS_37_TO_34_58_EQ_15_39_THEN_I_ETC___d478,
	       (instReq[37:34] == 4'd3) ?
		 n__h16960 :
		 memRespQ_i$D_OUT[127:96],
	       (instReq[37:34] == 4'd2) ?
		 n__h16960 :
		 memRespQ_i$D_OUT[95:64] } ;
  assign IF_instReq_32_BITS_37_TO_34_58_EQ_15_39_THEN_I_ETC___d488 =
	     { IF_instReq_32_BITS_37_TO_34_58_EQ_15_39_THEN_I_ETC___d483,
	       (instReq[37:34] == 4'd1) ? n__h16960 : memRespQ_i$D_OUT[63:32],
	       (instReq[37:34] == 4'd0) ?
		 n__h16960 :
		 memRespQ_i$D_OUT[31:0] } ;
  assign cache_data_serverAdapterA_cnt_19_PLUS_IF_cache_ETC___d125 =
	     cache_data_serverAdapterA_cnt +
	     (cache_data_serverAdapterA_cnt_1$whas ? 4'd1 : 4'd0) +
	     (WILL_FIRE_RL_checkMiss_i ? 4'd15 : 4'd0) ;
  assign cache_data_serverAdapterA_cnt_19_SLT_4___d209 =
	     (cache_data_serverAdapterA_cnt ^ 4'h8) < 4'd12 ;
  assign cache_data_serverAdapterB_cnt_71_PLUS_IF_cache_ETC___d177 =
	     cache_data_serverAdapterB_cnt +
	     (cache_data_serverAdapterB_cnt_1$whas ? 4'd1 : 4'd0) +
	     (WILL_FIRE_RL_checkMiss_d ? 4'd15 : 4'd0) ;
  assign cache_data_serverAdapterB_cnt_71_SLT_4___d331 =
	     (cache_data_serverAdapterB_cnt ^ 4'h8) < 4'd12 ;
  assign cache_metadata_serverAdapterA_cnt_5_PLUS_IF_ca_ETC___d21 =
	     cache_metadata_serverAdapterA_cnt +
	     (cache_metadata_serverAdapterA_cnt_1$whas ? 4'd1 : 4'd0) +
	     (WILL_FIRE_RL_checkMiss_i ? 4'd15 : 4'd0) ;
  assign cache_metadata_serverAdapterA_cnt_5_SLT_4___d208 =
	     (cache_metadata_serverAdapterA_cnt ^ 4'h8) < 4'd12 ;
  assign cache_metadata_serverAdapterA_outData_beforeDe_ETC___d249 =
	     cache_metadata_serverAdapterA_outData_beforeDeq$Q_OUT &&
	     (cache_metadata_serverAdapterA_outData_ff$EMPTY_N ||
	      cache_metadata_serverAdapterA_outData_enqw$whas) &&
	     (cache_data_serverAdapterA_outData_ff$EMPTY_N ||
	      cache_data_serverAdapterA_outData_enqw$whas) &&
	     IF_NOT_IF_cache_metadata_serverAdapterA_outDat_ETC___d247 ;
  assign cache_metadata_serverAdapterB_cnt_7_PLUS_IF_ca_ETC___d73 =
	     cache_metadata_serverAdapterB_cnt +
	     (cache_metadata_serverAdapterB_cnt_1$whas ? 4'd1 : 4'd0) +
	     (WILL_FIRE_RL_checkMiss_d ? 4'd15 : 4'd0) ;
  assign cache_metadata_serverAdapterB_cnt_7_SLT_4___d330 =
	     (cache_metadata_serverAdapterB_cnt ^ 4'h8) < 4'd12 ;
  assign cache_metadata_serverAdapterB_outData_beforeDe_ETC___d343 =
	     cache_metadata_serverAdapterB_outData_beforeDeq$Q_OUT &&
	     (cache_metadata_serverAdapterB_outData_ff$EMPTY_N ||
	      cache_metadata_serverAdapterB_outData_enqw$whas) &&
	     (cache_data_serverAdapterB_outData_ff$EMPTY_N ||
	      cache_data_serverAdapterB_outData_enqw$whas) &&
	     IF_NOT_IF_cache_metadata_serverAdapterB_outDat_ETC___d341 ;
  assign n__h16960 =
	     { instReq[67] ? instReq[31:24] : indexed_word__h15391[31:24],
	       instReq[66] ? instReq[23:16] : indexed_word__h15391[23:16],
	       instReq[65] ? instReq[15:8] : indexed_word__h15391[15:8],
	       instReq[64] ? instReq[7:0] : indexed_word__h15391[7:0] } ;
  assign n__h20197 =
	     { dataReq[67] ? dataReq[31:24] : indexed_word__h18628[31:24],
	       dataReq[66] ? dataReq[23:16] : indexed_word__h18628[23:16],
	       dataReq[65] ? dataReq[15:8] : indexed_word__h18628[15:8],
	       dataReq[64] ? dataReq[7:0] : indexed_word__h18628[7:0] } ;
  assign respQ_d_i_notFull__27_AND_dataReq_23_BITS_67_T_ETC___d334 =
	     respQ_d$FULL_N &&
	     (dataReq[67:64] == 4'b0 ||
	      cache_metadata_serverAdapterB_cnt_7_SLT_4___d330 &&
	      cache_data_serverAdapterB_cnt_71_SLT_4___d331) ;
  assign respQ_i_i_notFull__36_AND_instReq_32_BITS_67_T_ETC___d240 =
	     respQ_i$FULL_N &&
	     (instReq[67:64] == 4'b0 ||
	      cache_metadata_serverAdapterA_cnt_5_SLT_4___d208 &&
	      cache_data_serverAdapterA_cnt_19_SLT_4___d209) ;
  assign w_en__h11841 = { 60'd0, dataReq[67:64] } << x__h11975 ;
  assign w_en__h8146 = { 60'd0, instReq[67:64] } << x__h8252 ;
  assign x__h11760 =
	     cache_metadata_serverAdapterB_outData_ff$EMPTY_N ?
	       cache_metadata_serverAdapterB_outData_ff$D_OUT[18:0] :
	       cache_metadata_memory$DOB[18:0] ;
  assign x__h11975 = { dataReq[37:34], 2'b0 } ;
  assign x__h12016 =
	     { dataReq[67] ?
		 dataReq[31:24] :
		 SEL_ARR_IF_cache_data_serverAdapterB_outData_f_ETC___d377[31:24],
	       dataReq[66] ?
		 dataReq[23:16] :
		 SEL_ARR_IF_cache_data_serverAdapterB_outData_f_ETC___d377[23:16],
	       dataReq[65] ?
		 dataReq[15:8] :
		 SEL_ARR_IF_cache_data_serverAdapterB_outData_f_ETC___d377[15:8],
	       dataReq[64] ?
		 dataReq[7:0] :
		 SEL_ARR_IF_cache_data_serverAdapterB_outData_f_ETC___d377[7:0] } ;
  assign x__h13685 = { dataReq[37:34], 5'b0 } ;
  assign x__h8056 =
	     cache_metadata_serverAdapterA_outData_ff$EMPTY_N ?
	       cache_metadata_serverAdapterA_outData_ff$D_OUT[18:0] :
	       cache_metadata_memory$DOA[18:0] ;
  assign x__h8252 = { instReq[37:34], 2'b0 } ;
  assign x__h8293 =
	     { instReq[67] ?
		 instReq[31:24] :
		 SEL_ARR_IF_cache_data_serverAdapterA_outData_f_ETC___d282[31:24],
	       instReq[66] ?
		 instReq[23:16] :
		 SEL_ARR_IF_cache_data_serverAdapterA_outData_f_ETC___d282[23:16],
	       instReq[65] ?
		 instReq[15:8] :
		 SEL_ARR_IF_cache_data_serverAdapterA_outData_f_ETC___d282[15:8],
	       instReq[64] ?
		 instReq[7:0] :
		 SEL_ARR_IF_cache_data_serverAdapterA_outData_f_ETC___d282[7:0] } ;
  assign x__h9963 = { instReq[37:34], 5'b0 } ;
  assign x_addr__h10086 = { x__h8056, instReq[44:38] } ;
  assign x_addr__h13806 = { x__h11760, dataReq[44:38] } ;
  assign x_data__h10087 =
	     cache_data_serverAdapterA_outData_ff$EMPTY_N ?
	       cache_data_serverAdapterA_outData_ff$D_OUT :
	       cache_data_memory$DOA ;
  assign x_data__h13807 =
	     cache_data_serverAdapterB_outData_ff$EMPTY_N ?
	       cache_data_serverAdapterB_outData_ff$D_OUT :
	       cache_data_memory$DOB ;
  always@(dataReq or memRespQ_d$D_OUT)
  begin
    case (dataReq[37:34])
      4'd0: indexed_word__h18628 = memRespQ_d$D_OUT[31:0];
      4'd1: indexed_word__h18628 = memRespQ_d$D_OUT[63:32];
      4'd2: indexed_word__h18628 = memRespQ_d$D_OUT[95:64];
      4'd3: indexed_word__h18628 = memRespQ_d$D_OUT[127:96];
      4'd4: indexed_word__h18628 = memRespQ_d$D_OUT[159:128];
      4'd5: indexed_word__h18628 = memRespQ_d$D_OUT[191:160];
      4'd6: indexed_word__h18628 = memRespQ_d$D_OUT[223:192];
      4'd7: indexed_word__h18628 = memRespQ_d$D_OUT[255:224];
      4'd8: indexed_word__h18628 = memRespQ_d$D_OUT[287:256];
      4'd9: indexed_word__h18628 = memRespQ_d$D_OUT[319:288];
      4'd10: indexed_word__h18628 = memRespQ_d$D_OUT[351:320];
      4'd11: indexed_word__h18628 = memRespQ_d$D_OUT[383:352];
      4'd12: indexed_word__h18628 = memRespQ_d$D_OUT[415:384];
      4'd13: indexed_word__h18628 = memRespQ_d$D_OUT[447:416];
      4'd14: indexed_word__h18628 = memRespQ_d$D_OUT[479:448];
      4'd15: indexed_word__h18628 = memRespQ_d$D_OUT[511:480];
    endcase
  end
  always@(instReq or memRespQ_i$D_OUT)
  begin
    case (instReq[37:34])
      4'd0: indexed_word__h15391 = memRespQ_i$D_OUT[31:0];
      4'd1: indexed_word__h15391 = memRespQ_i$D_OUT[63:32];
      4'd2: indexed_word__h15391 = memRespQ_i$D_OUT[95:64];
      4'd3: indexed_word__h15391 = memRespQ_i$D_OUT[127:96];
      4'd4: indexed_word__h15391 = memRespQ_i$D_OUT[159:128];
      4'd5: indexed_word__h15391 = memRespQ_i$D_OUT[191:160];
      4'd6: indexed_word__h15391 = memRespQ_i$D_OUT[223:192];
      4'd7: indexed_word__h15391 = memRespQ_i$D_OUT[255:224];
      4'd8: indexed_word__h15391 = memRespQ_i$D_OUT[287:256];
      4'd9: indexed_word__h15391 = memRespQ_i$D_OUT[319:288];
      4'd10: indexed_word__h15391 = memRespQ_i$D_OUT[351:320];
      4'd11: indexed_word__h15391 = memRespQ_i$D_OUT[383:352];
      4'd12: indexed_word__h15391 = memRespQ_i$D_OUT[415:384];
      4'd13: indexed_word__h15391 = memRespQ_i$D_OUT[447:416];
      4'd14: indexed_word__h15391 = memRespQ_i$D_OUT[479:448];
      4'd15: indexed_word__h15391 = memRespQ_i$D_OUT[511:480];
    endcase
  end
  always@(instReq or x_data__h10087)
  begin
    case (instReq[37:34])
      4'd0:
	  SEL_ARR_IF_cache_data_serverAdapterA_outData_f_ETC___d282 =
	      x_data__h10087[31:0];
      4'd1:
	  SEL_ARR_IF_cache_data_serverAdapterA_outData_f_ETC___d282 =
	      x_data__h10087[63:32];
      4'd2:
	  SEL_ARR_IF_cache_data_serverAdapterA_outData_f_ETC___d282 =
	      x_data__h10087[95:64];
      4'd3:
	  SEL_ARR_IF_cache_data_serverAdapterA_outData_f_ETC___d282 =
	      x_data__h10087[127:96];
      4'd4:
	  SEL_ARR_IF_cache_data_serverAdapterA_outData_f_ETC___d282 =
	      x_data__h10087[159:128];
      4'd5:
	  SEL_ARR_IF_cache_data_serverAdapterA_outData_f_ETC___d282 =
	      x_data__h10087[191:160];
      4'd6:
	  SEL_ARR_IF_cache_data_serverAdapterA_outData_f_ETC___d282 =
	      x_data__h10087[223:192];
      4'd7:
	  SEL_ARR_IF_cache_data_serverAdapterA_outData_f_ETC___d282 =
	      x_data__h10087[255:224];
      4'd8:
	  SEL_ARR_IF_cache_data_serverAdapterA_outData_f_ETC___d282 =
	      x_data__h10087[287:256];
      4'd9:
	  SEL_ARR_IF_cache_data_serverAdapterA_outData_f_ETC___d282 =
	      x_data__h10087[319:288];
      4'd10:
	  SEL_ARR_IF_cache_data_serverAdapterA_outData_f_ETC___d282 =
	      x_data__h10087[351:320];
      4'd11:
	  SEL_ARR_IF_cache_data_serverAdapterA_outData_f_ETC___d282 =
	      x_data__h10087[383:352];
      4'd12:
	  SEL_ARR_IF_cache_data_serverAdapterA_outData_f_ETC___d282 =
	      x_data__h10087[415:384];
      4'd13:
	  SEL_ARR_IF_cache_data_serverAdapterA_outData_f_ETC___d282 =
	      x_data__h10087[447:416];
      4'd14:
	  SEL_ARR_IF_cache_data_serverAdapterA_outData_f_ETC___d282 =
	      x_data__h10087[479:448];
      4'd15:
	  SEL_ARR_IF_cache_data_serverAdapterA_outData_f_ETC___d282 =
	      x_data__h10087[511:480];
    endcase
  end
  always@(dataReq or x_data__h13807)
  begin
    case (dataReq[37:34])
      4'd0:
	  SEL_ARR_IF_cache_data_serverAdapterB_outData_f_ETC___d377 =
	      x_data__h13807[31:0];
      4'd1:
	  SEL_ARR_IF_cache_data_serverAdapterB_outData_f_ETC___d377 =
	      x_data__h13807[63:32];
      4'd2:
	  SEL_ARR_IF_cache_data_serverAdapterB_outData_f_ETC___d377 =
	      x_data__h13807[95:64];
      4'd3:
	  SEL_ARR_IF_cache_data_serverAdapterB_outData_f_ETC___d377 =
	      x_data__h13807[127:96];
      4'd4:
	  SEL_ARR_IF_cache_data_serverAdapterB_outData_f_ETC___d377 =
	      x_data__h13807[159:128];
      4'd5:
	  SEL_ARR_IF_cache_data_serverAdapterB_outData_f_ETC___d377 =
	      x_data__h13807[191:160];
      4'd6:
	  SEL_ARR_IF_cache_data_serverAdapterB_outData_f_ETC___d377 =
	      x_data__h13807[223:192];
      4'd7:
	  SEL_ARR_IF_cache_data_serverAdapterB_outData_f_ETC___d377 =
	      x_data__h13807[255:224];
      4'd8:
	  SEL_ARR_IF_cache_data_serverAdapterB_outData_f_ETC___d377 =
	      x_data__h13807[287:256];
      4'd9:
	  SEL_ARR_IF_cache_data_serverAdapterB_outData_f_ETC___d377 =
	      x_data__h13807[319:288];
      4'd10:
	  SEL_ARR_IF_cache_data_serverAdapterB_outData_f_ETC___d377 =
	      x_data__h13807[351:320];
      4'd11:
	  SEL_ARR_IF_cache_data_serverAdapterB_outData_f_ETC___d377 =
	      x_data__h13807[383:352];
      4'd12:
	  SEL_ARR_IF_cache_data_serverAdapterB_outData_f_ETC___d377 =
	      x_data__h13807[415:384];
      4'd13:
	  SEL_ARR_IF_cache_data_serverAdapterB_outData_f_ETC___d377 =
	      x_data__h13807[447:416];
      4'd14:
	  SEL_ARR_IF_cache_data_serverAdapterB_outData_f_ETC___d377 =
	      x_data__h13807[479:448];
      4'd15:
	  SEL_ARR_IF_cache_data_serverAdapterB_outData_f_ETC___d377 =
	      x_data__h13807[511:480];
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        cache_data_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY 4'd0;
	cache_data_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	cache_data_serverAdapterA_s2 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	cache_data_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY 4'd0;
	cache_data_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	cache_data_serverAdapterB_s2 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	cache_metadata_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY 4'd0;
	cache_metadata_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	cache_metadata_serverAdapterA_s2 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	cache_metadata_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY 4'd0;
	cache_metadata_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	cache_metadata_serverAdapterB_s2 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	clear_idx <= `BSV_ASSIGNMENT_DELAY 7'd0;
	dataReq <= `BSV_ASSIGNMENT_DELAY 68'd0;
	dataStatus <= `BSV_ASSIGNMENT_DELAY 3'd0;
	instReq <= `BSV_ASSIGNMENT_DELAY 68'd0;
	instStatus <= `BSV_ASSIGNMENT_DELAY 3'd0;
	reqTypePriority <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (cache_data_serverAdapterA_cnt$EN)
	  cache_data_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY
	      cache_data_serverAdapterA_cnt$D_IN;
	if (cache_data_serverAdapterA_s1$EN)
	  cache_data_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY
	      cache_data_serverAdapterA_s1$D_IN;
	if (cache_data_serverAdapterA_s2$EN)
	  cache_data_serverAdapterA_s2 <= `BSV_ASSIGNMENT_DELAY
	      cache_data_serverAdapterA_s2$D_IN;
	if (cache_data_serverAdapterB_cnt$EN)
	  cache_data_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY
	      cache_data_serverAdapterB_cnt$D_IN;
	if (cache_data_serverAdapterB_s1$EN)
	  cache_data_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY
	      cache_data_serverAdapterB_s1$D_IN;
	if (cache_data_serverAdapterB_s2$EN)
	  cache_data_serverAdapterB_s2 <= `BSV_ASSIGNMENT_DELAY
	      cache_data_serverAdapterB_s2$D_IN;
	if (cache_metadata_serverAdapterA_cnt$EN)
	  cache_metadata_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY
	      cache_metadata_serverAdapterA_cnt$D_IN;
	if (cache_metadata_serverAdapterA_s1$EN)
	  cache_metadata_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY
	      cache_metadata_serverAdapterA_s1$D_IN;
	if (cache_metadata_serverAdapterA_s2$EN)
	  cache_metadata_serverAdapterA_s2 <= `BSV_ASSIGNMENT_DELAY
	      cache_metadata_serverAdapterA_s2$D_IN;
	if (cache_metadata_serverAdapterB_cnt$EN)
	  cache_metadata_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY
	      cache_metadata_serverAdapterB_cnt$D_IN;
	if (cache_metadata_serverAdapterB_s1$EN)
	  cache_metadata_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY
	      cache_metadata_serverAdapterB_s1$D_IN;
	if (cache_metadata_serverAdapterB_s2$EN)
	  cache_metadata_serverAdapterB_s2 <= `BSV_ASSIGNMENT_DELAY
	      cache_metadata_serverAdapterB_s2$D_IN;
	if (clear_idx$EN) clear_idx <= `BSV_ASSIGNMENT_DELAY clear_idx$D_IN;
	if (dataReq$EN) dataReq <= `BSV_ASSIGNMENT_DELAY dataReq$D_IN;
	if (dataStatus$EN)
	  dataStatus <= `BSV_ASSIGNMENT_DELAY dataStatus$D_IN;
	if (instReq$EN) instReq <= `BSV_ASSIGNMENT_DELAY instReq$D_IN;
	if (instStatus$EN)
	  instStatus <= `BSV_ASSIGNMENT_DELAY instStatus$D_IN;
	if (reqTypePriority$EN)
	  reqTypePriority <= `BSV_ASSIGNMENT_DELAY reqTypePriority$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    cache_data_serverAdapterA_cnt = 4'hA;
    cache_data_serverAdapterA_s1 = 2'h2;
    cache_data_serverAdapterA_s2 = 2'h2;
    cache_data_serverAdapterB_cnt = 4'hA;
    cache_data_serverAdapterB_s1 = 2'h2;
    cache_data_serverAdapterB_s2 = 2'h2;
    cache_metadata_serverAdapterA_cnt = 4'hA;
    cache_metadata_serverAdapterA_s1 = 2'h2;
    cache_metadata_serverAdapterA_s2 = 2'h2;
    cache_metadata_serverAdapterB_cnt = 4'hA;
    cache_metadata_serverAdapterB_s1 = 2'h2;
    cache_metadata_serverAdapterB_s2 = 2'h2;
    clear_idx = 7'h2A;
    dataReq = 68'hAAAAAAAAAAAAAAAAA;
    dataStatus = 3'h2;
    instReq = 68'hAAAAAAAAAAAAAAAAA;
    instStatus = 3'h2;
    reqTypePriority = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (cache_metadata_serverAdapterA_s2[1] &&
	  (!cache_metadata_serverAdapterA_outData_beforeEnq$Q_OUT ||
	   !cache_metadata_serverAdapterA_outData_beforeDeq$Q_OUT ||
	   !cache_metadata_serverAdapterA_outData_ff$FULL_N))
	$display("ERROR: %m: mkBRAMAdapter overrun");
    if (RST_N != `BSV_RESET_VALUE)
      if (cache_metadata_serverAdapterB_s2[1] &&
	  (!cache_metadata_serverAdapterB_outData_beforeEnq$Q_OUT ||
	   !cache_metadata_serverAdapterB_outData_beforeDeq$Q_OUT ||
	   !cache_metadata_serverAdapterB_outData_ff$FULL_N))
	$display("ERROR: %m: mkBRAMAdapter overrun");
    if (RST_N != `BSV_RESET_VALUE)
      if (cache_data_serverAdapterA_s2[1] &&
	  (!cache_data_serverAdapterA_outData_beforeEnq$Q_OUT ||
	   !cache_data_serverAdapterA_outData_beforeDeq$Q_OUT ||
	   !cache_data_serverAdapterA_outData_ff$FULL_N))
	$display("ERROR: %m: mkBRAMAdapter overrun");
    if (RST_N != `BSV_RESET_VALUE)
      if (cache_data_serverAdapterB_s2[1] &&
	  (!cache_data_serverAdapterB_outData_beforeEnq$Q_OUT ||
	   !cache_data_serverAdapterB_outData_beforeDeq$Q_OUT ||
	   !cache_data_serverAdapterB_outData_ff$FULL_N))
	$display("ERROR: %m: mkBRAMAdapter overrun");
  end
  // synopsys translate_on
endmodule  // mkCacheUnified

