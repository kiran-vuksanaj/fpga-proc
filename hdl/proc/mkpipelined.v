//
// Generated by Bluespec Compiler, version 2023.07 (build 0eb551d)
//
// On Wed Jul  3 10:29:30 EDT 2024
//
//
// Ports:
// Name                         I/O  size props
// getIReq                        O    68 reg
// RDY_getIReq                    O     1 reg
// RDY_getIResp                   O     1 reg
// getDReq                        O    68 reg
// RDY_getDReq                    O     1 reg
// RDY_getDResp                   O     1 reg
// getMMIOReq                     O    68 reg
// RDY_getMMIOReq                 O     1 reg
// RDY_getMMIOResp                O     1 reg
// getPC                          O    32
// RDY_getPC                      O     1 const
// getEpoch                       O     1 reg
// RDY_getEpoch                   O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// getIResp_a                     I    68 reg
// getDResp_a                     I    68 reg
// getMMIOResp_a                  I    68 reg
// EN_getIResp                    I     1
// EN_getDResp                    I     1
// EN_getMMIOResp                 I     1
// EN_getIReq                     I     1
// EN_getDReq                     I     1
// EN_getMMIOReq                  I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkpipelined(CLK,
		   RST_N,

		   EN_getIReq,
		   getIReq,
		   RDY_getIReq,

		   getIResp_a,
		   EN_getIResp,
		   RDY_getIResp,

		   EN_getDReq,
		   getDReq,
		   RDY_getDReq,

		   getDResp_a,
		   EN_getDResp,
		   RDY_getDResp,

		   EN_getMMIOReq,
		   getMMIOReq,
		   RDY_getMMIOReq,

		   getMMIOResp_a,
		   EN_getMMIOResp,
		   RDY_getMMIOResp,

		   getPC,
		   RDY_getPC,

		   getEpoch,
		   RDY_getEpoch);
  input  CLK;
  input  RST_N;

  // actionvalue method getIReq
  input  EN_getIReq;
  output [67 : 0] getIReq;
  output RDY_getIReq;

  // action method getIResp
  input  [67 : 0] getIResp_a;
  input  EN_getIResp;
  output RDY_getIResp;

  // actionvalue method getDReq
  input  EN_getDReq;
  output [67 : 0] getDReq;
  output RDY_getDReq;

  // action method getDResp
  input  [67 : 0] getDResp_a;
  input  EN_getDResp;
  output RDY_getDResp;

  // actionvalue method getMMIOReq
  input  EN_getMMIOReq;
  output [67 : 0] getMMIOReq;
  output RDY_getMMIOReq;

  // action method getMMIOResp
  input  [67 : 0] getMMIOResp_a;
  input  EN_getMMIOResp;
  output RDY_getMMIOResp;

  // value method getPC
  output [31 : 0] getPC;
  output RDY_getPC;

  // value method getEpoch
  output getEpoch;
  output RDY_getEpoch;

  // signals for module outputs
  wire [67 : 0] getDReq, getIReq, getMMIOReq;
  wire [31 : 0] getPC;
  wire RDY_getDReq,
       RDY_getDResp,
       RDY_getEpoch,
       RDY_getIReq,
       RDY_getIResp,
       RDY_getMMIOReq,
       RDY_getMMIOResp,
       RDY_getPC,
       getEpoch;

  // inlined wires
  wire nextPc_port_0$whas, nextPc_port_1$whas;

  // register currentEpoch
  reg currentEpoch;
  wire currentEpoch$D_IN, currentEpoch$EN;

  // register fault
  reg fault;
  wire fault$D_IN, fault$EN;

  // register nextPc_register
  reg [31 : 0] nextPc_register;
  wire [31 : 0] nextPc_register$D_IN;
  wire nextPc_register$EN;

  // register starting
  reg starting;
  wire starting$D_IN, starting$EN;

  // ports of submodule d2e
  wire [168 : 0] d2e$D_IN, d2e$D_OUT;
  wire d2e$CLR, d2e$DEQ, d2e$EMPTY_N, d2e$ENQ, d2e$FULL_N;

  // ports of submodule e2w
  wire [77 : 0] e2w$D_IN, e2w$D_OUT;
  wire e2w$CLR, e2w$DEQ, e2w$EMPTY_N, e2w$ENQ, e2w$FULL_N;

  // ports of submodule f2d
  wire [64 : 0] f2d$D_IN, f2d$D_OUT;
  wire f2d$CLR, f2d$DEQ, f2d$EMPTY_N, f2d$ENQ, f2d$FULL_N;

  // ports of submodule fromDmem
  wire [67 : 0] fromDmem$D_IN, fromDmem$D_OUT;
  wire fromDmem$CLR,
       fromDmem$DEQ,
       fromDmem$EMPTY_N,
       fromDmem$ENQ,
       fromDmem$FULL_N;

  // ports of submodule fromImem
  wire [67 : 0] fromImem$D_IN, fromImem$D_OUT;
  wire fromImem$CLR,
       fromImem$DEQ,
       fromImem$EMPTY_N,
       fromImem$ENQ,
       fromImem$FULL_N;

  // ports of submodule fromMMIO
  wire [67 : 0] fromMMIO$D_IN, fromMMIO$D_OUT;
  wire fromMMIO$CLR,
       fromMMIO$DEQ,
       fromMMIO$EMPTY_N,
       fromMMIO$ENQ,
       fromMMIO$FULL_N;

  // ports of submodule nextPc_readBeforeLaterWrites_0
  wire nextPc_readBeforeLaterWrites_0$D_IN,
       nextPc_readBeforeLaterWrites_0$EN,
       nextPc_readBeforeLaterWrites_0$Q_OUT;

  // ports of submodule nextPc_readBeforeLaterWrites_1
  wire nextPc_readBeforeLaterWrites_1$D_IN,
       nextPc_readBeforeLaterWrites_1$EN,
       nextPc_readBeforeLaterWrites_1$Q_OUT;

  // ports of submodule regFile
  wire [31 : 0] regFile$getRs1, regFile$getRs2, regFile$writeRd_data;
  wire [4 : 0] regFile$getRs1_src, regFile$getRs2_src, regFile$writeRd_dst;
  wire regFile$EN_writeRd;

  // ports of submodule scoreboard
  wire [4 : 0] scoreboard$insert_dst,
	       scoreboard$remove1_dst,
	       scoreboard$remove2_dst,
	       scoreboard$search1_src,
	       scoreboard$search2_src;
  wire scoreboard$EN_insert,
       scoreboard$EN_remove1,
       scoreboard$EN_remove2,
       scoreboard$search1,
       scoreboard$search2;

  // ports of submodule toDmem
  wire [67 : 0] toDmem$D_IN, toDmem$D_OUT;
  wire toDmem$CLR, toDmem$DEQ, toDmem$EMPTY_N, toDmem$ENQ, toDmem$FULL_N;

  // ports of submodule toImem
  wire [67 : 0] toImem$D_IN, toImem$D_OUT;
  wire toImem$CLR, toImem$DEQ, toImem$EMPTY_N, toImem$ENQ, toImem$FULL_N;

  // ports of submodule toMMIO
  wire [67 : 0] toMMIO$D_IN, toMMIO$D_OUT;
  wire toMMIO$CLR, toMMIO$DEQ, toMMIO$EMPTY_N, toMMIO$ENQ, toMMIO$FULL_N;

  // rule scheduling signals
  wire WILL_FIRE_RL_decode, WILL_FIRE_RL_execute, WILL_FIRE_RL_writeback;

  // remaining internal signals
  reg [31 : 0] rd_val__h5331, v__h5803;
  reg [3 : 0] CASE_d2eD_OUT_BITS_142_TO_141_0b0_byte_en520__ETC__q5;
  reg [2 : 0] CASE_fromImemD_OUT_BITS_6_TO_2_0b0_0_0b1_0_0b_ETC__q11;
  reg CASE_fromImemD_OUT_BITS_14_TO_12_0b0_fromImem_ETC__q8,
      CASE_fromImemD_OUT_BITS_31_TO_20_0b0_fromImem_ETC__q6,
      CASE_fromImemD_OUT_BITS_6_TO_0_0b100011_fromI_ETC__q9,
      CASE_fromImemD_OUT_BITS_6_TO_0_0b1100011_from_ETC__q7,
      CASE_fromImemD_OUT_BITS_6_TO_0_0b11_fromImem_ETC__q10,
      IF_d2e_first__79_BITS_143_TO_141_64_EQ_0b0_65__ETC___d280;
  wire [31 : 0] IF_d2e_first__79_BIT_164_88_AND_IF_d2e_first___ETC___d224,
		_theResult___snd__h4852,
		_theResult___snd__h4918,
		_theResult___snd__h4937,
		addr___1__h3917,
		alu_src2__h5328,
		controlResult_nextPC__h4759,
		d2eD_OUT_BITS_63_TO_32__q4,
		d2e_first__79_BITS_63_TO_32_87_PLUS_IF_d2e_fir_ETC___d227,
		data__h3783,
		def__h1427,
		imm__h3778,
		incPC__h4754,
		mem_data__h5917,
		mem_data__h5918,
		nextPC__h4854,
		nextPC__h4920,
		truePpc__h4743,
		v__h4747,
		x1_avValue_snd_fst__h5204,
		x__h1836,
		x__h3725,
		x__h3734,
		x__h4618,
		x_wget__h1115,
		x_wget__h1164;
  wire [20 : 0] x__h4314;
  wire [15 : 0] mem_data918_BITS_15_TO_0__q2;
  wire [12 : 0] x__h4151;
  wire [11 : 0] d2eD_OUT_BITS_160_TO_149__q3, x__h4081;
  wire [7 : 0] mem_data918_BITS_7_TO_0__q1;
  wire [4 : 0] shift_amount__h3914, x__h5969;
  wire [3 : 0] byte_en__h4520,
	       byte_en__h4566,
	       byte_en__h4592,
	       type_mem__h3919;
  wire IF_d2e_first__79_BITS_135_TO_133_53_EQ_0b110_5_ETC___d287,
       IF_e2w_i_notEmpty__38_AND_e2w_first__39_BIT_72_ETC___d349,
       NOT_scoreboard_search1_fromImem_first__9_BITS__ETC___d51,
       currentEpoch_1_EQ_d2e_first__79_BIT_64_80___d181,
       d2e_first__79_BITS_63_TO_32_87_EQ_d2e_first__7_ETC___d266,
       d2e_first__79_BITS_63_TO_32_87_SLT_d2e_first___ETC___d270,
       d2e_first__79_BITS_63_TO_32_87_ULT_d2e_first___ETC___d274,
       isMMIO___d230,
       x__h5484,
       x__h5491;

  // actionvalue method getIReq
  assign getIReq = toImem$D_OUT ;
  assign RDY_getIReq = toImem$EMPTY_N ;

  // action method getIResp
  assign RDY_getIResp = fromImem$FULL_N ;

  // actionvalue method getDReq
  assign getDReq = toDmem$D_OUT ;
  assign RDY_getDReq = toDmem$EMPTY_N ;

  // action method getDResp
  assign RDY_getDResp = fromDmem$FULL_N ;

  // actionvalue method getMMIOReq
  assign getMMIOReq = toMMIO$D_OUT ;
  assign RDY_getMMIOReq = toMMIO$EMPTY_N ;

  // action method getMMIOResp
  assign RDY_getMMIOResp = fromMMIO$FULL_N ;

  // value method getPC
  assign getPC = nextPc_port_0$whas ? x_wget__h1115 : nextPc_register ;
  assign RDY_getPC = 1'd1 ;

  // value method getEpoch
  assign getEpoch = currentEpoch ;
  assign RDY_getEpoch = 1'd1 ;

  // submodule d2e
  FIFO2 #(.width(32'd169), .guarded(1'd1)) d2e(.RST(RST_N),
					       .CLK(CLK),
					       .D_IN(d2e$D_IN),
					       .ENQ(d2e$ENQ),
					       .DEQ(d2e$DEQ),
					       .CLR(d2e$CLR),
					       .D_OUT(d2e$D_OUT),
					       .FULL_N(d2e$FULL_N),
					       .EMPTY_N(d2e$EMPTY_N));

  // submodule e2w
  FIFO2 #(.width(32'd78), .guarded(1'd1)) e2w(.RST(RST_N),
					      .CLK(CLK),
					      .D_IN(e2w$D_IN),
					      .ENQ(e2w$ENQ),
					      .DEQ(e2w$DEQ),
					      .CLR(e2w$CLR),
					      .D_OUT(e2w$D_OUT),
					      .FULL_N(e2w$FULL_N),
					      .EMPTY_N(e2w$EMPTY_N));

  // submodule f2d
  FIFO2 #(.width(32'd65), .guarded(1'd1)) f2d(.RST(RST_N),
					      .CLK(CLK),
					      .D_IN(f2d$D_IN),
					      .ENQ(f2d$ENQ),
					      .DEQ(f2d$DEQ),
					      .CLR(f2d$CLR),
					      .D_OUT(f2d$D_OUT),
					      .FULL_N(f2d$FULL_N),
					      .EMPTY_N(f2d$EMPTY_N));

  // submodule fromDmem
  FIFO2 #(.width(32'd68), .guarded(1'd1)) fromDmem(.RST(RST_N),
						   .CLK(CLK),
						   .D_IN(fromDmem$D_IN),
						   .ENQ(fromDmem$ENQ),
						   .DEQ(fromDmem$DEQ),
						   .CLR(fromDmem$CLR),
						   .D_OUT(fromDmem$D_OUT),
						   .FULL_N(fromDmem$FULL_N),
						   .EMPTY_N(fromDmem$EMPTY_N));

  // submodule fromImem
  FIFO2 #(.width(32'd68), .guarded(1'd1)) fromImem(.RST(RST_N),
						   .CLK(CLK),
						   .D_IN(fromImem$D_IN),
						   .ENQ(fromImem$ENQ),
						   .DEQ(fromImem$DEQ),
						   .CLR(fromImem$CLR),
						   .D_OUT(fromImem$D_OUT),
						   .FULL_N(fromImem$FULL_N),
						   .EMPTY_N(fromImem$EMPTY_N));

  // submodule fromMMIO
  FIFO2 #(.width(32'd68), .guarded(1'd1)) fromMMIO(.RST(RST_N),
						   .CLK(CLK),
						   .D_IN(fromMMIO$D_IN),
						   .ENQ(fromMMIO$ENQ),
						   .DEQ(fromMMIO$DEQ),
						   .CLR(fromMMIO$CLR),
						   .D_OUT(fromMMIO$D_OUT),
						   .FULL_N(fromMMIO$FULL_N),
						   .EMPTY_N(fromMMIO$EMPTY_N));

  // submodule nextPc_readBeforeLaterWrites_0
  RevertReg #(.width(32'd1),
	      .init(1'd1)) nextPc_readBeforeLaterWrites_0(.CLK(CLK),
							  .D_IN(nextPc_readBeforeLaterWrites_0$D_IN),
							  .EN(nextPc_readBeforeLaterWrites_0$EN),
							  .Q_OUT(nextPc_readBeforeLaterWrites_0$Q_OUT));

  // submodule nextPc_readBeforeLaterWrites_1
  RevertReg #(.width(32'd1),
	      .init(1'd1)) nextPc_readBeforeLaterWrites_1(.CLK(CLK),
							  .D_IN(nextPc_readBeforeLaterWrites_1$D_IN),
							  .EN(nextPc_readBeforeLaterWrites_1$EN),
							  .Q_OUT(nextPc_readBeforeLaterWrites_1$Q_OUT));

  // submodule regFile
  mkRegFile regFile(.CLK(CLK),
		    .RST_N(RST_N),
		    .getRs1_src(regFile$getRs1_src),
		    .getRs2_src(regFile$getRs2_src),
		    .writeRd_data(regFile$writeRd_data),
		    .writeRd_dst(regFile$writeRd_dst),
		    .EN_writeRd(regFile$EN_writeRd),
		    .getRs1(regFile$getRs1),
		    .RDY_getRs1(),
		    .getRs2(regFile$getRs2),
		    .RDY_getRs2(),
		    .RDY_writeRd());

  // submodule scoreboard
  mkBitScoreboard scoreboard(.CLK(CLK),
			     .RST_N(RST_N),
			     .insert_dst(scoreboard$insert_dst),
			     .remove1_dst(scoreboard$remove1_dst),
			     .remove2_dst(scoreboard$remove2_dst),
			     .search1_src(scoreboard$search1_src),
			     .search2_src(scoreboard$search2_src),
			     .EN_insert(scoreboard$EN_insert),
			     .EN_remove1(scoreboard$EN_remove1),
			     .EN_remove2(scoreboard$EN_remove2),
			     .search1(scoreboard$search1),
			     .RDY_search1(),
			     .search2(scoreboard$search2),
			     .RDY_search2(),
			     .RDY_insert(),
			     .RDY_remove1(),
			     .RDY_remove2());

  // submodule toDmem
  FIFO2 #(.width(32'd68), .guarded(1'd1)) toDmem(.RST(RST_N),
						 .CLK(CLK),
						 .D_IN(toDmem$D_IN),
						 .ENQ(toDmem$ENQ),
						 .DEQ(toDmem$DEQ),
						 .CLR(toDmem$CLR),
						 .D_OUT(toDmem$D_OUT),
						 .FULL_N(toDmem$FULL_N),
						 .EMPTY_N(toDmem$EMPTY_N));

  // submodule toImem
  FIFO2 #(.width(32'd68), .guarded(1'd1)) toImem(.RST(RST_N),
						 .CLK(CLK),
						 .D_IN(toImem$D_IN),
						 .ENQ(toImem$ENQ),
						 .DEQ(toImem$DEQ),
						 .CLR(toImem$CLR),
						 .D_OUT(toImem$D_OUT),
						 .FULL_N(toImem$FULL_N),
						 .EMPTY_N(toImem$EMPTY_N));

  // submodule toMMIO
  FIFO2 #(.width(32'd68), .guarded(1'd1)) toMMIO(.RST(RST_N),
						 .CLK(CLK),
						 .D_IN(toMMIO$D_IN),
						 .ENQ(toMMIO$ENQ),
						 .DEQ(toMMIO$DEQ),
						 .CLR(toMMIO$CLR),
						 .D_OUT(toMMIO$D_OUT),
						 .FULL_N(toMMIO$FULL_N),
						 .EMPTY_N(toMMIO$EMPTY_N));

  // rule RL_decode
  assign WILL_FIRE_RL_decode =
	     fromImem$EMPTY_N && f2d$EMPTY_N && d2e$FULL_N && !starting ;

  // rule RL_execute
  assign WILL_FIRE_RL_execute =
	     d2e$EMPTY_N && e2w$FULL_N && toMMIO$FULL_N && toDmem$FULL_N &&
	     !starting ;

  // rule RL_writeback
  assign WILL_FIRE_RL_writeback =
	     e2w$EMPTY_N &&
	     (e2w$D_OUT[6] || e2w$D_OUT[4:3] != 2'b0 ||
	      IF_e2w_i_notEmpty__38_AND_e2w_first__39_BIT_72_ETC___d349) &&
	     !starting ;

  // inlined wires
  assign nextPc_port_0$whas = toImem$FULL_N && f2d$FULL_N && !starting ;
  assign nextPc_port_1$whas =
	     WILL_FIRE_RL_execute &&
	     currentEpoch_1_EQ_d2e_first__79_BIT_64_80___d181 &&
	     !IF_d2e_first__79_BITS_135_TO_133_53_EQ_0b110_5_ETC___d287 ;

  // register currentEpoch
  assign currentEpoch$D_IN = ~currentEpoch ;
  assign currentEpoch$EN = nextPc_port_1$whas ;

  // register fault
  assign fault$D_IN = 1'd1 ;
  assign fault$EN = WILL_FIRE_RL_writeback && !e2w$D_OUT[39] ;

  // register nextPc_register
  assign nextPc_register$D_IN =
	     nextPc_port_1$whas ? x_wget__h1164 : def__h1427 ;
  assign nextPc_register$EN = 1'd1 ;

  // register starting
  assign starting$D_IN = 1'd0 ;
  assign starting$EN = starting ;

  // submodule d2e
  assign d2e$D_IN =
	     { CASE_fromImemD_OUT_BITS_6_TO_0_0b11_fromImem_ETC__q10,
	       fromImem$D_OUT[6:2] == 5'b11000 ||
	       fromImem$D_OUT[6:2] == 5'b0 ||
	       fromImem$D_OUT[6:2] == 5'b01000 ||
	       fromImem$D_OUT[6:2] == 5'b01100 ||
	       fromImem$D_OUT[6:2] == 5'b11001 ||
	       fromImem$D_OUT[6:2] == 5'b00100,
	       fromImem$D_OUT[6:2] == 5'b11000 ||
	       fromImem$D_OUT[6:2] == 5'b01000 ||
	       fromImem$D_OUT[6:2] == 5'b01100,
	       fromImem$D_OUT[6:2] == 5'b01101 ||
	       fromImem$D_OUT[6:2] == 5'b11011 ||
	       fromImem$D_OUT[6:2] == 5'b0 ||
	       fromImem$D_OUT[6:2] == 5'b01100 ||
	       fromImem$D_OUT[6:2] == 5'b11001 ||
	       fromImem$D_OUT[6:2] == 5'b00100 ||
	       fromImem$D_OUT[6:2] == 5'b00101,
	       fromImem$D_OUT[6:2] == 5'b0 ||
	       fromImem$D_OUT[6:2] == 5'b00001 ||
	       fromImem$D_OUT[6:2] == 5'b00100 ||
	       fromImem$D_OUT[6:2] == 5'b00110 ||
	       fromImem$D_OUT[6:2] == 5'b11001 ||
	       fromImem$D_OUT[6:2] == 5'b00101 ||
	       fromImem$D_OUT[6:2] == 5'b01101 ||
	       fromImem$D_OUT[6:2] == 5'b01000 ||
	       fromImem$D_OUT[6:2] == 5'b01001 ||
	       fromImem$D_OUT[6:2] == 5'b11000 ||
	       fromImem$D_OUT[6:2] == 5'b11011,
	       CASE_fromImemD_OUT_BITS_6_TO_2_0b0_0_0b1_0_0b_ETC__q11,
	       fromImem$D_OUT[31:0],
	       f2d$D_OUT,
	       x__h3725,
	       x__h3734 } ;
  assign d2e$ENQ =
	     WILL_FIRE_RL_decode && !scoreboard$search1 &&
	     !scoreboard$search2 ;
  assign d2e$DEQ = WILL_FIRE_RL_execute ;
  assign d2e$CLR = 1'b0 ;

  // submodule e2w
  assign e2w$D_IN =
	     { !d2e$D_OUT[135] && d2e$D_OUT[133:132] == 2'b0 &&
	       d2e$D_OUT[143],
	       d2e$D_OUT[142:141],
	       d2e_first__79_BITS_63_TO_32_87_PLUS_IF_d2e_fir_ETC___d227[1:0],
	       !d2e$D_OUT[135] && d2e$D_OUT[133:132] == 2'b0 && isMMIO___d230,
	       v__h4747,
	       d2e$D_OUT[168:129] } ;
  assign e2w$ENQ =
	     WILL_FIRE_RL_execute &&
	     currentEpoch_1_EQ_d2e_first__79_BIT_64_80___d181 ;
  assign e2w$DEQ = WILL_FIRE_RL_writeback ;
  assign e2w$CLR = 1'b0 ;

  // submodule f2d
  assign f2d$D_IN = { nextPc_register, x__h1836, currentEpoch } ;
  assign f2d$ENQ = nextPc_port_0$whas ;
  assign f2d$DEQ =
	     WILL_FIRE_RL_decode && !scoreboard$search1 &&
	     !scoreboard$search2 ;
  assign f2d$CLR = 1'b0 ;

  // submodule fromDmem
  assign fromDmem$D_IN = getDResp_a ;
  assign fromDmem$ENQ = EN_getDResp ;
  assign fromDmem$DEQ =
	     WILL_FIRE_RL_writeback && !e2w$D_OUT[6] &&
	     e2w$D_OUT[4:3] == 2'b0 &&
	     !e2w$D_OUT[72] ;
  assign fromDmem$CLR = 1'b0 ;

  // submodule fromImem
  assign fromImem$D_IN = getIResp_a ;
  assign fromImem$ENQ = EN_getIResp ;
  assign fromImem$DEQ =
	     WILL_FIRE_RL_decode && !scoreboard$search1 &&
	     !scoreboard$search2 ;
  assign fromImem$CLR = 1'b0 ;

  // submodule fromMMIO
  assign fromMMIO$D_IN = getMMIOResp_a ;
  assign fromMMIO$ENQ = EN_getMMIOResp ;
  assign fromMMIO$DEQ =
	     WILL_FIRE_RL_writeback && !e2w$D_OUT[6] &&
	     e2w$D_OUT[4:3] == 2'b0 &&
	     e2w$D_OUT[72] ;
  assign fromMMIO$CLR = 1'b0 ;

  // submodule nextPc_readBeforeLaterWrites_0
  assign nextPc_readBeforeLaterWrites_0$D_IN = 1'd1 ;
  assign nextPc_readBeforeLaterWrites_0$EN = nextPc_port_0$whas ;

  // submodule nextPc_readBeforeLaterWrites_1
  assign nextPc_readBeforeLaterWrites_1$D_IN = 1'd1 ;
  assign nextPc_readBeforeLaterWrites_1$EN = nextPc_port_1$whas ;

  // submodule regFile
  assign regFile$getRs1_src = fromImem$D_OUT[19:15] ;
  assign regFile$getRs2_src = fromImem$D_OUT[24:20] ;
  assign regFile$writeRd_data =
	     (!e2w$D_OUT[6] && e2w$D_OUT[4:3] == 2'b0) ?
	       v__h5803 :
	       e2w$D_OUT[71:40] ;
  assign regFile$writeRd_dst = e2w$D_OUT[11:7] ;
  assign regFile$EN_writeRd =
	     WILL_FIRE_RL_writeback && e2w$D_OUT[36] &&
	     e2w$D_OUT[11:7] != 5'd0 ;

  // submodule scoreboard
  assign scoreboard$insert_dst = fromImem$D_OUT[11:7] ;
  assign scoreboard$remove1_dst = d2e$D_OUT[140:136] ;
  assign scoreboard$remove2_dst = e2w$D_OUT[11:7] ;
  assign scoreboard$search1_src = fromImem$D_OUT[19:15] ;
  assign scoreboard$search2_src = fromImem$D_OUT[24:20] ;
  assign scoreboard$EN_insert =
	     WILL_FIRE_RL_decode &&
	     NOT_scoreboard_search1_fromImem_first__9_BITS__ETC___d51 ;
  assign scoreboard$EN_remove1 =
	     WILL_FIRE_RL_execute &&
	     !currentEpoch_1_EQ_d2e_first__79_BIT_64_80___d181 &&
	     d2e$D_OUT[165] ;
  assign scoreboard$EN_remove2 = WILL_FIRE_RL_writeback && e2w$D_OUT[36] ;

  // submodule toDmem
  assign toDmem$D_IN = { type_mem__h3919, addr___1__h3917, x__h4618 } ;
  assign toDmem$ENQ =
	     WILL_FIRE_RL_execute &&
	     currentEpoch_1_EQ_d2e_first__79_BIT_64_80___d181 &&
	     !d2e$D_OUT[135] &&
	     d2e$D_OUT[133:132] == 2'b0 &&
	     !isMMIO___d230 ;
  assign toDmem$DEQ = EN_getDReq ;
  assign toDmem$CLR = 1'b0 ;

  // submodule toImem
  assign toImem$D_IN = { 4'd0, nextPc_register, 32'd0 } ;
  assign toImem$ENQ = nextPc_port_0$whas ;
  assign toImem$DEQ = EN_getIReq ;
  assign toImem$CLR = 1'b0 ;

  // submodule toMMIO
  assign toMMIO$D_IN = { type_mem__h3919, addr___1__h3917, x__h4618 } ;
  assign toMMIO$ENQ =
	     WILL_FIRE_RL_execute &&
	     currentEpoch_1_EQ_d2e_first__79_BIT_64_80___d181 &&
	     !d2e$D_OUT[135] &&
	     d2e$D_OUT[133:132] == 2'b0 &&
	     isMMIO___d230 ;
  assign toMMIO$DEQ = EN_getMMIOReq ;
  assign toMMIO$CLR = 1'b0 ;

  // remaining internal signals
  module_isMMIO instance_isMMIO_0(.isMMIO_addr(addr___1__h3917),
				  .isMMIO(isMMIO___d230));
  assign IF_d2e_first__79_BITS_135_TO_133_53_EQ_0b110_5_ETC___d287 =
	     controlResult_nextPC__h4759 == d2e$D_OUT[96:65] ;
  assign IF_d2e_first__79_BIT_164_88_AND_IF_d2e_first___ETC___d224 =
	     (d2e$D_OUT[164] && d2e$D_OUT[163:161] == 3'd2) ?
	       { {19{x__h4151[12]}}, x__h4151 } :
	       ((d2e$D_OUT[164] && d2e$D_OUT[163:161] == 3'd3) ?
		  { d2e$D_OUT[160:141], 12'b0 } :
		  ((d2e$D_OUT[164] && d2e$D_OUT[163:161] == 3'd4) ?
		     { {11{x__h4314[20]}}, x__h4314 } :
		     32'd0)) ;
  assign IF_e2w_i_notEmpty__38_AND_e2w_first__39_BIT_72_ETC___d349 =
	     (e2w$EMPTY_N && e2w$D_OUT[72]) ?
	       fromMMIO$EMPTY_N :
	       fromDmem$EMPTY_N ;
  assign NOT_scoreboard_search1_fromImem_first__9_BITS__ETC___d51 =
	     !scoreboard$search1 && !scoreboard$search2 &&
	     (fromImem$D_OUT[6:2] == 5'b01101 ||
	      fromImem$D_OUT[6:2] == 5'b11011 ||
	      fromImem$D_OUT[6:2] == 5'b0 ||
	      fromImem$D_OUT[6:2] == 5'b01100 ||
	      fromImem$D_OUT[6:2] == 5'b11001 ||
	      fromImem$D_OUT[6:2] == 5'b00100 ||
	      fromImem$D_OUT[6:2] == 5'b00101) ;
  assign _theResult___snd__h4852 =
	     (d2e$D_OUT[131] && d2e$D_OUT[132]) ?
	       nextPC__h4854 :
	       _theResult___snd__h4918 ;
  assign _theResult___snd__h4918 =
	     (d2e$D_OUT[131] && !d2e$D_OUT[132]) ?
	       nextPC__h4920 :
	       _theResult___snd__h4937 ;
  assign _theResult___snd__h4937 =
	     IF_d2e_first__79_BITS_143_TO_141_64_EQ_0b0_65__ETC___d280 ?
	       nextPC__h4854 :
	       incPC__h4754 ;
  assign addr___1__h3917 =
	     { d2e_first__79_BITS_63_TO_32_87_PLUS_IF_d2e_fir_ETC___d227[31:2],
	       2'b0 } ;
  assign alu_src2__h5328 = d2e$D_OUT[134] ? d2e$D_OUT[31:0] : imm__h3778 ;
  assign byte_en__h4520 =
	     4'b0001 <<
	     d2e_first__79_BITS_63_TO_32_87_PLUS_IF_d2e_fir_ETC___d227[1:0] ;
  assign byte_en__h4566 =
	     4'b0011 <<
	     d2e_first__79_BITS_63_TO_32_87_PLUS_IF_d2e_fir_ETC___d227[1:0] ;
  assign byte_en__h4592 =
	     4'b1111 <<
	     d2e_first__79_BITS_63_TO_32_87_PLUS_IF_d2e_fir_ETC___d227[1:0] ;
  assign controlResult_nextPC__h4759 =
	     (d2e$D_OUT[135:133] == 3'b110) ?
	       _theResult___snd__h4852 :
	       incPC__h4754 ;
  assign currentEpoch_1_EQ_d2e_first__79_BIT_64_80___d181 =
	     currentEpoch == d2e$D_OUT[64] ;
  assign d2eD_OUT_BITS_160_TO_149__q3 = d2e$D_OUT[160:149] ;
  assign d2eD_OUT_BITS_63_TO_32__q4 = d2e$D_OUT[63:32] ;
  assign d2e_first__79_BITS_63_TO_32_87_EQ_d2e_first__7_ETC___d266 =
	     d2e$D_OUT[63:32] == d2e$D_OUT[31:0] ;
  assign d2e_first__79_BITS_63_TO_32_87_PLUS_IF_d2e_fir_ETC___d227 =
	     d2e$D_OUT[63:32] + imm__h3778 ;
  assign d2e_first__79_BITS_63_TO_32_87_SLT_d2e_first___ETC___d270 =
	     (d2e$D_OUT[63:32] ^ 32'h80000000) <
	     (d2e$D_OUT[31:0] ^ 32'h80000000) ;
  assign d2e_first__79_BITS_63_TO_32_87_ULT_d2e_first___ETC___d274 =
	     d2e$D_OUT[63:32] < d2e$D_OUT[31:0] ;
  assign data__h3783 =
	     (d2e$D_OUT[131] && d2e$D_OUT[134]) ?
	       imm__h3778 :
	       ((d2e$D_OUT[131] && !d2e$D_OUT[134]) ?
		  nextPC__h4854 :
		  rd_val__h5331) ;
  assign def__h1427 = nextPc_port_0$whas ? x_wget__h1115 : nextPc_register ;
  assign imm__h3778 =
	     (d2e$D_OUT[164] && d2e$D_OUT[163:161] == 3'd0) ?
	       { {20{d2eD_OUT_BITS_160_TO_149__q3[11]}},
		 d2eD_OUT_BITS_160_TO_149__q3 } :
	       ((d2e$D_OUT[164] && d2e$D_OUT[163:161] == 3'd1) ?
		  { {20{x__h4081[11]}}, x__h4081 } :
		  IF_d2e_first__79_BIT_164_88_AND_IF_d2e_first___ETC___d224) ;
  assign incPC__h4754 = d2e$D_OUT[128:97] + 32'd4 ;
  assign mem_data918_BITS_15_TO_0__q2 = mem_data__h5918[15:0] ;
  assign mem_data918_BITS_7_TO_0__q1 = mem_data__h5918[7:0] ;
  assign mem_data__h5917 =
	     e2w$D_OUT[72] ? fromMMIO$D_OUT[31:0] : fromDmem$D_OUT[31:0] ;
  assign mem_data__h5918 = mem_data__h5917 >> x__h5969 ;
  assign nextPC__h4854 = d2e$D_OUT[128:97] + imm__h3778 ;
  assign nextPC__h4920 =
	     { d2e_first__79_BITS_63_TO_32_87_PLUS_IF_d2e_fir_ETC___d227[31:1],
	       1'd0 } ;
  assign shift_amount__h3914 =
	     { d2e_first__79_BITS_63_TO_32_87_PLUS_IF_d2e_fir_ETC___d227[1:0],
	       3'b0 } ;
  assign truePpc__h4743 = fault ? 32'd0 : controlResult_nextPC__h4759 ;
  assign type_mem__h3919 =
	     d2e$D_OUT[134] ?
	       CASE_d2eD_OUT_BITS_142_TO_141_0b0_byte_en520__ETC__q5 :
	       4'd0 ;
  assign v__h4747 =
	     IF_d2e_first__79_BITS_135_TO_133_53_EQ_0b110_5_ETC___d287 ?
	       x1_avValue_snd_fst__h5204 :
	       incPC__h4754 ;
  assign x1_avValue_snd_fst__h5204 =
	     (!d2e$D_OUT[135] && d2e$D_OUT[133:132] == 2'b0) ?
	       x__h4618 :
	       data__h3783 ;
  assign x__h1836 = nextPc_register + 32'd4 ;
  assign x__h3725 = (fromImem$D_OUT[19:15] == 5'b0) ? 32'd0 : regFile$getRs1 ;
  assign x__h3734 = (fromImem$D_OUT[24:20] == 5'd0) ? 32'd0 : regFile$getRs2 ;
  assign x__h4081 = { d2e$D_OUT[160:154], d2e$D_OUT[140:136] } ;
  assign x__h4151 =
	     { d2e$D_OUT[160],
	       d2e$D_OUT[136],
	       d2e$D_OUT[159:154],
	       d2e$D_OUT[140:137],
	       1'b0 } ;
  assign x__h4314 =
	     { d2e$D_OUT[160],
	       d2e$D_OUT[148:141],
	       d2e$D_OUT[149],
	       d2e$D_OUT[159:150],
	       1'b0 } ;
  assign x__h4618 = d2e$D_OUT[31:0] << shift_amount__h3914 ;
  assign x__h5484 =
	     (d2e$D_OUT[63:32] ^ 32'h80000000) <
	     (alu_src2__h5328 ^ 32'h80000000) ;
  assign x__h5491 = d2e$D_OUT[63:32] < alu_src2__h5328 ;
  assign x__h5969 = { e2w$D_OUT[74:73], 3'b0 } ;
  assign x_wget__h1115 =
	     nextPc_readBeforeLaterWrites_0$Q_OUT ?
	       x__h1836 :
	       nextPc_register ;
  assign x_wget__h1164 =
	     nextPc_readBeforeLaterWrites_1$Q_OUT ?
	       truePpc__h4743 :
	       def__h1427 ;
  always@(e2w$D_OUT or
	  mem_data918_BITS_7_TO_0__q1 or
	  mem_data918_BITS_15_TO_0__q2 or mem_data__h5918)
  begin
    case (e2w$D_OUT[77:75])
      3'b0:
	  v__h5803 =
	      { {24{mem_data918_BITS_7_TO_0__q1[7]}},
		mem_data918_BITS_7_TO_0__q1 };
      3'b001:
	  v__h5803 =
	      { {16{mem_data918_BITS_15_TO_0__q2[15]}},
		mem_data918_BITS_15_TO_0__q2 };
      3'b010: v__h5803 = mem_data__h5918;
      3'b100: v__h5803 = { 24'd0, mem_data__h5918[7:0] };
      3'b101: v__h5803 = { 16'd0, mem_data__h5918[15:0] };
      default: v__h5803 = e2w$D_OUT[71:40];
    endcase
  end
  always@(d2e$D_OUT or
	  d2e_first__79_BITS_63_TO_32_87_ULT_d2e_first___ETC___d274 or
	  d2e_first__79_BITS_63_TO_32_87_EQ_d2e_first__7_ETC___d266 or
	  d2e_first__79_BITS_63_TO_32_87_SLT_d2e_first___ETC___d270)
  begin
    case (d2e$D_OUT[143:141])
      3'b0:
	  IF_d2e_first__79_BITS_143_TO_141_64_EQ_0b0_65__ETC___d280 =
	      d2e_first__79_BITS_63_TO_32_87_EQ_d2e_first__7_ETC___d266;
      3'b001:
	  IF_d2e_first__79_BITS_143_TO_141_64_EQ_0b0_65__ETC___d280 =
	      !d2e_first__79_BITS_63_TO_32_87_EQ_d2e_first__7_ETC___d266;
      3'b100:
	  IF_d2e_first__79_BITS_143_TO_141_64_EQ_0b0_65__ETC___d280 =
	      d2e_first__79_BITS_63_TO_32_87_SLT_d2e_first___ETC___d270;
      3'b101:
	  IF_d2e_first__79_BITS_143_TO_141_64_EQ_0b0_65__ETC___d280 =
	      !d2e_first__79_BITS_63_TO_32_87_SLT_d2e_first___ETC___d270;
      3'b110:
	  IF_d2e_first__79_BITS_143_TO_141_64_EQ_0b0_65__ETC___d280 =
	      d2e_first__79_BITS_63_TO_32_87_ULT_d2e_first___ETC___d274;
      default: IF_d2e_first__79_BITS_143_TO_141_64_EQ_0b0_65__ETC___d280 =
		   !d2e_first__79_BITS_63_TO_32_87_ULT_d2e_first___ETC___d274;
    endcase
  end
  always@(d2e$D_OUT or
	  alu_src2__h5328 or
	  x__h5484 or x__h5491 or d2eD_OUT_BITS_63_TO_32__q4)
  begin
    case (d2e$D_OUT[143:141])
      3'b0:
	  rd_val__h5331 =
	      (d2e$D_OUT[134] && d2e$D_OUT[159]) ?
		d2e$D_OUT[63:32] - alu_src2__h5328 :
		d2e$D_OUT[63:32] + alu_src2__h5328;
      3'b001: rd_val__h5331 = d2e$D_OUT[63:32] << alu_src2__h5328[4:0];
      3'b010: rd_val__h5331 = { 31'd0, x__h5484 };
      3'b011: rd_val__h5331 = { 31'd0, x__h5491 };
      3'b100: rd_val__h5331 = d2e$D_OUT[63:32] ^ alu_src2__h5328;
      3'b101:
	  rd_val__h5331 =
	      d2e$D_OUT[159] ?
		d2e$D_OUT[63:32] >> alu_src2__h5328[4:0] |
		~(32'hFFFFFFFF >> alu_src2__h5328[4:0]) &
		{32{d2eD_OUT_BITS_63_TO_32__q4[31]}} :
		d2e$D_OUT[63:32] >> alu_src2__h5328[4:0];
      3'b110: rd_val__h5331 = d2e$D_OUT[63:32] | alu_src2__h5328;
      3'b111: rd_val__h5331 = d2e$D_OUT[63:32] & alu_src2__h5328;
    endcase
  end
  always@(d2e$D_OUT or byte_en__h4520 or byte_en__h4566 or byte_en__h4592)
  begin
    case (d2e$D_OUT[142:141])
      2'b0:
	  CASE_d2eD_OUT_BITS_142_TO_141_0b0_byte_en520__ETC__q5 =
	      byte_en__h4520;
      2'b01:
	  CASE_d2eD_OUT_BITS_142_TO_141_0b0_byte_en520__ETC__q5 =
	      byte_en__h4566;
      2'b10:
	  CASE_d2eD_OUT_BITS_142_TO_141_0b0_byte_en520__ETC__q5 =
	      byte_en__h4592;
      2'd3: CASE_d2eD_OUT_BITS_142_TO_141_0b0_byte_en520__ETC__q5 = 4'd0;
    endcase
  end
  always@(fromImem$D_OUT)
  begin
    case (fromImem$D_OUT[31:20])
      12'b0, 12'b000000000001, 12'b001100000010:
	  CASE_fromImemD_OUT_BITS_31_TO_20_0b0_fromImem_ETC__q6 =
	      fromImem$D_OUT[19:15] == 5'b0;
      default: CASE_fromImemD_OUT_BITS_31_TO_20_0b0_fromImem_ETC__q6 =
		   fromImem$D_OUT[31:20] == 12'b000100000101 &&
		   fromImem$D_OUT[19:15] == 5'b0;
    endcase
  end
  always@(fromImem$D_OUT or
	  CASE_fromImemD_OUT_BITS_31_TO_20_0b0_fromImem_ETC__q6)
  begin
    case (fromImem$D_OUT[6:0])
      7'b1100011:
	  CASE_fromImemD_OUT_BITS_6_TO_0_0b1100011_from_ETC__q7 =
	      fromImem$D_OUT[14:12] == 3'b0 ||
	      fromImem$D_OUT[14:12] == 3'b001 ||
	      fromImem$D_OUT[14:12] == 3'b100 ||
	      fromImem$D_OUT[14:12] == 3'b101 ||
	      fromImem$D_OUT[14:12] == 3'b110 ||
	      fromImem$D_OUT[14:12] == 3'b111;
      7'b1100111:
	  CASE_fromImemD_OUT_BITS_6_TO_0_0b1100011_from_ETC__q7 =
	      fromImem$D_OUT[14:12] == 3'b0;
      default: CASE_fromImemD_OUT_BITS_6_TO_0_0b1100011_from_ETC__q7 =
		   fromImem$D_OUT[6:0] == 7'b1101111 ||
		   fromImem$D_OUT[6:0] == 7'b1110011 &&
		   fromImem$D_OUT[14:12] == 3'b0 &&
		   fromImem$D_OUT[11:7] == 5'b0 &&
		   CASE_fromImemD_OUT_BITS_31_TO_20_0b0_fromImem_ETC__q6;
    endcase
  end
  always@(fromImem$D_OUT)
  begin
    case (fromImem$D_OUT[14:12])
      3'b0, 3'b101:
	  CASE_fromImemD_OUT_BITS_14_TO_12_0b0_fromImem_ETC__q8 =
	      fromImem$D_OUT[31:25] == 7'b0 ||
	      fromImem$D_OUT[31:25] == 7'b0100000;
      default: CASE_fromImemD_OUT_BITS_14_TO_12_0b0_fromImem_ETC__q8 =
		   (fromImem$D_OUT[14:12] == 3'b001 ||
		    fromImem$D_OUT[14:12] == 3'b010 ||
		    fromImem$D_OUT[14:12] == 3'b011 ||
		    fromImem$D_OUT[14:12] == 3'b100 ||
		    fromImem$D_OUT[14:12] == 3'b110 ||
		    fromImem$D_OUT[14:12] == 3'b111) &&
		   fromImem$D_OUT[31:25] == 7'b0;
    endcase
  end
  always@(fromImem$D_OUT or
	  CASE_fromImemD_OUT_BITS_6_TO_0_0b1100011_from_ETC__q7 or
	  CASE_fromImemD_OUT_BITS_14_TO_12_0b0_fromImem_ETC__q8)
  begin
    case (fromImem$D_OUT[6:0])
      7'b0100011:
	  CASE_fromImemD_OUT_BITS_6_TO_0_0b100011_fromI_ETC__q9 =
	      fromImem$D_OUT[14:12] == 3'b0 ||
	      fromImem$D_OUT[14:12] == 3'b001 ||
	      fromImem$D_OUT[14:12] == 3'b010;
      7'b0110011:
	  CASE_fromImemD_OUT_BITS_6_TO_0_0b100011_fromI_ETC__q9 =
	      CASE_fromImemD_OUT_BITS_14_TO_12_0b0_fromImem_ETC__q8;
      default: CASE_fromImemD_OUT_BITS_6_TO_0_0b100011_fromI_ETC__q9 =
		   fromImem$D_OUT[6:0] == 7'b0110111 ||
		   CASE_fromImemD_OUT_BITS_6_TO_0_0b1100011_from_ETC__q7;
    endcase
  end
  always@(fromImem$D_OUT or
	  CASE_fromImemD_OUT_BITS_6_TO_0_0b100011_fromI_ETC__q9)
  begin
    case (fromImem$D_OUT[6:0])
      7'b0000011:
	  CASE_fromImemD_OUT_BITS_6_TO_0_0b11_fromImem_ETC__q10 =
	      fromImem$D_OUT[14:12] == 3'b0 ||
	      fromImem$D_OUT[14:12] == 3'b001 ||
	      fromImem$D_OUT[14:12] == 3'b010 ||
	      fromImem$D_OUT[14:12] == 3'b100 ||
	      fromImem$D_OUT[14:12] == 3'b101;
      7'b0010011:
	  CASE_fromImemD_OUT_BITS_6_TO_0_0b11_fromImem_ETC__q10 =
	      fromImem$D_OUT[14:12] == 3'b0 ||
	      fromImem$D_OUT[14:12] == 3'b010 ||
	      fromImem$D_OUT[14:12] == 3'b011 ||
	      fromImem$D_OUT[14:12] == 3'b100 ||
	      fromImem$D_OUT[14:12] == 3'b110 ||
	      fromImem$D_OUT[14:12] == 3'b111 ||
	      ((fromImem$D_OUT[14:12] == 3'b001) ?
		 fromImem$D_OUT[31:26] == 6'b0 && !fromImem$D_OUT[25] :
		 fromImem$D_OUT[14:12] == 3'b101 &&
		 (fromImem$D_OUT[31:26] == 6'b0 ||
		  fromImem$D_OUT[31:26] == 6'b010000) &&
		 !fromImem$D_OUT[25]);
      default: CASE_fromImemD_OUT_BITS_6_TO_0_0b11_fromImem_ETC__q10 =
		   fromImem$D_OUT[6:0] == 7'b0010111 ||
		   CASE_fromImemD_OUT_BITS_6_TO_0_0b100011_fromI_ETC__q9;
    endcase
  end
  always@(fromImem$D_OUT)
  begin
    case (fromImem$D_OUT[6:2])
      5'b0, 5'b00001, 5'b00100, 5'b00110, 5'b11001:
	  CASE_fromImemD_OUT_BITS_6_TO_2_0b0_0_0b1_0_0b_ETC__q11 = 3'd0;
      5'b00101, 5'b01101:
	  CASE_fromImemD_OUT_BITS_6_TO_2_0b0_0_0b1_0_0b_ETC__q11 = 3'd3;
      5'b01000, 5'b01001:
	  CASE_fromImemD_OUT_BITS_6_TO_2_0b0_0_0b1_0_0b_ETC__q11 = 3'd1;
      5'b11000: CASE_fromImemD_OUT_BITS_6_TO_2_0b0_0_0b1_0_0b_ETC__q11 = 3'd2;
      default: CASE_fromImemD_OUT_BITS_6_TO_2_0b0_0_0b1_0_0b_ETC__q11 = 3'd4;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        currentEpoch <= `BSV_ASSIGNMENT_DELAY 1'd0;
	fault <= `BSV_ASSIGNMENT_DELAY 1'd0;
	nextPc_register <= `BSV_ASSIGNMENT_DELAY 32'd0;
	starting <= `BSV_ASSIGNMENT_DELAY 1'd1;
      end
    else
      begin
        if (currentEpoch$EN)
	  currentEpoch <= `BSV_ASSIGNMENT_DELAY currentEpoch$D_IN;
	if (fault$EN) fault <= `BSV_ASSIGNMENT_DELAY fault$D_IN;
	if (nextPc_register$EN)
	  nextPc_register <= `BSV_ASSIGNMENT_DELAY nextPc_register$D_IN;
	if (starting$EN) starting <= `BSV_ASSIGNMENT_DELAY starting$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    currentEpoch = 1'h0;
    fault = 1'h0;
    nextPc_register = 32'hAAAAAAAA;
    starting = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkpipelined

